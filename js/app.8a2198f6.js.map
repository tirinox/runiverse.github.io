{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/elements/VisualLog.vue?9aa4","webpack:///./src/components/RendererSimple.vue?6961","webpack:///./src/App.vue?ba0d","webpack:///./src/components/elements/ControlPanel.vue?0b73","webpack:///./src/App.vue","webpack:///./src/components/RendererSimple.vue","webpack:///./src/provider/types.ts","webpack:///./src/components/elements/VisualLog.vue","webpack:///./src/config.ts","webpack:///./src/helpers/emitter.ts","webpack:///./src/components/elements/VisualLog.vue?1401","webpack:///./src/helpers/data_utils.ts","webpack:///./src/helpers/3d.ts","webpack:///./src/render/tx/txObject.ts","webpack:///./src/helpers/physics.ts","webpack:///./src/helpers/colors.ts","webpack:///./src/provider/midgard/v2/api.ts","webpack:///./src/provider/midgard/v2/base.ts","webpack:///./src/provider/midgard/v2/common.ts","webpack:///./src/provider/midgard/coinName.ts","webpack:///./src/render/tx/txObjectManager.ts","webpack:///./src/render/layers.ts","webpack:///./src/render/pool/ball_deform.vert","webpack:///./src/render/pool/fire_ball.frag","webpack:///./src/render/pool/poolParticles.js","webpack:///./src/render/pool/poolObjectMesh.ts","webpack:///./src/render/pool/poolObject.ts","webpack:///./src/render/wallet/walletObject.ts","webpack:///./src/render/pool/poolObjectManager.ts","webpack:///./src/render/wallet/walletObjectManager.ts","webpack:///./src/render/core/coreObject.ts","webpack:///./src/render/core/core_galaxy.vert","webpack:///./src/render/core/core_galaxy.frag","webpack:///./src/render/core/black_hole.vert","webpack:///./src/render/core/black_hole.frag","webpack:///./src/render/core/black_hole_lab.vert","webpack:///./src/render/core/black_hole_lab.frag","webpack:///./src/render/shaders/simple_glow.vert","webpack:///./src/render/shaders/simple_glow.frag","webpack:///./src/provider/midgard/v1/api.ts","webpack:///./src/render/background.ts","webpack:///./src/render/simpleScene.ts","webpack:///./src/provider/midgard/v1/base.ts","webpack:///./src/provider/midgard/v1/common.ts","webpack:///./src/provider/midgard/poolDetail.ts","webpack:///./src/helpers/iter.ts","webpack:///./src/provider/midgard/tx.ts","webpack:///./src/provider/midgard/midgard.ts","webpack:///./src/provider/process/poolChangeAnalize.ts","webpack:///./src/provider/process/txAnalyze.ts","webpack:///./src/helpers/async_utils.ts","webpack:///./src/provider/data_provider.ts","webpack:///./src/provider/realtime.ts","webpack:///./src/components/elements/ControlPanel.vue","webpack:///./src/helpers/platform.ts","webpack:///./src/components/elements/PlaybackPanel.vue","webpack:///./src/components/elements/PlaybackPanel.vue?b9e7","webpack:///./src/components/elements/ControlPanel.vue?e167","webpack:///./src/provider/playback.ts","webpack:///./src/render/shaders/trivial.vert","webpack:///./src/render/shaders/bloom_overlay.frag","webpack:///./src/render/pool/poolObjectSoloDebugScene.ts","webpack:///./src/render/tx/txObjectSoloDebugScene.ts","webpack:///./src/render/wallet/walletObjectSoloDebugScene.ts","webpack:///./src/components/RendererSimple.vue?a104","webpack:///./src/App.vue?3acc","webpack:///./src/App.vue?dfb6","webpack:///./src/main.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","class","ref","tabindex","onKeyDown","Number","fps","toFixed","objCount","showFps","EventType","PoolChangeType","TxEventType","messages","item","ident","message","NetworkId","DataSourcePlayback","DataSourceRealtime","Config","DataSource","Playback","File","SpeedMult","WaitFirstEvent","Debug","SceneName","RealtimeScanner","Network","Mainnet","MaxPagesOfActions","SuppressErrors","TickIntervalSec","MaxAgeOfPendingTxSec","IgnoreOldTransactions","FetchAttempts","Animations","MaxDeltaTimeOfFrame","ProximityDistance","Physics","Gravity","Constant","LongDistConstant","MaxSpeed","DistanceLimit","Camera","MinDistance","StartDistance","MaxDistance","FOV","Damp","Far","Near","Scene","Fog","Enabled","Core","Scale","Radius","Color","Simplified","PoolObject","Label","MaxPoolNameLength","Size","Y","Mass","InitialScale","SpeedAvg","SpeedVar","Staged","Distance","CenterGauss","ScaleGauss","InnerOrbitRadius","InnerOrbitSpeed","Glow","RadiusVar","PosVar","SphereResolution","BallShader","BaseSpeed","RepeatS","RepeatT","NoiseScale","BlendOffset","BlendSpeed","BumpSpeed","BumpScale","Mesh","RotationVar","Particles","N","Life","MoveSpeedAvg","MoveSpeedVar","ShiftVar","TxObject","DissipationOfSpeed","RepelFactor","InitialSpeed","ScaleConst","ScalePower","RotationSpeedGaussMagnitude","WalletObject","Cubemap","Name","RenderResolution","Postprocessing","Bloom","Threshold","Strength","Logging","Visual","MaxRows","FadeTime","FPSCounter","getMidgardBaseUrl","networkId","TestnetMultiChain","ChaosnetSingleBep2","ChaosnetMultiChain","alert","GlobalMutableState","PoolLabelVisisble","VISUAL_LOG_EVENT","visualLog","emitter","emit","log","msg","methods","killMessage","this","filter","onNewLogItem","ts","Date","now","type","setTimeout","tsCreatedAt","excessRows","console","mounted","on","render","byteToHex","hexOctet","toString","padStart","hex","buff","hexOctets","join","hexToBigInt","input","BigInt","truncateStringAtMiddle","text","startChars","endChars","maxLength","start","substring","end","truncStringTail","lastElement","arg","easyHash","Hex","HASH_PAR_BITS","HASH_PAR_HEX_DIGITS","HASH_PAR_DENOM","HASH_PAR_SALT","hashedParameterFloat01","path","rehashed","part","parseInt","hashedParameterFloat","min","max","f01","hashedParameterInt","Math","round","hashedParameterChoice","collection","range","size","startAt","Array","keys","map","ZeroVector3","randomPointOnSphere","center","point","random","normalize","multiplyScalar","add","targetObj","clone","radius","normal","_normal","Orbit","up","q","setFromUnitVectors","x","sin","y","cos","z","vector","applyQuaternion","PI","dt","speed","getPosition","position","copy","randomGauss","scale","v","randomGaussV3","hashToPolarCoordinates","hash","middle","floor","leftPart","rightPart","phiInt","valueOf","thetaInt","phi","theta","polarToXYZ","setFromSphericalCoords","limitLength","minLen","maxLen","currentLen","abs","newV","vectorFromPositionToDirection","pos","dir","magnitude","delta","sub","countObjects","parent","numOfMeshes","traverse","child","TxState","textureLoader","mass","force","velocity","dissipation","enabledPhysics","maxSpeed","accel","targetPosition","minDistance","deltaPosition","PhysicalObject","gravityForce","cutDistance","logForce","repelConst","dx","mag","pow","m1","pos1","m2","pos2","f","log10","mult","RUNE_COLOR","RUNE_COLOR_GRAD_1","RUNE_COLOR_GRAD_2","hashedColorBright","color","setHSL","runeAmount","isRune","walletAddress","poolName","state","ToPool","waiting","iterations","rotationAxis","rotationSpeed","scaleFromTx","texture","load","glowMaterial","sizeAttenuation","transparent","blending","depthWrite","obj","set","cfg","sc","mesh","rotateOnAxis","geoBox","whiteMaterial","reflectivity","runeMaterial","ActionStatusEnum","ActionTypeEnum","replace","configuration","basePath","axios","field","Error","DUMMY_BASE_URL","functionName","paramName","paramValue","undefined","url","searchParams","URLSearchParams","search","objects","isArray","delete","append","toPathString","pathname","axiosArgs","globalAxios","BASE_PATH","axiosRequestArgs","options","request","CoinName","getActions","limit","offset","address","txid","asset","localVarPath","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","getDepthHistory","pool","interval","count","to","from","encodeURIComponent","String","getEarningsHistory","getHealth","getLiquidityHistory","getMemberDetail","getMembersAdresses","getNetworkData","getNodes","getPool","getPoolStats","period","getPoolStatsLegacy","getPools","status","getProxiedConstants","getProxiedInboundAddresses","getProxiedLastblock","getProxiedNodes","getProxiedQueue","getStats","getSwapHistory","localVarAxiosParamCreator","localVarAxiosArgs","then","coin","RuneNative","RuneBnb","RuneBnbTest","RuneEth","includes","isRuneStr","thorConst","parseThorBigNumber","bn","bn1","div","toNumber","convertToThorBigNumber","bigX","bigThor","multipliedBy","NO_POOL","txObjects","values","txObjGroup","txObj","remove","poolMan","poolMass","allPools","poolObj","poolPos","forcePart","myGravityTo","repelFrom","clampLength","txMeta","WalletMass","CrossPool","targetPoolPos","getPoolByName","forceRepelAllPoolsExceptOne","isCloseToTarget","onReachedPool","ToWallet","targetPos","getWalletPosition","onReachedWallet","warn","ToCore","onReachedCore","inputCoin","action","_in","coins","runesPerInputAsset","runesPerAsset","getPoolPosition","pools","TxObjectManager","someUnknownPlace","amount","newTxObj","createNewTxObject","Rune","tx","out","outTx","sourcePosition","info","setVelocityToDirection","isLastOneObject","Swap","isDoubleSwap","createOutToWalletTxObject","createCrossPoolTxObject","destroyTxObject","txObjMeta","txObjElement","update","updateTxState","amt","price","realInputHash","scene","calcRuneAmount","txObject","velocityDirection","coinName","VisualLog","error","walletMan","findWalletByAddress","inputAddress","isThereTxMesh","updateTransactionMeshStatus","Switch","orbiting","Pending","inTx","uuid","txID","LAYER_BLOOM_SCENE","PoolParticles","texName","time","flowVert","geometry","THREE","params","life","randFloat","setAttribute","mat","depthTest","assetColor","particles","sisterDirection","verts","attributes","array","baseDir","vi","param","needsUpdate","assetColor2","rSpeedVar","_rotationSpeed","prepare","localDir","sistersDistance","sisterWorldPos","sisterColor","customUniforms","lerp","thisWorldPos","getWorldPosition","negate","_rotateMesh","glow","radiusX","radiusY","flowParticles","updateParticles","rotateX","rotateY","rotateZ","glowColor","offsetHSL","createBallMaterial","PoolObjectMesh","geoPool","ballMaterial","layers","enable","_addPlainGlow","getGlowColor","createParticles","baseTexName","blendTexName","loadAsync","baseTexture","wrapS","wrapT","baseSpeed","noiseTexture","blendTexture","bumpTexture","repeatS","repeatT","noiseScale","blendSpeed","blendOffset","bumpSpeed","bumpScale","alpha","uniforms","vertexShader","fragmentShader","FlareAnimType","FlareOpacityAnimType","clamp","innerSpeed","innerOrbitHolder","createLabel","enabled","isEnabled","runeSideMesh","makeOneMesh","assetSideMesh","updateScale","depth","runeDepth","ReferenceLog","color1","color2","poolMesh","orbit","step","runeSideOrbit","assetSideOrbit","scaleFromPool","setScalar","label","runeWorld","assetWorld","fullDistance","r2a","a2r","setSisterParams","factor","oldScale","runeAmt","assetAmt","isAdd","poolObjects","pm","dispose","debug","poolStruct","isTherePoolMesh","randomizePhase","orbitSpeed","poolStructs","flareTextures","AllFlareAnimType","lastUpdatedAt","flares","makeFlares","updateDate","material","geom","colors","nFlares","makeFlare","prefix","textureName","opacity","colorIndex","spriteMaterial","sprite","anim","direction","phase","initialRadius","lookAt","flare","rotation","BlackHoleType","walletObjects","AddressRadius","walletObj","subTxs","subTx","updateWallet","wo","newWalletObj","addressHash","positionate","isThereAddress","makeNewWalletObj","CoreObjSize","CoreObjScale","PoolDetailStatusEnum","TxDetailsStatusEnum","TxDetailsTypeEnum","BH_Type","Lab","loadCoreMeshSimple","loadCoreMeshBlackHole","environment","cubeMap","core","glowMat","side","coreGlow","Galaxy","bhVertAndFragShaders","texEnvironMap","texNoise","uniformsNeedUpdate","srgb","loader","setPath","textureCube","tex","encoding","background","txObjManager","poolObjManager","walletObjManager","createCore","makeLight","makeStarEnvironment","setEnvironment","w","h","pointLight","ambient","removeAllPoolMeshes","removeAll","e","eventType","ResetAll","resetAll","UpdatePool","change","poolChange","Removed","removePoolMesh","previousPool","addNewPoolMesh","DepthChanged","hearBeat","Transaction","ev","txEvent","Add","makeWalletsFromTx","createTransactionObjects","Destroy","destroyTransactionMesh","StatusUpdated","getAssetInfo","getEarningDetail","getPoolAggChanges","getPoolsDetails","view","getStakersAddressAndAssetData","getStakersAddressData","getStakersData","getStatsChanges","getThorchainProxiedConstants","getThorchainProxiedEndpoints","getThorchainProxiedLastblock","getThorchainProxiedQueue","getTotalVolChanges","getTxDetails","assetDepth","units","other","isEqualTo","PoolDetail","minus","toLowerCase","poolUnits","setDifference","setA","setB","_difference","Set","elem","setIntersection","_intersection","has","arrayNotEmpty","date","height","metadata","_lazyHash","dateTimestampMs","addr","txId","txs","sum","Refund","Withdraw","getRuneVolume","Donate","AddLiquidity","actionType","in_tx","ThorTransaction","TxV1toV2","out_tx","meta","Success","Stake","DoubleSwap","Unstake","encoder","TextEncoder","encodedData","encode","JSON","stringify","inArray","totalCount","TxBatch","fromMidgardV1","fromMidgardV2","MAX_ACTIONS_PER_CALL","apiV1","apiV2","actions","sort","details","prevPoolsMapping","currentPoolsMapping","fromEntries","previousKeys","currentKeys","removedKeys","addedKeys","commonKeys","poolChanges","Added","currentPool","isEqual","typeOfChange","StatusChanged","PoolChangeAnalyzer","poolChangeToEvent","ignoreOld","txCache","allKeys","pendingKeys","reduce","accum","k","beforeTs","newTx","changes","shouldContinue","txHash","oldTx","tooOld","ageSeconds","allPendingTx","events","sleep","seconds","Promise","resolve","delegate","receiveEvent","midgard","intervalSec","ignoreFirstTime","suppressErrors","counter","firstTimeActions","poolAnalyzer","txAnalyzer","getPoolState","poolEvents","processPools","poolEvent","maxPage","page","getUserActions","batch","processTransactions","goOnFlag","all","requestPools","requestActions","attempt","tickJob","timer","tick","sendReset","clearTimeout","href","target","isHelpOn","fullScreen","canGoFullScreen","goFullScreen","isPlayback","deviceType","ua","navigator","userAgent","test","isMobile","disabled","atBeginning","goToBeginning","icon","stepBackward","finished","stopPlayClick","isPlaying","stepForward","computed","dataProvider","play","pause","components","PlaybackPanel","document","exitFullscreen","documentElement","requestFullscreen","addEventListener","fullscreenElement","helpOn","RecordEventType","V2","fileName","timeScale","waitFirstEvent","isFileLoaded","_isRunning","currentEventIndex","eventStreamArray","prevEventTime","version","poolsState","txState","resetState","stopTick","sec_from_start","duration","totalDurationSec","curr","currentEvent","isFinished","loadFile","stop","fetch","response","json","start_date","parser","removed","removedAssets","removedAsset","added","changed","newPoolJson","poolDetails","txStream","a","b","maxNumber","txStreamExcess","txStreamLimited","evt","progress","PoolEvent","executePoolEvent","event","TxEvent","executeTxEvent","waitFirst","currentEventTime","secondsToNextEvent","executeEvent","nextEvent","clearInterval","poConfig","rows","columns","xStep","yStep","row","col","getScene","ControlPanel","props","code","resetCamera","controls","reset","resizeRendererToDisplaySize","renderer","canvas","domElement","width","clientWidth","clientHeight","camera","aspect","updateProjectionMatrix","needResize","setSize","bloomComposer","finalComposer","myScene","onResize","lastCalledTime","updateAnimations","savedBg","darkenNonBloomed","restoreMaterial","visible","cubeCamera","cubeRenderTarget","requestAnimationFrame","createCamera","innerWidth","innerHeight","OrbitControls","listenToKeyEvents","maxDistance","enableDamping","dampingFactor","saveState","createEnvironmentCamera","format","generateMipmaps","minFilter","createRealtimeDataSource","createPlaybackDataSource","runDataSource","makeRenderer","antialias","devicePixelRatio","setPixelRatio","autoClearColor","renderScene","RenderPass","bloomPass","UnrealBloomPass","bloomCfg","threshold","strength","EffectComposer","renderToScreen","addPass","darkMaterial","bloomLayer","materials","finalPass","ShaderPass","bloomTexture","renderTarget2","trivial","defines","needsSwap","isMesh","isWebGLAvailable","warning","getWebGLErrorMessage","getElementById","appendChild","$refs","fogCfg","fog","beforeUnmount","RendererSimple","app","App","component","config","globalProperties","mount"],"mappings":"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","file":"js/app.8a2198f6.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./VisualLog.vue?vue&type=style&index=0&id=bf793a64&lang=css\"","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./RendererSimple.vue?vue&type=style&index=0&id=621e2d76&lang=css\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=c6e7d9ce&lang=css\"","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./ControlPanel.vue?vue&type=style&index=0&id=31c64d2a&lang=css\"","<template>\n    <RendererSimple/>\n<!--    <RendererShader/>-->\n</template>\n\n\n<script lang=\"ts\">\n\nimport {defineComponent} from 'vue';\nimport RendererSimple from \"@/components/RendererSimple.vue\";\n// import RendererShader from \"@/components/RendererShader.vue\";\n\nexport default defineComponent({\n    name: 'App',\n\n    methods: {},\n\n    components: {\n        // RendererShader,\n        RendererSimple,\n    },\n\n    mounted() {\n    }\n});\n\n</script>\n\n\n<style>\n\n#app {\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n    overflow: hidden;\n    background: black;\n}\n\na {\n    color: white;\n}\n\na:visited {\n    color: white;\n}\n\n</style>\n","<template>\n    <div class=\"canvas-holder\">\n        <canvas class=\"canvas-full\" ref=\"canvas\" tabindex=\"1\" @keydown=\"onKeyDown\"></canvas>\n        <div class=\"fps-counter\" v-show=\"showFps\">\n            <span>{{ Number(fps).toFixed(2) }} FPS, {{ objCount }} objects</span>\n            <VisualLog></VisualLog>\n        </div>\n\n        <ControlPanel></ControlPanel>\n    </div>\n</template>\n\n<script>\n\nimport * as THREE from \"three\"\nimport SimpleScene from \"@/render/simpleScene\";\nimport {RealtimeProvider} from \"@/provider/realtime\";\nimport {Midgard} from \"@/provider/midgard/midgard\";\nimport {Config, DataSourcePlayback, DataSourceRealtime} from \"@/config\";\nimport VisualLog from \"@/components/elements/VisualLog\";\nimport {WEBGL} from \"three/examples/jsm/WebGL\";\nimport {RenderPass} from \"three/examples/jsm/postprocessing/RenderPass\";\nimport {UnrealBloomPass} from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport {EffectComposer} from \"three/examples/jsm/postprocessing/EffectComposer\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport ControlPanel from \"@/components/elements/ControlPanel\";\nimport emitter from \"@/helpers/emitter.ts\"\nimport {PlaybackDataProvider} from \"@/provider/playback\";\nimport {countObjects} from \"@/helpers/3d\";\nimport trivialVertShader from \"@/render/shaders/trivial.vert\"\nimport bloomOverlayFragShader from \"@/render/shaders/bloom_overlay.frag\"\nimport {ShaderPass} from \"three/examples/jsm/postprocessing/ShaderPass\";\nimport {LAYER_BLOOM_SCENE} from \"@/render/layers\";\nimport PoolObjectSoloDebugScene from \"@/render/pool/poolObjectSoloDebugScene\";\nimport TWEEN from \"tween\";\nimport TxObjectSoloDebugScene from \"@/render/tx/txObjectSoloDebugScene\";\nimport WalletObjectSoloDebugScene from \"@/render/wallet/walletObjectSoloDebugScene\";\n\n\nfunction getScene(scene, name) {\n    if (name === 'PoolObjectSoloDebugScene') {\n        return new PoolObjectSoloDebugScene(scene)\n    } else if (name === 'TxObjectSoloDebugScene') {\n        return new TxObjectSoloDebugScene(scene)\n    } else if (name === 'WalletObjectSoloDebugScene') {\n        return new WalletObjectSoloDebugScene(scene)\n    } else if (name === 'default' || name === 'DefaultScene') {\n        return new SimpleScene(scene)\n    } else {\n        alert('Unknown scene!')\n    }\n}\n\nexport default {\n    name: 'RendererSimple',\n    components: {ControlPanel, VisualLog},\n    props: {},\n\n    data() {\n        return {\n            fps: 1.0,\n            showFps: Config.Logging.FPSCounter,\n            objCount: 0,\n        }\n    },\n\n    methods: {\n        onKeyDown(event) {\n            if (event.code === 'KeyR') {\n                this.resetCamera()\n                VisualLog.log('Camera reset.')\n            } else if (event.code === 'KeyD') {\n                this.showFps = !this.showFps\n                if (this.showFps) {\n                    VisualLog.log('debug on!')\n                }\n            } else if (event.code === 'KeyH') {\n                emitter.emit('ToggleHelp')\n            }\n        },\n\n        resetCamera() {\n            this.controls.reset()\n        },\n\n        resizeRendererToDisplaySize() {\n            const renderer = this.renderer\n            const canvas = renderer.domElement;\n            const width = canvas.clientWidth;\n            const height = canvas.clientHeight;\n\n            this.camera.aspect = width / height;\n            this.camera.updateProjectionMatrix();\n\n            const needResize = canvas.width !== width || canvas.height !== height;\n            if (needResize) {\n                renderer.setSize(width, height, false);\n\n                this.bloomComposer.setSize(width, height);\n                this.finalComposer.setSize(width, height);\n\n                this.myScene.onResize(width, height)\n            }\n\n            return needResize;\n        },\n\n        render(time) {\n            TWEEN.update()\n\n            if (!this.lastCalledTime) {\n                this.lastCalledTime = time;\n                this.fps = 0;\n            } else {\n                const delta = (time - this.lastCalledTime);\n                this.lastCalledTime = time;\n                this.fps = 1000.0 / delta\n\n                const dt = Math.min(Config.Animations.MaxDeltaTimeOfFrame, delta * 0.001)\n                this.myScene.updateAnimations(dt)\n            }\n\n            this.resizeRendererToDisplaySize(this.renderer);\n\n            // render bloom\n            const savedBg = this.scene.background\n            this.scene.background = null\n            this.scene.traverse(this.darkenNonBloomed);\n            this.bloomComposer.render();\n            this.scene.traverse(this.restoreMaterial);\n            this.scene.background = savedBg\n\n            if (!Config.Scene.Core.Simplified) {\n                if (this.myScene.core) {\n                    this.myScene.core.visible = false;\n                }\n                this.cubeCamera.position.copy(this.camera.position)\n                this.cubeCamera.update(this.renderer, this.scene);\n                this.myScene.setEnvironment(this.cubeRenderTarget.texture)\n                if (this.myScene.core) {\n                    this.myScene.core.visible = true;\n                }\n            }\n\n            this.finalComposer.render();\n\n            this.objCount = countObjects(this.myScene.scene)\n\n            requestAnimationFrame(this.render);\n        },\n\n        createCamera(domElement) {\n            const cfg = Config.Camera\n            this.camera = new THREE.PerspectiveCamera(cfg.FOV, window.innerWidth / window.innerHeight,\n                cfg.Near, cfg.Far);\n\n            const controls = new OrbitControls(this.camera, domElement);\n\n            // const controls = new TrackballControls(this.camera, this.renderer.domElement)\n            controls.listenToKeyEvents(this.canvas);\n\n            controls.minDistance = cfg.MinDistance;\n            this.camera.position.z = cfg.StartDistance\n            controls.maxDistance = cfg.MaxDistance\n            controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\n            controls.dampingFactor = cfg.Damp\n            controls.saveState()\n            this.controls = controls\n        },\n\n        createEnvironmentCamera() {\n            const cfg = Config.Camera\n\n            this.cubeRenderTarget = new THREE.WebGLCubeRenderTarget(Config.Scene.Cubemap.RenderResolution, {\n                format: THREE.RGBFormat,\n                generateMipmaps: false,\n                minFilter: THREE.LinearMipmapLinearFilter\n            });\n            this.cubeCamera = new THREE.CubeCamera(cfg.Near, cfg.Far, this.cubeRenderTarget);\n            this.scene.add(this.cubeCamera);\n        },\n\n        createRealtimeDataSource() {\n            const midgard = new Midgard(Config.RealtimeScanner.Network)\n            this.dataProvider = new RealtimeProvider(\n                this.myScene, midgard,\n                Config.RealtimeScanner.TickIntervalSec,\n                Config.RealtimeScanner.IgnoreOldTransactions,\n                Config.RealtimeScanner.SuppressErrors\n            )\n        },\n\n        createPlaybackDataSource() {\n            const path = Config.Playback.File\n            const timeScale = Config.Playback.SpeedMult\n            const waitFirst = Config.Playback.WaitFirstEvent\n            this.dataProvider = new PlaybackDataProvider(this.myScene, path, timeScale, waitFirst)\n        },\n\n        runDataSource() {\n            if (Config.DataSource === DataSourceRealtime) {\n                this.createRealtimeDataSource()\n            } else if (Config.DataSource === DataSourcePlayback) {\n                this.createPlaybackDataSource()\n            } else {\n                console.warn('No data source set up.')\n                return\n            }\n            this.dataProvider.play()\n        },\n\n        makeRenderer(canvas) {\n            // Make renderer\n            let renderer = this.renderer = new THREE.WebGLRenderer({\n                canvas,\n                antialias: false\n            });\n\n            if (devicePixelRatio) {\n                console.log(`Renderer: Setting devicePixelRatio = ${devicePixelRatio}.`)\n                renderer.setPixelRatio(devicePixelRatio)\n            }\n            renderer.autoClearColor = true;\n\n            // Make passes\n            const renderScene = new RenderPass(this.scene, this.camera);\n\n            // BLOOM PASS\n            const bloomPass = new UnrealBloomPass({x: 32, y: 32});\n            const bloomCfg = Config.Scene.Postprocessing.Bloom\n            bloomPass.threshold = bloomCfg.Threshold\n            bloomPass.strength = bloomCfg.Strength\n            bloomPass.radius = bloomCfg.Radius\n\n            const bloomComposer = new EffectComposer(renderer);\n            bloomComposer.renderToScreen = false;\n            bloomComposer.addPass(renderScene);\n            bloomComposer.addPass(bloomPass);\n            this.bloomComposer = bloomComposer\n\n            this.darkMaterial = new THREE.MeshBasicMaterial({color: \"black\"});\n\n            this.bloomLayer = new THREE.Layers();\n            this.bloomLayer.set(LAYER_BLOOM_SCENE);\n            this.materials = {};\n\n            // FINAL PASS\n\n            const finalPass = new ShaderPass(\n                new THREE.ShaderMaterial({\n                    uniforms: {\n                        baseTexture: {value: null},\n                        bloomTexture: {value: bloomComposer.renderTarget2.texture}\n                    },\n                    vertexShader: trivialVertShader,\n                    fragmentShader: bloomOverlayFragShader,\n                    defines: {}\n                }), \"baseTexture\"\n            );\n            finalPass.needsSwap = true;\n\n            const finalComposer = new EffectComposer(renderer);\n            finalComposer.addPass(renderScene);\n            if (bloomCfg.Enabled) {\n                finalComposer.addPass(finalPass);\n            }\n            this.finalComposer = finalComposer\n        },\n\n        darkenNonBloomed(obj) {\n            if (obj.isMesh && this.bloomLayer.test(obj.layers) === false) {\n                this.materials[obj.uuid] = obj.material;\n                obj.material = this.darkMaterial;\n            }\n        },\n\n        restoreMaterial(obj) {\n            if (this.materials[obj.uuid]) {\n                obj.material = this.materials[obj.uuid];\n                delete this.materials[obj.uuid];\n            }\n        }\n    },\n\n    mounted() {\n        if (!WEBGL.isWebGLAvailable()) {\n            const warning = WEBGL.getWebGLErrorMessage();\n            this.showFps = false\n            document.getElementById('app').appendChild(warning);\n            return\n        }\n\n        this.canvas = this.$refs.canvas\n\n        this.scene = new THREE.Scene();\n\n        if(Config.Scene.Fog.Enabled) {\n            const fogCfg = Config.Scene.Fog\n            this.scene.fog = new THREE.Fog(0x0, fogCfg.Near, fogCfg.Far)\n        }\n\n        this.myScene = getScene(this.scene, Config.Debug.SceneName)\n\n        this.createCamera(this.canvas)\n        this.createEnvironmentCamera()\n\n        this.makeRenderer(this.canvas)\n\n        this.resizeRendererToDisplaySize();\n\n        this.runDataSource()\n\n        requestAnimationFrame(this.render);\n    },\n\n    beforeUnmount() {\n        if (this.dataProvider) {\n            this.dataProvider.pause()\n            this.dataProvider.resetState()\n        }\n    }\n}\n\n</script>\n\n<style>\n\n.canvas-full {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    outline: none;\n}\n\n.fps-counter {\n    text-align: left;\n    font-size: 14pt;\n    color: whitesmoke;\n    position: absolute;\n    margin: 10px;\n    left: 0;\n    top: 0;\n}\n\n.canvas-holder {\n    width: 100%;\n    height: 100%;\n}\n\n</style>\n","import {PoolDetail} from \"@/provider/midgard/poolDetail\";\nimport {ThorTransaction} from \"@/provider/midgard/tx\";\n\n\nexport const enum EventType {\n    Nope = 'nope',\n    SetNodes = 'setNodes',\n    Transaction = 'transaction',\n    SetPools = 'setPools',\n    UpdatePool = 'updatePools',\n    ResetAll = 'resetPools'\n}\n\n\nexport enum PoolChangeType {\n    Added = 'added',\n    Removed = 'removed',\n    StatusChanged = 'statusChanged',\n    DepthChanged = 'depthChanged'\n}\n\n\nexport interface PoolChange {\n    type: PoolChangeType,\n    pool?: PoolDetail,\n    previousPool?: PoolDetail,\n}\n\n\nexport enum TxEventType {\n    Add = 'addTx',\n    StatusUpdated = 'statusUpdated',\n    Destroy = 'destroyTx'\n}\n\n\nexport interface TxEvent {\n    type: TxEventType\n    tx: ThorTransaction\n}\n\n\nexport interface ThorEvent {\n    eventType: EventType\n    poolChange?: PoolChange\n    txEvent?: TxEvent\n    date: number\n}\n\n\nexport interface ThorEventListener {\n    receiveEvent(e: ThorEvent): void\n}\n\n","<template>\n    <div class=\"vlog-area\">\n        <div v-for=\"item of messages\" :key=\"item.ident\">{{ item.message }}</div>\n    </div>\n</template>\n\n<script>\n\nimport emitter from \"@/helpers/emitter.ts\"\nimport cryptoRandomString from \"crypto-random-string\";\nimport {Config} from \"@/config\";\n\nexport const VISUAL_LOG_EVENT = 'visualLog'\n\nexport function visualLog(message) {\n    emitter.emit(VISUAL_LOG_EVENT, message)\n}\n\nexport default {\n    log(msg) {\n        visualLog(msg)\n    },\n\n    name: 'VisualLog',\n\n    data() {\n        return {\n            messages: []\n        }\n    },\n\n    methods: {\n        killMessage(ident) {\n            this.messages = this.messages.filter(m => m.ident !== ident)\n        },\n\n        onNewLogItem(message) {\n            if(!Config.Logging.Visual.Enabled) {\n                this.messages = []\n                return\n            }\n\n            const ts = +Date.now()\n\n            const ident = cryptoRandomString({length: 10, type: 'ascii-printable'})\n\n            setTimeout(() => {\n                this.killMessage(ident)\n            }, Config.Logging.Visual.FadeTime * 1000.0)\n\n            this.messages.push({\n                message,\n                tsCreatedAt: ts,\n                ident\n            })\n\n            const excessRows = this.messages.length - Config.Logging.Visual.MaxRows\n            if(excessRows > 0) {\n                this.messages.splice(0, excessRows)\n            }\n\n            console.log(`Visual log: ${message}`)\n        }\n    },\n\n    mounted() {\n        emitter.on(VISUAL_LOG_EVENT, this.onNewLogItem)\n    }\n}\n\n</script>\n\n<style>\n\n.vlog-area {\n    user-select: none;\n    overflow: hidden;\n\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: left;\n    color: white;\n    font-size: 10pt;\n}\n\n</style>\n","export enum NetworkId {\n    TestnetMultiChain = 'testnet-multi',\n    ChaosnetSingleBep2 = 'chaosnet-bep2',\n    ChaosnetMultiChain = 'chaosnet-multi',\n    Mainnet = ChaosnetMultiChain,\n}\n\nexport const DataSourcePlayback = 'playback'\nexport const DataSourceRealtime = 'realtime'\nexport const DataSourceNone = 'none'\n\nexport const Config = {\n    // DataSource: DataSourcePlayback,\n    DataSource: DataSourceRealtime,\n    // DataSource: DataSourceNone,\n\n    Playback: {\n        File: './records/example1_v2.json',\n        SpeedMult: 5.0,\n        WaitFirstEvent: false\n    },\n\n    Debug: {\n        // SceneName: 'WalletObjectSoloDebugScene'\n        // SceneName: 'PoolObjectSoloDebugScene'\n        SceneName: 'default'\n    },\n\n    RealtimeScanner: {\n        Network: NetworkId.Mainnet,\n        MaxPagesOfActions: 2,\n        SuppressErrors: false,\n        TickIntervalSec: 5,\n        MaxAgeOfPendingTxSec: 12 * 60 * 60,\n        IgnoreOldTransactions: false,\n        FetchAttempts: 3,\n    },\n\n    Animations: {\n        MaxDeltaTimeOfFrame: 0.5,\n        ProximityDistance: 35.0  // todo: move to PoolObject/WalletObject\n    },\n\n    Physics: {\n        Gravity: {\n            Constant: 1e5,\n            LongDistConstant: 0.0001,\n        },\n        MaxSpeed: 1e8,\n        DistanceLimit: 2e8,\n    },\n\n    Camera: {\n        MinDistance: 1000,\n        StartDistance: 1500,\n        MaxDistance: 7000,\n        FOV: 60,\n        Damp: 0.2,\n        Far: 10000,\n        Near: 1,\n    },\n\n    Scene: {\n        Fog: {\n            Enabled: false,\n            Near: 100,\n            Far: 300\n        },\n        Core: {\n            Scale: 3.0,\n            Radius: 380.0,\n            Color: 0x202520,\n            // Simplified: true,\n            Simplified: false,\n        },\n        PoolObject: {\n            Label: {\n                Enabled: true,\n                MaxPoolNameLength: 14,\n                Size: 24,\n                Y: 80,\n            },\n\n            Mass: 10000,\n            InitialScale: 0.2,\n            SpeedAvg: 0.06,\n            SpeedVar: 0.04,\n\n            Staged: {\n                Distance: {\n                    CenterGauss: 2500.0,\n                    ScaleGauss: 770.0\n                }\n            },\n            Enabled: {\n                Distance: {\n                    CenterGauss: 1400.0,\n                    ScaleGauss: 100.0\n                }\n            },\n            InnerOrbitRadius: 85.0,\n            InnerOrbitSpeed: 2.1,\n            Glow: {\n                Enabled: true,\n                Radius: 220.0,\n                RadiusVar: 20.0,\n                PosVar: 0.0,\n            },\n            SphereResolution: 150,\n            BallShader: {\n                BaseSpeed: 0.3,\n                RepeatS: 1.0,\n                RepeatT: 1.0,\n                NoiseScale: 0.5, // magnitude of noise effect\n                BlendOffset: 0.0, // adjust lightness/darkness of blended texture\n                BlendSpeed: 0.2, // multiplier for distortion speed\n                BumpSpeed: 0.1, // multiplier for distortion speed\n                BumpScale: 30.0, // magnitude of normal displacement\n            },\n            Mesh: {\n                RotationVar: 0.0,\n            },\n            Particles: {\n                N: 330,\n                Life: 1.5,\n                MoveSpeedAvg: 100.2,\n                MoveSpeedVar: 80.1,\n                ShiftVar: 80,\n                Size: 20,\n            }\n        },\n        TxObject: {\n            DissipationOfSpeed: 0.4, // 0.2\n            RepelFactor: 1e-6,\n            InitialSpeed: 1440.0,\n            Mass: 100.0,\n            ScaleConst: 5.5,\n            ScalePower: 0.25,\n            RotationSpeedGaussMagnitude: 42.0\n        },\n        WalletObject: {\n            Label: {\n                Enabled: true\n            }\n        },\n        Cubemap: {\n            Enabled: true,\n            // Name: \"starry_cubemap_debug\",\n            Name: \"starry_cubemap_1\",\n            RenderResolution: 2048,\n        },\n        Postprocessing: {\n            Bloom: {\n                Enabled: false,\n                Threshold: 0.0,\n                Strength: 0.5,\n                Radius: 0.5,\n            }\n        }\n    },\n\n    Logging: {\n        Visual: {\n            Enabled: true,\n            MaxRows: 12,\n            FadeTime: 2.5,\n        },\n        FPSCounter: true\n    },\n\n    getMidgardBaseUrl(networkId: NetworkId): string {\n        if (networkId === NetworkId.TestnetMultiChain) {\n            return `https://testnet.midgard.thorchain.info`\n        } else if (networkId === NetworkId.ChaosnetSingleBep2) {\n            return `https://chaosnet-midgard.bepswap.com`\n        } else if (networkId === NetworkId.ChaosnetMultiChain) {\n            return 'https://midgard.thorchain.info'\n        } else {\n            alert(`Network \"${networkId}\" is not supported!`)\n        }\n        return ''\n    },\n\n    GlobalMutableState: {\n        PoolLabelVisisble: false\n    }\n}\n","import mitt from 'mitt';\nexport default mitt();\n","import { render } from \"./VisualLog.vue?vue&type=template&id=bf793a64\"\nimport script from \"./VisualLog.vue?vue&type=script&lang=js\"\nexport * from \"./VisualLog.vue?vue&type=script&lang=js\"\n\nimport \"./VisualLog.vue?vue&type=style&index=0&id=bf793a64&lang=css\"\nscript.render = render\n\nexport default script","import * as crypto from \"crypto-js\";\n\nconst byteToHex: Array<string> = [];\n\nfor (let n = 0; n <= 0xff; ++n) {\n    const hexOctet = n.toString(16).padStart(2, \"0\");\n    byteToHex.push(hexOctet);\n}\n\nexport function hex(buff: Uint8Array): string {\n    const hexOctets = [];\n\n    for (let i = 0; i < buff.length; ++i)\n        hexOctets.push(byteToHex[buff[i]]);\n\n    return hexOctets.join(\"\");\n}\n\nexport function hexToBigInt(input: string): BigInt {\n    if (input.length % 2) {\n        input = '0' + input;\n    }\n\n    return BigInt('0x' + input);\n}\n\nexport function truncateStringAtMiddle(text: string, startChars: number, endChars: number, maxLength: number): string {\n    if (text.length > maxLength) {\n        var start = text.substring(0, startChars);\n        var end = text.substring(text.length - endChars, text.length);\n        return start + '...' + end;\n    }\n    return text;\n}\n\nexport function truncStringTail(text: string, maxLength: number = 10): string {\n    if (text.length > maxLength) {\n        return text.substring(0, maxLength) + '...'\n    } else {\n        return text\n    }\n}\n\nexport function lastElement<Type>(arg: Array<Type>): Type {\n    return arg[arg.length - 1]\n}\n\nexport function easyHash(input: string): string {\n    return crypto.SHA256(input).toString(crypto.enc.Hex)\n}\n\nconst HASH_PAR_BITS = 32\nconst HASH_PAR_HEX_DIGITS = HASH_PAR_BITS / 4\nconst HASH_PAR_DENOM = 2 ** HASH_PAR_BITS\nconst HASH_PAR_SALT = 'HashedSaltBro1242'\n\nexport function hashedParameterFloat01(input: string, path: string) {\n    const rehashed = easyHash(HASH_PAR_SALT + input + path)\n    const part = parseInt(rehashed.substring(0, HASH_PAR_HEX_DIGITS), 16)\n    return part / HASH_PAR_DENOM\n}\n\nexport function hashedParameterFloat(input: string, path: string, min: number = 0.0, max: number = 0.0) {\n    const f01 = hashedParameterFloat01(input, path)\n    return min + f01 * (max - min)\n}\n\nexport function hashedParameterInt(input: string, path: string, min: number = 0, max: number = 0) {\n    const n = hashedParameterFloat(input, path, min, max)\n    return Math.round(n)\n}\n\nexport function hashedParameterChoice(input: string, path: string, collection: Array<any>) {\n    const n = hashedParameterInt(input, path, 0, collection.length - 1)\n    return collection[n]\n}\n\nexport function range(size: number, startAt = 0): Array<number> {\n    return [...Array(size).keys()].map(i => i + startAt);\n}\n","import {Quaternion, Vector3, Object3D} from \"three\";\nimport {hexToBigInt} from \"@/helpers/data_utils\";\nimport * as THREE from \"three\";\n\nexport const ZeroVector3 = new Vector3()\n\nexport function randomPointOnSphere(r: number = 1.0, center: Vector3 = ZeroVector3): Vector3 {\n    let point = new Vector3(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1)\n    point.normalize();\n    point.multiplyScalar(r);\n    point.add(center)\n    return point\n}\n\n\nexport class Orbit {\n    targetObj: THREE.Object3D;\n    center: Vector3;\n    private _normal: Vector3 = Orbit.up.clone();\n    radius: number;\n    t: number = 0.0;\n    private q: Quaternion = new Quaternion()\n    static up: Vector3 = new Vector3(0, 1, 0)\n\n    get normal(): Vector3 {\n        return this._normal;\n    }\n\n    set normal(value: Vector3) {\n        this._normal = value;\n        this.q.setFromUnitVectors(Orbit.up, value)\n    }\n\n    getPosition(t: number) {\n        const x = this.radius * Math.sin(t)\n        const y = this.radius * Math.cos(t)\n        const z = 0.0\n\n        let vector = new Vector3(x, y, z)\n        vector.applyQuaternion(this.q)\n        vector.add(this.center)\n\n        return vector\n    }\n\n    randomizePhase() {\n        this.t = Math.random() * Math.PI * 2\n    }\n\n    step(dt: number = 0.016, speed: number = 1.0): Vector3 {\n        this.t += dt * speed\n        const p = this.getPosition(this.t)\n        if (this.targetObj) {\n            this.targetObj.position.copy(p)\n        }\n        return p\n    }\n\n    constructor(targetObj: THREE.Object3D,\n                center: Vector3 = ZeroVector3.clone(),\n                radius: number = 100,\n                normal: Vector3 = new Vector3(0, 1, 0)) {\n        this.targetObj = targetObj\n        this.radius = radius\n        this.normal = normal\n        this.center = center\n    }\n}\n\n\nexport function randomGauss(center: number, scale: number) {\n    let r = 0;\n    const v = 5\n    for (let i = v; i > 0; i--) {\n        r += Math.random();\n    }\n    return (r / v - 0.5) * scale + center\n}\n\nexport function randomGaussV3(center: number, scale: number) {\n    return new Vector3(\n        randomGauss(center, scale),\n        randomGauss(center, scale),\n        randomGauss(center, scale),\n    )\n}\n\nexport interface PolarCoordinates {\n    r: number\n    phi: number\n    theta: number\n}\n\nexport function hashToPolarCoordinates(hash: string, r: number = 1.0): PolarCoordinates {\n    const middle = Math.floor(hash.length / 2)\n    const leftPart = hash.substring(0, middle)\n    const rightPart = hash.substring(middle, hash.length)\n\n    const phiInt = hexToBigInt(leftPart).valueOf() % BigInt(36000)\n    const thetaInt = hexToBigInt(rightPart).valueOf() % BigInt(36000)\n\n    const phi = (Number(phiInt) * 0.01) * Math.PI / 180.0\n    const theta = (Number(thetaInt) * 0.01 - 180.0) * Math.PI / 180.0\n\n    return {\n        r,\n        phi,\n        theta\n    }\n}\n\nexport function polarToXYZ(p: PolarCoordinates): Vector3 {\n    let v = new Vector3()\n    v.setFromSphericalCoords(p.r, p.phi, p.theta)\n    return v\n}\n\nexport function limitLength(v: Vector3, minLen: number = 0.0, maxLen: number = 1e10): Vector3 {\n    const currentLen = v.length()\n    if (currentLen === 0.0) {\n        return ZeroVector3.clone()\n    }\n\n    minLen = Math.abs(minLen)\n    maxLen = Math.abs(maxLen)\n\n    if (currentLen > maxLen || currentLen < minLen) {\n        let newV = v.clone()\n        newV.normalize()\n        if (currentLen > maxLen) {\n            newV.multiplyScalar(maxLen)\n        } else {\n            newV.multiplyScalar(minLen)\n        }\n        return newV\n    } else {\n        return v\n    }\n}\n\nexport function vectorFromPositionToDirection(pos: Vector3, dir: Vector3, magnitude: number = 1.0) {\n    let delta = pos.clone()\n    delta.sub(dir)\n    delta.normalize()\n    delta.multiplyScalar(-magnitude)\n    return delta\n}\n\nexport function countObjects(parent: THREE.Object3D) {\n    var numOfMeshes = 0;\n    parent.traverse(function (child) {\n        numOfMeshes++;\n    });\n    return numOfMeshes\n}\n\nexport const textureLoader = new THREE.TextureLoader()\n","import * as THREE from \"three\";\nimport {Mesh, Vector3} from \"three\";\nimport {PhysicalObject} from \"@/helpers/physics\";\nimport {randomGauss, randomPointOnSphere, textureLoader} from \"@/helpers/3d\";\nimport {Config} from \"@/config\";\nimport {RUNE_COLOR} from \"@/helpers/colors\";\n\n\nexport const enum TxState {\n    ToPool,\n    CrossPool,\n    ToWallet,\n    ToCore,\n}\n\nexport class TxObject extends PhysicalObject {\n    public walletAddress = ''\n    public poolName = ''\n    public state: TxState = TxState.ToPool\n    public waiting = false\n    public iterations = 0\n\n    private mesh?: Mesh\n\n    public rotationAxis = randomPointOnSphere(1.0)\n    public rotationSpeed = randomGauss(0.0, Config.Scene.TxObject.RotationSpeedGaussMagnitude)\n\n    private static geoBox: THREE.BoxGeometry = new THREE.BoxGeometry(1, 1, 1)\n\n    private static whiteMaterial: THREE.Material = new THREE.MeshLambertMaterial({\n        color: 0xffffff,\n        reflectivity: 0.1,\n    });\n\n    private static runeMaterial: THREE.Material = new THREE.MeshLambertMaterial({\n        color: RUNE_COLOR,\n        reflectivity: 0.1,\n    });\n\n    scaleFromTx(runeAmount: number): number {\n        const cfg = Config.Scene.TxObject\n        const sc = cfg.ScaleConst * Math.pow(runeAmount, cfg.ScalePower)\n        return Math.max(1.0, sc)\n    }\n\n    constructor(mass: number, runeAmount: number, isRune: boolean) {\n        super(mass);\n\n        const scale = this.scaleFromTx(runeAmount)\n\n        // const mat = isRune ? TxObject.runeMaterial : TxObject.whiteMaterial\n        // this.mesh = new THREE.Mesh(TxObject.geoBox, mat)\n        // this.mesh.scale.setScalar(scale)\n        // this.add(this.mesh)\n\n        const texture = textureLoader.load('textures/glow1.png')\n        const glowMaterial = new THREE.SpriteMaterial(\n            {\n                map: texture,\n                sizeAttenuation: true,\n                color: (isRune ? 0xaaaaaa : RUNE_COLOR),\n                transparent: false,\n                blending: THREE.AdditiveBlending,\n                depthWrite: false,\n            });\n\n        const radius = scale;\n        const obj = new THREE.Sprite(glowMaterial);\n        obj.scale.set(radius, radius, 1.0);\n        this.add(obj); // this centers the glow at the mesh\n    }\n\n    update(dt: number) {\n        super.update(dt);\n        this.iterations++\n        if(this.mesh) {\n            this.mesh.rotateOnAxis(this.rotationAxis, this.rotationSpeed * dt)\n        }\n    }\n}\n","import {limitLength, vectorFromPositionToDirection, ZeroVector3} from \"@/helpers/3d\";\nimport {Object3D, Vector3} from \"three\";\nimport {Config} from \"@/config\";\n\n\nexport class PhysicalObject extends Object3D {\n    public mass = 1.0\n    public force = new Vector3()\n    public velocity = new Vector3()\n    public dissipation = 0.0\n    public enabledPhysics = true\n\n    public maxSpeed = Config.Physics.MaxSpeed\n\n    constructor(mass: number = 1.0) {\n        super();\n        this.mass = mass\n    }\n\n    setVelocityToDirection(dir: Vector3, speed: number) {\n        this.velocity = vectorFromPositionToDirection(this.position, dir, speed)\n    }\n\n    public update(dt: number) {\n        if(!this.enabledPhysics) {\n            return\n        }\n\n        let accel = this.force.clone()\n        accel.multiplyScalar(dt / this.mass)\n        this.velocity.add(accel)\n\n        this.velocity = limitLength(this.velocity, 0.0, this.maxSpeed)\n\n        let shift = this.velocity.clone()\n        shift.multiplyScalar(dt)\n        this.position.add(shift)\n\n        this.velocity.multiplyScalar(1.0 - this.dissipation * dt)\n\n        // console.log(this.obj3d.position)\n\n        if (this.position.length() > Config.Physics.DistanceLimit) {\n            console.log('Mesh has fled far away!')\n            this.position.copy(ZeroVector3)\n        }\n    }\n\n    isCloseToTarget(targetPosition: Vector3, minDistance = Config.Animations.ProximityDistance): boolean {\n        let deltaPosition = targetPosition.clone().sub(this.position!)\n        return deltaPosition.length() < minDistance\n    }\n\n    public static gravityForce(m1: number, pos1: Vector3, m2: number, pos2: Vector3): Vector3 {\n        let dx = pos2.clone().sub(pos1)\n        const r = Math.max(0.01, dx.length())\n        dx.normalize()\n        const mag =\n            Config.Physics.Gravity.Constant * m1 * m2 / (Math.pow(r, 2)) +\n            Config.Physics.Gravity.LongDistConstant * Math.pow(r, 1.6)\n\n        return dx.multiplyScalar(mag)\n    }\n\n    public myGravityTo(mass: number, position: Vector3) {\n        return PhysicalObject.gravityForce(this.mass, this.position, mass, position)\n    }\n\n    public static logForce(m1: number, pos1: Vector3, m2: number, pos2: Vector3, cutDistance: 100.0): Vector3 {\n        let dx = pos2.clone().sub(pos1)\n        const r = Math.max(0.01, dx.length())\n        dx.normalize()\n        const f = Math.log10\n        const mult = 10000 * f(r) + f(cutDistance) + f(m1) + f(m2)\n        return dx.multiplyScalar(mult)\n    }\n\n    public myLogForceTo(mass: number, position: Vector3, cutDistance: 100.0) {\n        return PhysicalObject.logForce(this.mass, this.position, mass, position, cutDistance)\n    }\n\n    public repelFrom(mass: number, position: Vector3, repelConst: number = 1e-6): Vector3 {\n        let dx = this.position.clone().sub(position)\n        dx.normalize()\n        const mag = Math.pow(dx.length(), 2) * repelConst\n        dx.multiplyScalar(mag)\n        return dx\n    }\n}\n","import {hashedParameterFloat, hashedParameterFloat01} from \"@/helpers/data_utils\";\nimport {Color} from \"three\";\n\nexport const RUNE_COLOR = 0x28f4af\nexport const RUNE_COLOR_GRAD_1 = 0x31fd9c\nexport const RUNE_COLOR_GRAD_2 = 0x01cefd\n\nexport function hashedColorHue(input: string, path: string, saturation: number = 1.0, luminance: number = 0.5) {\n    const color = new Color(0, 0, 0)\n    color.setHSL(hashedParameterFloat01(input, path), saturation, luminance)\n    return color\n}\n\nexport function hashedColorHueSaturation(input: string, path: string, luminance: number = 0.5) {\n    const color = new Color(0, 0, 0)\n    color.setHSL(\n        hashedParameterFloat01(input, path + 'hue'),\n        hashedParameterFloat01(input, path + 'saturation'),\n        luminance)\n    return color\n}\n\nexport function hashedColorBright(input: string, path: string) {\n    const color = new Color(0, 0, 0)\n    color.setHSL(\n        hashedParameterFloat01(input, path + 'hue'),\n        hashedParameterFloat(input, path + 'saturation', 0.8, 1.0),\n        hashedParameterFloat(input, path + 'luminance', 0.5, 0.9)\n    )\n    return color\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Midgard Public API\n * The Midgard Public API queries THORChain and any chains linked via the Bifröst and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.\n *\n * The version of the OpenAPI document: 2.0.0-alpha.3\n * Contact: devs@thorchain.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * action details among with related transactions\n * @export\n * @interface Action\n */\nexport interface Action {\n    /**\n     * Int64, Unix timestamp for when the action was registered\n     * @type {string}\n     * @memberof Action\n     */\n    date: string;\n    /**\n     * Int64, block height at which the action was registered\n     * @type {string}\n     * @memberof Action\n     */\n    height: string;\n    /**\n     * Inbound transactions related to the action\n     * @type {Array<Transaction>}\n     * @memberof Action\n     */\n    _in: Array<Transaction>;\n    ['in']?: Array<Transaction>;\n    /**\n     * \n     * @type {Metadata}\n     * @memberof Action\n     */\n    metadata: Metadata;\n    /**\n     * Outbound transactions related to the action\n     * @type {Array<Transaction>}\n     * @memberof Action\n     */\n    out: Array<Transaction>;\n    /**\n     * Pools involved in the action\n     * @type {Array<string>}\n     * @memberof Action\n     */\n    pools: Array<string>;\n    /**\n     * Indicates if the action is completed or if related outbound transactions are still pending.\n     * @type {string}\n     * @memberof Action\n     */\n    status: ActionStatusEnum;\n    /**\n     * Type of action\n     * @type {string}\n     * @memberof Action\n     */\n    type: ActionTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ActionStatusEnum {\n    Success = 'success',\n    Pending = 'pending'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ActionTypeEnum {\n    Swap = 'swap',\n    AddLiquidity = 'addLiquidity',\n    Withdraw = 'withdraw',\n    Donate = 'donate',\n    Refund = 'refund',\n    Switch = 'switch'  // trx1 added\n}\n\n/**\n * \n * @export\n * @interface AddLiquidityMetadata\n */\nexport interface AddLiquidityMetadata {\n    /**\n     * Int64, amount of liquidity units assigned to the member as result of the liquidity deposit\n     * @type {string}\n     * @memberof AddLiquidityMetadata\n     */\n    liquidityUnits: string;\n}\n/**\n * \n * @export\n * @interface BlockRewards\n */\nexport interface BlockRewards {\n    /**\n     * \n     * @type {string}\n     * @memberof BlockRewards\n     */\n    blockReward: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BlockRewards\n     */\n    bondReward: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BlockRewards\n     */\n    poolReward: string;\n}\n/**\n * \n * @export\n * @interface BondMetrics\n */\nexport interface BondMetrics {\n    /**\n     * Int64(e8), Average bond of active nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    averageActiveBond: string;\n    /**\n     * Int64(e8), Average bond of standby nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    averageStandbyBond: string;\n    /**\n     * Int64(e8), Maxinum bond of active nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    maximumActiveBond: string;\n    /**\n     * Int64(e8), Maximum bond of standby nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    maximumStandbyBond: string;\n    /**\n     * Int64(e8), Median bond of active nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    medianActiveBond: string;\n    /**\n     * Int64(e8), Median bond of standby nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    medianStandbyBond: string;\n    /**\n     * Int64(e8), Minumum bond of active nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    minimumActiveBond: string;\n    /**\n     * Int64(e8), Minumum bond of standby nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    minimumStandbyBond: string;\n    /**\n     * Int64(e8), Total bond of active nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    totalActiveBond: string;\n    /**\n     * Int64(e8), Total bond of standby nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    totalStandbyBond: string;\n}\n/**\n * \n * @export\n * @interface BoolConstants\n */\nexport interface BoolConstants {\n    /**\n     * \n     * @type {boolean}\n     * @memberof BoolConstants\n     */\n    StrictBondLiquidityRatio: boolean;\n}\n/**\n * Represents a digital currency amount\n * @export\n * @interface Coin\n */\nexport interface Coin {\n    /**\n     * Int64 (10^8), asset Amount.\n     * @type {string}\n     * @memberof Coin\n     */\n    amount: string;\n    /**\n     * Asset in CHAIN.SYMBOL format\n     * @type {string}\n     * @memberof Coin\n     */\n    asset: string;\n}\n/**\n * \n * @export\n * @interface Constants\n */\nexport interface Constants {\n    /**\n     * \n     * @type {BoolConstants}\n     * @memberof Constants\n     */\n    bool_values: BoolConstants;\n    /**\n     * \n     * @type {Int64Constants}\n     * @memberof Constants\n     */\n    int_64_values: Int64Constants;\n    /**\n     * \n     * @type {StringConstants}\n     * @memberof Constants\n     */\n    string_values: StringConstants;\n}\n/**\n * \n * @export\n * @interface DepthHistory\n */\nexport interface DepthHistory {\n    /**\n     * \n     * @type {Array<DepthHistoryItem>}\n     * @memberof DepthHistory\n     */\n    intervals: Array<DepthHistoryItem>;\n    /**\n     * \n     * @type {DepthHistoryMeta}\n     * @memberof DepthHistory\n     */\n    meta: DepthHistoryMeta;\n}\n/**\n * \n * @export\n * @interface DepthHistoryItem\n */\nexport interface DepthHistoryItem {\n    /**\n     * Int64(e8), the amount of Asset in the pool at the end of the interval\n     * @type {string}\n     * @memberof DepthHistoryItem\n     */\n    assetDepth: string;\n    /**\n     * Float, price of asset in rune. I.e. rune amount / asset amount\n     * @type {string}\n     * @memberof DepthHistoryItem\n     */\n    assetPrice: string;\n    /**\n     * Float, the price of asset in USD (based on the deepest USD pool).\n     * @type {string}\n     * @memberof DepthHistoryItem\n     */\n    assetPriceUSD: string;\n    /**\n     * Int64, The end time of bucket in unix timestamp\n     * @type {string}\n     * @memberof DepthHistoryItem\n     */\n    endTime: string;\n    /**\n     * Int64, Liquidity Units in the pool at the end of the interval\n     * @type {string}\n     * @memberof DepthHistoryItem\n     */\n    liquidityUnits: string;\n    /**\n     * Int64(e8), the amount of Rune in the pool at the end of the interval\n     * @type {string}\n     * @memberof DepthHistoryItem\n     */\n    runeDepth: string;\n    /**\n     * Int64, The beginning time of bucket in unix timestamp\n     * @type {string}\n     * @memberof DepthHistoryItem\n     */\n    startTime: string;\n}\n/**\n * \n * @export\n * @interface DepthHistoryMeta\n */\nexport interface DepthHistoryMeta {\n    /**\n     * Int64, The end time of bucket in unix timestamp\n     * @type {string}\n     * @memberof DepthHistoryMeta\n     */\n    endTime: string;\n    /**\n     * Int64, The beginning time of bucket in unix timestamp\n     * @type {string}\n     * @memberof DepthHistoryMeta\n     */\n    startTime: string;\n}\n/**\n * \n * @export\n * @interface EarningsHistory\n */\nexport interface EarningsHistory {\n    /**\n     * \n     * @type {Array<EarningsHistoryItem>}\n     * @memberof EarningsHistory\n     */\n    intervals: Array<EarningsHistoryItem>;\n    /**\n     * \n     * @type {EarningsHistoryItem}\n     * @memberof EarningsHistory\n     */\n    meta: EarningsHistoryItem;\n}\n/**\n * \n * @export\n * @interface EarningsHistoryItem\n */\nexport interface EarningsHistoryItem {\n    /**\n     * float64, Average amount of active nodes during the time interval\n     * @type {string}\n     * @memberof EarningsHistoryItem\n     */\n    avgNodeCount: string;\n    /**\n     * Int64(e8), Total block rewards emitted during the time interval\n     * @type {string}\n     * @memberof EarningsHistoryItem\n     */\n    blockRewards: string;\n    /**\n     * Int64(e8), Share of earnings sent to nodes during the time interval\n     * @type {string}\n     * @memberof EarningsHistoryItem\n     */\n    bondingEarnings: string;\n    /**\n     * Int64(e8), System income generated during the time interval. It is the sum of liquidity fees and block rewards\n     * @type {string}\n     * @memberof EarningsHistoryItem\n     */\n    earnings: string;\n    /**\n     * Int64, The end time of interval in unix timestamp\n     * @type {string}\n     * @memberof EarningsHistoryItem\n     */\n    endTime: string;\n    /**\n     * Int64(e8), Share of earnings sent to pools during the time interval\n     * @type {string}\n     * @memberof EarningsHistoryItem\n     */\n    liquidityEarnings: string;\n    /**\n     * Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval\n     * @type {string}\n     * @memberof EarningsHistoryItem\n     */\n    liquidityFees: string;\n    /**\n     * Earnings data for each pool for the time interval\n     * @type {Array<EarningsHistoryItemPool>}\n     * @memberof EarningsHistoryItem\n     */\n    pools: Array<EarningsHistoryItemPool>;\n    /**\n     * Int64, The beginning time of interval in unix timestamp\n     * @type {string}\n     * @memberof EarningsHistoryItem\n     */\n    startTime: string;\n}\n/**\n * pool earnings data during the time interval\n * @export\n * @interface EarningsHistoryItemPool\n */\nexport interface EarningsHistoryItemPool {\n    /**\n     * Int64 (10^8), liquidity fees collected in the pool\\'s asset\n     * @type {string}\n     * @memberof EarningsHistoryItemPool\n     */\n    assetLiquidityFees: string;\n    /**\n     * Int64 (10^8), total earnings in RUNE (totalLiquidityFees + rewards)\n     * @type {string}\n     * @memberof EarningsHistoryItemPool\n     */\n    earnings: string;\n    /**\n     * asset for the given pool\n     * @type {string}\n     * @memberof EarningsHistoryItemPool\n     */\n    pool: string;\n    /**\n     * Int64 (10^8), RUNE amount sent to (positive) or taken from (negative) the pool as a result of balancing it\\'s share of system income each block \n     * @type {string}\n     * @memberof EarningsHistoryItemPool\n     */\n    rewards: string;\n    /**\n     * Int64 (10^8), liquidity fees collected in RUNE\n     * @type {string}\n     * @memberof EarningsHistoryItemPool\n     */\n    runeLiquidityFees: string;\n    /**\n     * Int64 (10^8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE\n     * @type {string}\n     * @memberof EarningsHistoryItemPool\n     */\n    totalLiquidityFeesRune: string;\n}\n/**\n * \n * @export\n * @interface Health\n */\nexport interface Health {\n    /**\n     * True means healthy, connected to database\n     * @type {boolean}\n     * @memberof Health\n     */\n    database: boolean;\n    /**\n     * True means healthy. False means Midgard is still catching up to the chain\n     * @type {boolean}\n     * @memberof Health\n     */\n    inSync: boolean;\n    /**\n     * Int64, the current block count\n     * @type {string}\n     * @memberof Health\n     */\n    scannerHeight: string;\n}\n/**\n * \n * @export\n * @interface InboundAddressesItem\n */\nexport interface InboundAddressesItem {\n    /**\n     * \n     * @type {string}\n     * @memberof InboundAddressesItem\n     */\n    address: string;\n    /**\n     * \n     * @type {string}\n     * @memberof InboundAddressesItem\n     */\n    chain: string;\n    /**\n     * \n     * @type {string}\n     * @memberof InboundAddressesItem\n     */\n    gas_rate?: string;\n    /**\n     * indicate whether this chain has halted\n     * @type {boolean}\n     * @memberof InboundAddressesItem\n     */\n    halted: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof InboundAddressesItem\n     */\n    pub_key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof InboundAddressesItem\n     */\n    router?: string;\n}\n/**\n * \n * @export\n * @interface InlineResponse200\n */\nexport interface InlineResponse200 {\n    /**\n     * \n     * @type {Array<Action>}\n     * @memberof InlineResponse200\n     */\n    actions: Array<Action>;\n    /**\n     * Int64, number of results matching the given filters.\n     * @type {string}\n     * @memberof InlineResponse200\n     */\n    count: string;\n}\n/**\n * \n * @export\n * @interface Int64Constants\n */\nexport interface Int64Constants {\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    AsgardSize: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    BadValidatorRate: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    BlocksPerYear: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    ChurnInterval: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    ChurnRetryInterval: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    CliTxCost: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    DesiredValidatorSet: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    DoubleSignMaxAge: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    EmissionCurve: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    FailKeygenSlashPoints: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    FailKeysignSlashPoints: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    FundMigrationInterval: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    JailTimeKeygen: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    JailTimeKeysign: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    LackOfObservationPenalty: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    LiquidityLockUpBlocks: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    MinimumBondInRune: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    MinimumNodesForBFT: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    MinimumNodesForYggdrasil: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    NativeChainGasFee: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    NewPoolCycle: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    ObservationDelayFlexibility: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    ObserveSlashPoints: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    OldValidatorRate: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    OutboundTransactionFee: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    SigningTransactionPeriod: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Int64Constants\n     */\n    YggFundLimit: number;\n}\n/**\n * \n * @export\n * @interface Lastblock\n */\nexport interface Lastblock {\n    /**\n     * \n     * @type {Array<LastblockItem>}\n     * @memberof Lastblock\n     */\n    current: Array<LastblockItem>;\n}\n/**\n * \n * @export\n * @interface LastblockItem\n */\nexport interface LastblockItem {\n    /**\n     * \n     * @type {string}\n     * @memberof LastblockItem\n     */\n    chain: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LastblockItem\n     */\n    last_observed_in: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LastblockItem\n     */\n    last_signed_out: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LastblockItem\n     */\n    thorchain: string;\n}\n/**\n * \n * @export\n * @interface LiquidityHistory\n */\nexport interface LiquidityHistory {\n    /**\n     * \n     * @type {Array<LiquidityHistoryItem>}\n     * @memberof LiquidityHistory\n     */\n    intervals: Array<LiquidityHistoryItem>;\n    /**\n     * \n     * @type {LiquidityHistoryItem}\n     * @memberof LiquidityHistory\n     */\n    meta: LiquidityHistoryItem;\n}\n/**\n * \n * @export\n * @interface LiquidityHistoryItem\n */\nexport interface LiquidityHistoryItem {\n    /**\n     * Int64(e8), total assets deposited during the time interval. Denoted in Rune using the price at deposit time. \n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    addAssetLiquidityVolume: string;\n    /**\n     * Int64, number of deposits during the time interval. \n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    addLiquidityCount: string;\n    /**\n     * Int64(e8), total of rune and asset deposits. Denoted in Rune (using the price at deposit time). \n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    addLiquidityVolume: string;\n    /**\n     * Int64(e8), total Rune deposited during the time interval. \n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    addRuneLiquidityVolume: string;\n    /**\n     * Int64, The end time of bucket in unix timestamp\n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    endTime: string;\n    /**\n     * Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval\n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    net: string;\n    /**\n     * Int64, The beginning time of bucket in unix timestamp\n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    startTime: string;\n    /**\n     * Int64 (10^8), total assets withdrawn during the time interval. Denoted in Rune using the price at withdraw time. \n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    withdrawAssetVolume: string;\n    /**\n     * Int64, number of withdraw during the time interval. \n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    withdrawCount: string;\n    /**\n     * Int64 (10^8), total Rune withdrawn during the time interval. \n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    withdrawRuneVolume: string;\n    /**\n     * Int64 (10^8), total of rune and asset withdrawals. Denoted in Rune (using the price at withdraw time). \n     * @type {string}\n     * @memberof LiquidityHistoryItem\n     */\n    withdrawVolume: string;\n}\n/**\n * \n * @export\n * @interface MemberDetails\n */\nexport interface MemberDetails {\n    /**\n     * List details of all the liquidity providers identified with the given address\n     * @type {Array<MemberPool>}\n     * @memberof MemberDetails\n     */\n    pools: Array<MemberPool>;\n}\n/**\n * \n * @export\n * @interface MemberPool\n */\nexport interface MemberPool {\n    /**\n     * Int64(e8), total asset added to the pool by member\n     * @type {string}\n     * @memberof MemberPool\n     */\n    assetAdded: string;\n    /**\n     * asset address used by the member\n     * @type {string}\n     * @memberof MemberPool\n     */\n    assetAddress: string;\n    /**\n     * Int64(e8), total asset withdrawn from the pool by member\n     * @type {string}\n     * @memberof MemberPool\n     */\n    assetWithdrawn: string;\n    /**\n     * Int64, Unix timestamp for the first time member deposited into the pool\n     * @type {string}\n     * @memberof MemberPool\n     */\n    dateFirstAdded: string;\n    /**\n     * Int64, Unix timestamp for the last time member deposited into the pool\n     * @type {string}\n     * @memberof MemberPool\n     */\n    dateLastAdded: string;\n    /**\n     * Int64, pool liquidity units that belong the the member\n     * @type {string}\n     * @memberof MemberPool\n     */\n    liquidityUnits: string;\n    /**\n     * Pool rest of the data refers to\n     * @type {string}\n     * @memberof MemberPool\n     */\n    pool: string;\n    /**\n     * Int64(e8), total RUNE added to the pool by member\n     * @type {string}\n     * @memberof MemberPool\n     */\n    runeAdded: string;\n    /**\n     * rune address used by the member\n     * @type {string}\n     * @memberof MemberPool\n     */\n    runeAddress: string;\n    /**\n     * Int64(e8), total RUNE withdrawn from the pool by member\n     * @type {string}\n     * @memberof MemberPool\n     */\n    runeWithdrawn: string;\n}\n/**\n * \n * @export\n * @interface Metadata\n */\nexport interface Metadata {\n    /**\n     * \n     * @type {AddLiquidityMetadata}\n     * @memberof Metadata\n     */\n    addLiquidity?: AddLiquidityMetadata;\n    /**\n     * \n     * @type {RefundMetadata}\n     * @memberof Metadata\n     */\n    refund?: RefundMetadata;\n    /**\n     * \n     * @type {SwapMetadata}\n     * @memberof Metadata\n     */\n    swap?: SwapMetadata;\n    /**\n     * \n     * @type {WithdrawMetadata}\n     * @memberof Metadata\n     */\n    withdraw?: WithdrawMetadata;\n}\n/**\n * \n * @export\n * @interface Network\n */\nexport interface Network {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Network\n     */\n    activeBonds: Array<string>;\n    /**\n     * Int64, Number of Active Nodes\n     * @type {string}\n     * @memberof Network\n     */\n    activeNodeCount: string;\n    /**\n     * \n     * @type {BlockRewards}\n     * @memberof Network\n     */\n    blockRewards: BlockRewards;\n    /**\n     * \n     * @type {BondMetrics}\n     * @memberof Network\n     */\n    bondMetrics: BondMetrics;\n    /**\n     * Float, (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1\n     * @type {string}\n     * @memberof Network\n     */\n    bondingAPY: string;\n    /**\n     * Float, (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1\n     * @type {string}\n     * @memberof Network\n     */\n    liquidityAPY: string;\n    /**\n     * Int64, next height of blocks\n     * @type {string}\n     * @memberof Network\n     */\n    nextChurnHeight: string;\n    /**\n     * Int64, the remaining time of pool activation (in blocks)\n     * @type {string}\n     * @memberof Network\n     */\n    poolActivationCountdown: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Network\n     */\n    poolShareFactor: string;\n    /**\n     * Array of Standby Bonds\n     * @type {Array<string>}\n     * @memberof Network\n     */\n    standbyBonds: Array<string>;\n    /**\n     * Int64, Number of Standby Nodes\n     * @type {string}\n     * @memberof Network\n     */\n    standbyNodeCount: string;\n    /**\n     * Int64(e8), Total Rune pooled in all pools\n     * @type {string}\n     * @memberof Network\n     */\n    totalPooledRune: string;\n    /**\n     * Int64(e8), Total left in Reserve\n     * @type {string}\n     * @memberof Network\n     */\n    totalReserve: string;\n}\n/**\n * \n * @export\n * @interface Node\n */\nexport interface Node {\n    /**\n     * ed25519 public key\n     * @type {string}\n     * @memberof Node\n     */\n    ed25519: string;\n    /**\n     * node thorchain address\n     * @type {string}\n     * @memberof Node\n     */\n    nodeAddress: string;\n    /**\n     * secp256k1 public key\n     * @type {string}\n     * @memberof Node\n     */\n    secp256k1: string;\n}\n/**\n * \n * @export\n * @interface ObservedChain\n */\nexport interface ObservedChain {\n    /**\n     * \n     * @type {string}\n     * @memberof ObservedChain\n     */\n    chain: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ObservedChain\n     */\n    height: number;\n}\n/**\n * \n * @export\n * @interface PoolDetail\n */\nexport interface PoolDetail {\n    /**\n     * \n     * @type {string}\n     * @memberof PoolDetail\n     */\n    asset: string;\n    /**\n     * Int64(e8), the amount of Asset in the pool.\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    assetDepth: string;\n    /**\n     * Float, price of asset in rune. I.e. rune amount / asset amount.\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    assetPrice: string;\n    /**\n     * Float, the price of asset in USD (based on the deepest USD pool).\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    assetPriceUSD: string;\n    /**\n     * Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolAPY: string;\n    /**\n     * Int64(e8), the amount of Rune in the pool.\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    runeDepth: string;\n    /**\n     * The state of the pool, e.g. Available, Staged.\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    status: string;\n    /**\n     * Int64, Liquidity Units in the pool.\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    units: string;\n    /**\n     * Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    volume24h: string;\n}\n/**\n * \n * @export\n * @interface PoolLegacyDetail\n */\nexport interface PoolLegacyDetail {\n    /**\n     * \n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    asset: string;\n    /**\n     * same as assetDepth from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    assetDepth: string;\n    /**\n     * same as addAssetLiquidityVolume from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    assetStakedTotal: string;\n    /**\n     * same as toAssetCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    buyAssetCount: string;\n    /**\n     * same as toAssetFees / toAssetCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    buyFeeAverage: string;\n    /**\n     * same as toAssetFees from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    buyFeesTotal: string;\n    /**\n     * same as toAssetAverageSlip from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    buySlipAverage: string;\n    /**\n     * same as toAssetVolume / toAssetCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    buyTxAverage: string;\n    /**\n     * same as toAssetVolume from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    buyVolume: string;\n    /**\n     * Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    poolAPY: string;\n    /**\n     * same as 2*runeDepth from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    poolDepth: string;\n    /**\n     * same as totalFees / swapCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    poolFeeAverage: string;\n    /**\n     * same as totalFees from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    poolFeesTotal: string;\n    /**\n     * same as averageSlip from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    poolSlipAverage: string;\n    /**\n     * same as addLiquidityVolume from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    poolStakedTotal: string;\n    /**\n     * same as swapVolume / swapCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    poolTxAverage: string;\n    /**\n     * same as units from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    poolUnits: string;\n    /**\n     * Int64(e8), same as buyVolume + sellVolume\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    poolVolume: string;\n    /**\n     * same as assetPrice from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    price: string;\n    /**\n     * same as runeDepth from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    runeDepth: string;\n    /**\n     * same as addRuneLiquidityVolume from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    runeStakedTotal: string;\n    /**\n     * same as toRuneCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    sellAssetCount: string;\n    /**\n     * same as toRuneFees / toRuneCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    sellFeeAverage: string;\n    /**\n     * same as toRuneFees from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    sellFeesTotal: string;\n    /**\n     * same as toRuneAverageSlip from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    sellSlipAverage: string;\n    /**\n     * same as toRuneVolume / toRuneCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    sellTxAverage: string;\n    /**\n     * same as toRuneVolume from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    sellVolume: string;\n    /**\n     * same as addLiquidityCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    stakeTxCount: string;\n    /**\n     * same as uniqueMemberCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    stakersCount: string;\n    /**\n     * same as addLiquidityCount + withdrawCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    stakingTxCount: string;\n    /**\n     * same as status from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    status: string;\n    /**\n     * Int64, same as history/swaps:uniqueSwapperCount\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    swappersCount: string;\n    /**\n     * Int64, same as history/swaps:totalCount\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    swappingTxCount: string;\n    /**\n     * Int64(e8), same as swapVolume pool/stats?period=24h\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    volume24h: string;\n    /**\n     * same as withdrawCount from pool/stats\n     * @type {string}\n     * @memberof PoolLegacyDetail\n     */\n    withdrawTxCount: string;\n}\n/**\n * \n * @export\n * @interface PoolStatsDetail\n */\nexport interface PoolStatsDetail {\n    /**\n     * Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    addAssetLiquidityVolume: string;\n    /**\n     * Int64, same as history/liquidity_changes:addLiquidityCount\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    addLiquidityCount: string;\n    /**\n     * Int64(e8), same as history/liquidity_changes:addLiquidityVolume\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    addLiquidityVolume: string;\n    /**\n     * Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    addRuneLiquidityVolume: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    asset: string;\n    /**\n     * Int64(e8), the amount of Asset in the pool\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    assetDepth: string;\n    /**\n     * Float, price of asset in rune. I.e. rune amount / asset amount\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    assetPrice: string;\n    /**\n     * Float, the price of asset in USD (based on the deepest USD pool).\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    assetPriceUSD: string;\n    /**\n     * Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    averageSlip: string;\n    /**\n     * Float, Average Percentage Yield: annual return estimated using last weeks income, taking compound interest into account.\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    poolAPY: string;\n    /**\n     * Int64(e8), the amount of Rune in the pool\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    runeDepth: string;\n    /**\n     * The state of the pool, e.g. Available, Staged\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    status: string;\n    /**\n     * Int64, same as history/swaps:totalCount\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    swapCount: string;\n    /**\n     * Int64(e8), same as history/swaps:totalVolume\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    swapVolume: string;\n    /**\n     * Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toAssetAverageSlip\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    toAssetAverageSlip: string;\n    /**\n     * Int64, same as history/swaps:toAssetCount\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    toAssetCount: string;\n    /**\n     * Int64(e8), same as history/swaps:toAssetFees\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    toAssetFees: string;\n    /**\n     * Int64(e8), same as history/swaps:toAssetVolume\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    toAssetVolume: string;\n    /**\n     * Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:toRuneAverageSlip\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    toRuneAverageSlip: string;\n    /**\n     * Int64, same as history/swaps:toRuneCount\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    toRuneCount: string;\n    /**\n     * Int64(e8), same as history/swaps:toRuneFees\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    toRuneFees: string;\n    /**\n     * Int64(e8), same as history/swaps:toRuneVolume\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    toRuneVolume: string;\n    /**\n     * Int64(e8), same as history/swaps:totalFees\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    totalFees: string;\n    /**\n     * Int64, same as len(history/members?pool=POOL)\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    uniqueMemberCount: string;\n    /**\n     * Int64, number of unique adresses that initiated swaps transactions in the period. \n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    uniqueSwapperCount: string;\n    /**\n     * Int64, Liquidity Units in the pool\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    units: string;\n    /**\n     * Int64(e8), same as history/liquidity_changes:withdrawAssetVolume\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    withdrawAssetVolume: string;\n    /**\n     * Int64, same as history/liquidity_changes:withdrawCount\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    withdrawCount: string;\n    /**\n     * Int64(e8), same as history/liquidity_changes:withdrawRuneVolume\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    withdrawRuneVolume: string;\n    /**\n     * Int64(e8), same as history/liquidity_changes:withdrawVolume\n     * @type {string}\n     * @memberof PoolStatsDetail\n     */\n    withdrawVolume: string;\n}\n/**\n * \n * @export\n * @interface PreflightStatus\n */\nexport interface PreflightStatus {\n    /**\n     * \n     * @type {number}\n     * @memberof PreflightStatus\n     */\n    code: number;\n    /**\n     * \n     * @type {string}\n     * @memberof PreflightStatus\n     */\n    reason: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PreflightStatus\n     */\n    status: string;\n}\n/**\n * \n * @export\n * @interface ProxiedNode\n */\nexport interface ProxiedNode {\n    /**\n     * \n     * @type {number}\n     * @memberof ProxiedNode\n     */\n    active_block_height: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNode\n     */\n    bond: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNode\n     */\n    bond_address: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNode\n     */\n    current_award: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ProxiedNode\n     */\n    forced_to_leave: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNode\n     */\n    ip_address: string;\n    /**\n     * \n     * @type {ProxiedNodeJail}\n     * @memberof ProxiedNode\n     */\n    jail: ProxiedNodeJail;\n    /**\n     * \n     * @type {number}\n     * @memberof ProxiedNode\n     */\n    leave_height: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNode\n     */\n    node_address: string;\n    /**\n     * \n     * @type {Array<ObservedChain>}\n     * @memberof ProxiedNode\n     */\n    observe_chains: Array<ObservedChain>;\n    /**\n     * \n     * @type {PreflightStatus}\n     * @memberof ProxiedNode\n     */\n    preflight_status: PreflightStatus;\n    /**\n     * \n     * @type {ProxiedNodePubKeySet}\n     * @memberof ProxiedNode\n     */\n    pub_key_set: ProxiedNodePubKeySet;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ProxiedNode\n     */\n    requested_to_leave: boolean;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ProxiedNode\n     */\n    signer_membership: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof ProxiedNode\n     */\n    slash_points: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNode\n     */\n    status: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ProxiedNode\n     */\n    status_since: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNode\n     */\n    validator_cons_pub_key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNode\n     */\n    version: string;\n}\n/**\n * \n * @export\n * @interface ProxiedNodeJail\n */\nexport interface ProxiedNodeJail {\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNodeJail\n     */\n    node_address?: string;\n}\n/**\n * \n * @export\n * @interface ProxiedNodePubKeySet\n */\nexport interface ProxiedNodePubKeySet {\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNodePubKeySet\n     */\n    ed25519: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProxiedNodePubKeySet\n     */\n    secp256k1: string;\n}\n/**\n * \n * @export\n * @interface Queue\n */\nexport interface Queue {\n    /**\n     * \n     * @type {number}\n     * @memberof Queue\n     */\n    internal: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Queue\n     */\n    outbound: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Queue\n     */\n    swap: number;\n}\n/**\n * \n * @export\n * @interface RefundMetadata\n */\nexport interface RefundMetadata {\n    /**\n     * List of network fees associated to an action. One network fee is charged for each outbound transaction\n     * @type {Array<Coin>}\n     * @memberof RefundMetadata\n     */\n    networkFees: Array<Coin>;\n    /**\n     * Reason for the refund\n     * @type {string}\n     * @memberof RefundMetadata\n     */\n    reason: string;\n}\n/**\n * \n * @export\n * @interface StatsData\n */\nexport interface StatsData {\n    /**\n     * Int64, number of deposits since beginning.\n     * @type {string}\n     * @memberof StatsData\n     */\n    addLiquidityCount: string;\n    /**\n     * Int64 (10^8), total of deposits since beginning. \n     * @type {string}\n     * @memberof StatsData\n     */\n    addLiquidityVolume: string;\n    /**\n     * Int64, unique users (addresses) initiating swaps in the last 24 hours.\n     * @type {string}\n     * @memberof StatsData\n     */\n    dailyActiveUsers: string;\n    /**\n     * Int64, unique users (addresses) initiating swaps in the last 30 days.\n     * @type {string}\n     * @memberof StatsData\n     */\n    monthlyActiveUsers: string;\n    /**\n     * Int64 (10^8), current total Rune in the pools.\n     * @type {string}\n     * @memberof StatsData\n     */\n    runeDepth: string;\n    /**\n     * Float, the price of Rune based on the deepest USD pool.\n     * @type {string}\n     * @memberof StatsData\n     */\n    runePriceUSD: string;\n    /**\n     * Int64, number of swaps since beginning.\n     * @type {string}\n     * @memberof StatsData\n     */\n    swapCount: string;\n    /**\n     * Int64(e8), number of swaps in the last 24h.\n     * @type {string}\n     * @memberof StatsData\n     */\n    swapCount24h: string;\n    /**\n     * Int64, number of swaps in the last 30d.\n     * @type {string}\n     * @memberof StatsData\n     */\n    swapCount30d: string;\n    /**\n     * Int64(e8), total volume of swaps denoted in Rune since beginning.\n     * @type {string}\n     * @memberof StatsData\n     */\n    swapVolume: string;\n    /**\n     * Int64, number of swaps from Rune to Asset since beginning.\n     * @type {string}\n     * @memberof StatsData\n     */\n    toAssetCount: string;\n    /**\n     * Int64, number of swaps from Asset to Rune since beginning.\n     * @type {string}\n     * @memberof StatsData\n     */\n    toRuneCount: string;\n    /**\n     * Int64, unique users (addresses) initiating swaps since beginning.\n     * @type {string}\n     * @memberof StatsData\n     */\n    uniqueSwapperCount: string;\n    /**\n     * Int64, number of withdraws since beginning.\n     * @type {string}\n     * @memberof StatsData\n     */\n    withdrawCount: string;\n    /**\n     * Int64 (10^8), total of withdraws since beginning. \n     * @type {string}\n     * @memberof StatsData\n     */\n    withdrawVolume: string;\n}\n/**\n * \n * @export\n * @interface StringConstants\n */\nexport interface StringConstants {\n    /**\n     * \n     * @type {string}\n     * @memberof StringConstants\n     */\n    DefaultPoolStatus: string;\n}\n/**\n * \n * @export\n * @interface SwapHistory\n */\nexport interface SwapHistory {\n    /**\n     * \n     * @type {Array<SwapHistoryItem>}\n     * @memberof SwapHistory\n     */\n    intervals: Array<SwapHistoryItem>;\n    /**\n     * \n     * @type {SwapHistoryItem}\n     * @memberof SwapHistory\n     */\n    meta: SwapHistoryItem;\n}\n/**\n * \n * @export\n * @interface SwapHistoryItem\n */\nexport interface SwapHistoryItem {\n    /**\n     * Float64 (Basis points, 0-10000, where 10000=100%), the average slip by swap. Big swaps have the same weight as small swaps \n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    averageSlip: string;\n    /**\n     * Int64, The end time of bucket in unix timestamp\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    endTime: string;\n    /**\n     * Int64, The beginning time of bucket in unix timestamp\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    startTime: string;\n    /**\n     * Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to asset. Big swaps have the same weight as small swaps \n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    toAssetAverageSlip: string;\n    /**\n     * Int64, count of swaps from rune to asset\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    toAssetCount: string;\n    /**\n     * Int64(e8), the fees collected from swaps to asset denoted in rune\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    toAssetFees: string;\n    /**\n     * Int64(e8), volume of swaps from rune to asset denoted in rune\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    toAssetVolume: string;\n    /**\n     * Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps to rune. Big swaps have the same weight as small swaps \n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    toRuneAverageSlip: string;\n    /**\n     * Int64, count of swaps from asset to rune\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    toRuneCount: string;\n    /**\n     * Int64(e8), the fees collected from swaps to rune\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    toRuneFees: string;\n    /**\n     * Int64(e8), volume of swaps from asset to rune denoted in rune\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    toRuneVolume: string;\n    /**\n     * Int64, toAssetCount + toRuneCount\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    totalCount: string;\n    /**\n     * Int64(e8), the sum of all fees collected denoted in rune\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    totalFees: string;\n    /**\n     * Int64(e8), toAssetVolume + toRuneVolume (denoted in rune)\n     * @type {string}\n     * @memberof SwapHistoryItem\n     */\n    totalVolume: string;\n}\n/**\n * \n * @export\n * @interface SwapMetadata\n */\nexport interface SwapMetadata {\n    /**\n     * Int64 (10^8), RUNE amount charged as swap liquidity fee\n     * @type {string}\n     * @memberof SwapMetadata\n     */\n    liquidityFee: string;\n    /**\n     * List of network fees associated to an action. One network fee is charged for each outbound transaction\n     * @type {Array<Coin>}\n     * @memberof SwapMetadata\n     */\n    networkFees: Array<Coin>;\n    /**\n     * Int64 (Basis points, 0-10000, where 10000=100%), trade slip percentage\n     * @type {string}\n     * @memberof SwapMetadata\n     */\n    tradeSlip: string;\n    /**\n     * Int64 (10^8), minimum output amount specified for the swap\n     * @type {string}\n     * @memberof SwapMetadata\n     */\n    tradeTarget: string;\n}\n/**\n * Transaction data\n * @export\n * @interface Transaction\n */\nexport interface Transaction {\n    /**\n     * Sender address\n     * @type {string}\n     * @memberof Transaction\n     */\n    address: string;\n    /**\n     * \n     * @type {Array<Coin>}\n     * @memberof Transaction\n     */\n    coins: Array<Coin>;\n    /**\n     * Transaction id hash. Some transactions (such as outbound transactions made in the native asset) may have a zero value.\n     * @type {string}\n     * @memberof Transaction\n     */\n    txID: string;\n}\n/**\n * \n * @export\n * @interface WithdrawMetadata\n */\nexport interface WithdrawMetadata {\n    /**\n     * Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means totally symetrical\n     * @type {string}\n     * @memberof WithdrawMetadata\n     */\n    asymmetry: string;\n    /**\n     * Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership withdrawn\n     * @type {string}\n     * @memberof WithdrawMetadata\n     */\n    basisPoints: string;\n    /**\n     * Int64, amount of liquidity units removed from the member as result of the withdrawal\n     * @type {string}\n     * @memberof WithdrawMetadata\n     */\n    liquidityUnits: string;\n    /**\n     * List of network fees associated to an action. One network fee is charged for each outbound transaction\n     * @type {Array<Coin>}\n     * @memberof WithdrawMetadata\n     */\n    networkFees: Array<Coin>;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * List actions along with their related transactions. An action is generated by one or more inbound transactions with the intended action set in the transaction memo. The action may result in one or more outbound transactions. Results are paginated by sets of 50. Filters may be applied to query actions. \n         * @summary Actions List\n         * @param {number} limit pagination limit\n         * @param {number} offset pagination offset\n         * @param {string} [address] Comma separated list. Address of sender or recipient of any in/out transaction related to the action. \n         * @param {string} [txid] ID of any in/out tx related to the action\n         * @param {string} [asset] Any asset that is part of the action (CHAIN.SYMBOL)\n         * @param {string} [type] One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getActions: async (limit: number, offset: number, address?: string, txid?: string, asset?: string, type?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'limit' is not null or undefined\n            assertParamExists('getActions', 'limit', limit)\n            // verify required parameter 'offset' is not null or undefined\n            assertParamExists('getActions', 'offset', offset)\n            const localVarPath = `/v2/actions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (address !== undefined) {\n                localVarQueryParameter['address'] = address;\n            }\n\n            if (txid !== undefined) {\n                localVarQueryParameter['txid'] = txid;\n            }\n\n            if (asset !== undefined) {\n                localVarQueryParameter['asset'] = asset;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the asset and rune depths and price. The values report the state at the end of each interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Depth and Price History\n         * @param {string} pool Return stats for this single pool.\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400].\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDepthHistory: async (pool: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pool' is not null or undefined\n            assertParamExists('getDepthHistory', 'pool', pool)\n            const localVarPath = `/v2/history/depths/{pool}`\n                .replace(`{${\"pool\"}}`, encodeURIComponent(String(pool)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (count !== undefined) {\n                localVarQueryParameter['count'] = count;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = to;\n            }\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = from;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns earnings data for the specified interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Earnings History\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400].\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEarningsHistory: async (interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/history/earnings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (count !== undefined) {\n                localVarQueryParameter['count'] = count;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = to;\n            }\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = from;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an object containing the health response of the API\n         * @summary Health Info\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getHealth: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/health`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns withdrawals and deposits for given time interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Liquidity Changes History\n         * @param {string} [pool] Return stats for given pool. Returns sum of all pools if missing\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400]\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getLiquidityHistory: async (pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/history/liquidity_changes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (pool !== undefined) {\n                localVarQueryParameter['pool'] = pool;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (count !== undefined) {\n                localVarQueryParameter['count'] = count;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = to;\n            }\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = from;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array of statistics for all the liquidity providers associated with a given member address.\n         * @summary Member Details\n         * @param {string} address Address to match liquidity providers. Either a rune or an asset address may be given.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMemberDetail: async (address: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'address' is not null or undefined\n            assertParamExists('getMemberDetail', 'address', address)\n            const localVarPath = `/v2/member/{address}`\n                .replace(`{${\"address\"}}`, encodeURIComponent(String(address)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array containing the addresses for all pool members. Addresses are only shown once. If there\\'s both a RUNE address and an asset address for a member, only the RUNE address will be shown. \n         * @summary Members List\n         * @param {string} [pool] Return only members present in the pool.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMembersAdresses: async (pool?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/members`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (pool !== undefined) {\n                localVarQueryParameter['pool'] = pool;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an object containing Network data\n         * @summary Network Data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNetworkData: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/network`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a list of Node public keys and adresses.\n         * @summary Nodes List\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNodes: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/nodes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns details of the pool: depths, price, 24h volume, APY. \n         * @summary Details of a Pool\n         * @param {string} asset pool name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPool: async (asset: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'asset' is not null or undefined\n            assertParamExists('getPool', 'asset', asset)\n            const localVarPath = `/v2/pool/{asset}`\n                .replace(`{${\"asset\"}}`, encodeURIComponent(String(asset)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Statistics about the pool. The description of the fields have pointers about the corresponding v2/history location. Visit the history endpoint for drilldowns. \n         * @summary Pool Statistics\n         * @param {string} asset pool name\n         * @param {'1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all'} [period] Restricts aggregation type fields to the last period only. Default is 30d. \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPoolStats: async (asset: string, period?: '1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all', options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'asset' is not null or undefined\n            assertParamExists('getPoolStats', 'asset', asset)\n            const localVarPath = `/v2/pool/{asset}/stats`\n                .replace(`{${\"asset\"}}`, encodeURIComponent(String(asset)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (period !== undefined) {\n                localVarQueryParameter['period'] = period;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Legacy, V1 style names for backward compatibility. Please migrate to GetPoolStats, check the fields documentation for details. \n         * @summary Pool Statistics (v1 naming)\n         * @param {string} asset pool name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPoolStatsLegacy: async (asset: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'asset' is not null or undefined\n            assertParamExists('getPoolStatsLegacy', 'asset', asset)\n            const localVarPath = `/v2/pool/{asset}/stats/legacy`\n                .replace(`{${\"asset\"}}`, encodeURIComponent(String(asset)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array containing details for a set of pools\n         * @summary Pools List\n         * @param {'available' | 'staged' | 'suspended'} [status] Filter for only pools with this status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPools: async (status?: 'available' | 'staged' | 'suspended', options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/pools`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (status !== undefined) {\n                localVarQueryParameter['status'] = status;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Constant values used by THORChain , some of the values can be overrided by mimir\n         * @summary Proxied THORChain Constants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProxiedConstants: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/thorchain/constants`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Inbound addresses will return a list of address , one per chain. The address might change frequently if THORChain has multiple asgards.\n         * @summary Proxied THORChain Inbound Addresses\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProxiedInboundAddresses: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/thorchain/inbound_addresses`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve lastest block infomation across all chains.\n         * @summary Proxied THORChain Lastblock\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProxiedLastblock: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/thorchain/lastblock`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the proxied nodes endpoint from thornode\n         * @summary Proxied THORChain Nodes\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProxiedNodes: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/thorchain/nodes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns the proxied queue endpoint from thornode\n         * @summary Proxied THORChain Queue\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProxiedQueue: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/thorchain/queue`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an object containing global stats for all pools and all transactions\n         * @summary Global Stats\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStats: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/stats`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns swap count, volume, fees, slip in specified interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Swaps History\n         * @param {string} [pool] Return history given pool. Returns sum of all pools if missing.\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400].\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSwapHistory: async (pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/history/swaps`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (pool !== undefined) {\n                localVarQueryParameter['pool'] = pool;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (count !== undefined) {\n                localVarQueryParameter['count'] = count;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = to;\n            }\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = from;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * List actions along with their related transactions. An action is generated by one or more inbound transactions with the intended action set in the transaction memo. The action may result in one or more outbound transactions. Results are paginated by sets of 50. Filters may be applied to query actions. \n         * @summary Actions List\n         * @param {number} limit pagination limit\n         * @param {number} offset pagination offset\n         * @param {string} [address] Comma separated list. Address of sender or recipient of any in/out transaction related to the action. \n         * @param {string} [txid] ID of any in/out tx related to the action\n         * @param {string} [asset] Any asset that is part of the action (CHAIN.SYMBOL)\n         * @param {string} [type] One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getActions(limit: number, offset: number, address?: string, txid?: string, asset?: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getActions(limit, offset, address, txid, asset, type, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns the asset and rune depths and price. The values report the state at the end of each interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Depth and Price History\n         * @param {string} pool Return stats for this single pool.\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400].\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getDepthHistory(pool: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepthHistory>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepthHistory(pool, interval, count, to, from, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns earnings data for the specified interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Earnings History\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400].\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEarningsHistory(interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningsHistory>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEarningsHistory(interval, count, to, from, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an object containing the health response of the API\n         * @summary Health Info\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getHealth(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Health>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getHealth(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns withdrawals and deposits for given time interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Liquidity Changes History\n         * @param {string} [pool] Return stats for given pool. Returns sum of all pools if missing\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400]\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getLiquidityHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiquidityHistory>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getLiquidityHistory(pool, interval, count, to, from, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an array of statistics for all the liquidity providers associated with a given member address.\n         * @summary Member Details\n         * @param {string} address Address to match liquidity providers. Either a rune or an asset address may be given.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMemberDetail(address: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberDetails>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberDetail(address, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an array containing the addresses for all pool members. Addresses are only shown once. If there\\'s both a RUNE address and an asset address for a member, only the RUNE address will be shown. \n         * @summary Members List\n         * @param {string} [pool] Return only members present in the pool.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMembersAdresses(pool?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembersAdresses(pool, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an object containing Network data\n         * @summary Network Data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getNetworkData(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Network>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getNetworkData(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a list of Node public keys and adresses.\n         * @summary Nodes List\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getNodes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Node>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodes(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns details of the pool: depths, price, 24h volume, APY. \n         * @summary Details of a Pool\n         * @param {string} asset pool name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPool(asset: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoolDetail>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPool(asset, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Statistics about the pool. The description of the fields have pointers about the corresponding v2/history location. Visit the history endpoint for drilldowns. \n         * @summary Pool Statistics\n         * @param {string} asset pool name\n         * @param {'1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all'} [period] Restricts aggregation type fields to the last period only. Default is 30d. \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPoolStats(asset: string, period?: '1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoolStatsDetail>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPoolStats(asset, period, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Legacy, V1 style names for backward compatibility. Please migrate to GetPoolStats, check the fields documentation for details. \n         * @summary Pool Statistics (v1 naming)\n         * @param {string} asset pool name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPoolStatsLegacy(asset: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoolLegacyDetail>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPoolStatsLegacy(asset, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an array containing details for a set of pools\n         * @summary Pools List\n         * @param {'available' | 'staged' | 'suspended'} [status] Filter for only pools with this status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPools(status?: 'available' | 'staged' | 'suspended', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PoolDetail>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPools(status, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Constant values used by THORChain , some of the values can be overrided by mimir\n         * @summary Proxied THORChain Constants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getProxiedConstants(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Constants>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getProxiedConstants(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Inbound addresses will return a list of address , one per chain. The address might change frequently if THORChain has multiple asgards.\n         * @summary Proxied THORChain Inbound Addresses\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getProxiedInboundAddresses(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InboundAddressesItem>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getProxiedInboundAddresses(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Retrieve lastest block infomation across all chains.\n         * @summary Proxied THORChain Lastblock\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getProxiedLastblock(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lastblock>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getProxiedLastblock(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns the proxied nodes endpoint from thornode\n         * @summary Proxied THORChain Nodes\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getProxiedNodes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProxiedNode>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getProxiedNodes(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns the proxied queue endpoint from thornode\n         * @summary Proxied THORChain Queue\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getProxiedQueue(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Queue>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getProxiedQueue(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an object containing global stats for all pools and all transactions\n         * @summary Global Stats\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getStats(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsData>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getStats(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns swap count, volume, fees, slip in specified interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Swaps History\n         * @param {string} [pool] Return history given pool. Returns sum of all pools if missing.\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400].\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSwapHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwapHistory>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwapHistory(pool, interval, count, to, from, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * List actions along with their related transactions. An action is generated by one or more inbound transactions with the intended action set in the transaction memo. The action may result in one or more outbound transactions. Results are paginated by sets of 50. Filters may be applied to query actions. \n         * @summary Actions List\n         * @param {number} limit pagination limit\n         * @param {number} offset pagination offset\n         * @param {string} [address] Comma separated list. Address of sender or recipient of any in/out transaction related to the action. \n         * @param {string} [txid] ID of any in/out tx related to the action\n         * @param {string} [asset] Any asset that is part of the action (CHAIN.SYMBOL)\n         * @param {string} [type] One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getActions(limit: number, offset: number, address?: string, txid?: string, asset?: string, type?: string, options?: any): AxiosPromise<InlineResponse200> {\n            return localVarFp.getActions(limit, offset, address, txid, asset, type, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns the asset and rune depths and price. The values report the state at the end of each interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Depth and Price History\n         * @param {string} pool Return stats for this single pool.\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400].\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDepthHistory(pool: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): AxiosPromise<DepthHistory> {\n            return localVarFp.getDepthHistory(pool, interval, count, to, from, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns earnings data for the specified interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Earnings History\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400].\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEarningsHistory(interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): AxiosPromise<EarningsHistory> {\n            return localVarFp.getEarningsHistory(interval, count, to, from, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an object containing the health response of the API\n         * @summary Health Info\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getHealth(options?: any): AxiosPromise<Health> {\n            return localVarFp.getHealth(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns withdrawals and deposits for given time interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Liquidity Changes History\n         * @param {string} [pool] Return stats for given pool. Returns sum of all pools if missing\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400]\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getLiquidityHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): AxiosPromise<LiquidityHistory> {\n            return localVarFp.getLiquidityHistory(pool, interval, count, to, from, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an array of statistics for all the liquidity providers associated with a given member address.\n         * @summary Member Details\n         * @param {string} address Address to match liquidity providers. Either a rune or an asset address may be given.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMemberDetail(address: string, options?: any): AxiosPromise<MemberDetails> {\n            return localVarFp.getMemberDetail(address, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an array containing the addresses for all pool members. Addresses are only shown once. If there\\'s both a RUNE address and an asset address for a member, only the RUNE address will be shown. \n         * @summary Members List\n         * @param {string} [pool] Return only members present in the pool.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMembersAdresses(pool?: string, options?: any): AxiosPromise<Array<string>> {\n            return localVarFp.getMembersAdresses(pool, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an object containing Network data\n         * @summary Network Data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNetworkData(options?: any): AxiosPromise<Network> {\n            return localVarFp.getNetworkData(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a list of Node public keys and adresses.\n         * @summary Nodes List\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNodes(options?: any): AxiosPromise<Array<Node>> {\n            return localVarFp.getNodes(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns details of the pool: depths, price, 24h volume, APY. \n         * @summary Details of a Pool\n         * @param {string} asset pool name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPool(asset: string, options?: any): AxiosPromise<PoolDetail> {\n            return localVarFp.getPool(asset, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Statistics about the pool. The description of the fields have pointers about the corresponding v2/history location. Visit the history endpoint for drilldowns. \n         * @summary Pool Statistics\n         * @param {string} asset pool name\n         * @param {'1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all'} [period] Restricts aggregation type fields to the last period only. Default is 30d. \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPoolStats(asset: string, period?: '1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all', options?: any): AxiosPromise<PoolStatsDetail> {\n            return localVarFp.getPoolStats(asset, period, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Legacy, V1 style names for backward compatibility. Please migrate to GetPoolStats, check the fields documentation for details. \n         * @summary Pool Statistics (v1 naming)\n         * @param {string} asset pool name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPoolStatsLegacy(asset: string, options?: any): AxiosPromise<PoolLegacyDetail> {\n            return localVarFp.getPoolStatsLegacy(asset, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an array containing details for a set of pools\n         * @summary Pools List\n         * @param {'available' | 'staged' | 'suspended'} [status] Filter for only pools with this status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPools(status?: 'available' | 'staged' | 'suspended', options?: any): AxiosPromise<Array<PoolDetail>> {\n            return localVarFp.getPools(status, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Constant values used by THORChain , some of the values can be overrided by mimir\n         * @summary Proxied THORChain Constants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProxiedConstants(options?: any): AxiosPromise<Constants> {\n            return localVarFp.getProxiedConstants(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Inbound addresses will return a list of address , one per chain. The address might change frequently if THORChain has multiple asgards.\n         * @summary Proxied THORChain Inbound Addresses\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProxiedInboundAddresses(options?: any): AxiosPromise<Array<InboundAddressesItem>> {\n            return localVarFp.getProxiedInboundAddresses(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Retrieve lastest block infomation across all chains.\n         * @summary Proxied THORChain Lastblock\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProxiedLastblock(options?: any): AxiosPromise<Lastblock> {\n            return localVarFp.getProxiedLastblock(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns the proxied nodes endpoint from thornode\n         * @summary Proxied THORChain Nodes\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProxiedNodes(options?: any): AxiosPromise<Array<ProxiedNode>> {\n            return localVarFp.getProxiedNodes(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns the proxied queue endpoint from thornode\n         * @summary Proxied THORChain Queue\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProxiedQueue(options?: any): AxiosPromise<Queue> {\n            return localVarFp.getProxiedQueue(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an object containing global stats for all pools and all transactions\n         * @summary Global Stats\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStats(options?: any): AxiosPromise<StatsData> {\n            return localVarFp.getStats(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns swap count, volume, fees, slip in specified interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n         * @summary Swaps History\n         * @param {string} [pool] Return history given pool. Returns sum of all pools if missing.\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n         * @param {number} [count] Number of intervals to return. Should be between [1..400].\n         * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n         * @param {number} [from] Start time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSwapHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any): AxiosPromise<SwapHistory> {\n            return localVarFp.getSwapHistory(pool, interval, count, to, from, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * List actions along with their related transactions. An action is generated by one or more inbound transactions with the intended action set in the transaction memo. The action may result in one or more outbound transactions. Results are paginated by sets of 50. Filters may be applied to query actions. \n     * @summary Actions List\n     * @param {number} limit pagination limit\n     * @param {number} offset pagination offset\n     * @param {string} [address] Comma separated list. Address of sender or recipient of any in/out transaction related to the action. \n     * @param {string} [txid] ID of any in/out tx related to the action\n     * @param {string} [asset] Any asset that is part of the action (CHAIN.SYMBOL)\n     * @param {string} [type] One or more comma separated unique types of action (swap, addLiquidity, withdraw, donate, refund)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getActions(limit: number, offset: number, address?: string, txid?: string, asset?: string, type?: string, options?: any) {\n        return DefaultApiFp(this.configuration).getActions(limit, offset, address, txid, asset, type, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns the asset and rune depths and price. The values report the state at the end of each interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n     * @summary Depth and Price History\n     * @param {string} pool Return stats for this single pool.\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n     * @param {number} [count] Number of intervals to return. Should be between [1..400].\n     * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n     * @param {number} [from] Start time of the query as unix timestamp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getDepthHistory(pool: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any) {\n        return DefaultApiFp(this.configuration).getDepthHistory(pool, interval, count, to, from, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns earnings data for the specified interval.  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n     * @summary Earnings History\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n     * @param {number} [count] Number of intervals to return. Should be between [1..400].\n     * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n     * @param {number} [from] Start time of the query as unix timestamp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getEarningsHistory(interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any) {\n        return DefaultApiFp(this.configuration).getEarningsHistory(interval, count, to, from, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an object containing the health response of the API\n     * @summary Health Info\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getHealth(options?: any) {\n        return DefaultApiFp(this.configuration).getHealth(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns withdrawals and deposits for given time interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n     * @summary Liquidity Changes History\n     * @param {string} [pool] Return stats for given pool. Returns sum of all pools if missing\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n     * @param {number} [count] Number of intervals to return. Should be between [1..400]\n     * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now\n     * @param {number} [from] Start time of the query as unix timestamp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getLiquidityHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any) {\n        return DefaultApiFp(this.configuration).getLiquidityHistory(pool, interval, count, to, from, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an array of statistics for all the liquidity providers associated with a given member address.\n     * @summary Member Details\n     * @param {string} address Address to match liquidity providers. Either a rune or an asset address may be given.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMemberDetail(address: string, options?: any) {\n        return DefaultApiFp(this.configuration).getMemberDetail(address, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an array containing the addresses for all pool members. Addresses are only shown once. If there\\'s both a RUNE address and an asset address for a member, only the RUNE address will be shown. \n     * @summary Members List\n     * @param {string} [pool] Return only members present in the pool.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMembersAdresses(pool?: string, options?: any) {\n        return DefaultApiFp(this.configuration).getMembersAdresses(pool, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an object containing Network data\n     * @summary Network Data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getNetworkData(options?: any) {\n        return DefaultApiFp(this.configuration).getNetworkData(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a list of Node public keys and adresses.\n     * @summary Nodes List\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getNodes(options?: any) {\n        return DefaultApiFp(this.configuration).getNodes(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns details of the pool: depths, price, 24h volume, APY. \n     * @summary Details of a Pool\n     * @param {string} asset pool name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPool(asset: string, options?: any) {\n        return DefaultApiFp(this.configuration).getPool(asset, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Statistics about the pool. The description of the fields have pointers about the corresponding v2/history location. Visit the history endpoint for drilldowns. \n     * @summary Pool Statistics\n     * @param {string} asset pool name\n     * @param {'1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all'} [period] Restricts aggregation type fields to the last period only. Default is 30d. \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPoolStats(asset: string, period?: '1h' | '24h' | '7d' | '30d' | '90d' | '365d' | 'all', options?: any) {\n        return DefaultApiFp(this.configuration).getPoolStats(asset, period, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Legacy, V1 style names for backward compatibility. Please migrate to GetPoolStats, check the fields documentation for details. \n     * @summary Pool Statistics (v1 naming)\n     * @param {string} asset pool name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPoolStatsLegacy(asset: string, options?: any) {\n        return DefaultApiFp(this.configuration).getPoolStatsLegacy(asset, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an array containing details for a set of pools\n     * @summary Pools List\n     * @param {'available' | 'staged' | 'suspended'} [status] Filter for only pools with this status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPools(status?: 'available' | 'staged' | 'suspended', options?: any) {\n        return DefaultApiFp(this.configuration).getPools(status, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Constant values used by THORChain , some of the values can be overrided by mimir\n     * @summary Proxied THORChain Constants\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getProxiedConstants(options?: any) {\n        return DefaultApiFp(this.configuration).getProxiedConstants(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Inbound addresses will return a list of address , one per chain. The address might change frequently if THORChain has multiple asgards.\n     * @summary Proxied THORChain Inbound Addresses\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getProxiedInboundAddresses(options?: any) {\n        return DefaultApiFp(this.configuration).getProxiedInboundAddresses(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Retrieve lastest block infomation across all chains.\n     * @summary Proxied THORChain Lastblock\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getProxiedLastblock(options?: any) {\n        return DefaultApiFp(this.configuration).getProxiedLastblock(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns the proxied nodes endpoint from thornode\n     * @summary Proxied THORChain Nodes\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getProxiedNodes(options?: any) {\n        return DefaultApiFp(this.configuration).getProxiedNodes(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns the proxied queue endpoint from thornode\n     * @summary Proxied THORChain Queue\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getProxiedQueue(options?: any) {\n        return DefaultApiFp(this.configuration).getProxiedQueue(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an object containing global stats for all pools and all transactions\n     * @summary Global Stats\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getStats(options?: any) {\n        return DefaultApiFp(this.configuration).getStats(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns swap count, volume, fees, slip in specified interval. If pool is not specified returns for all pools  History endpoint has two modes: * With Interval parameter it returns a series of time buckets. From and To dates will   be rounded to the Interval boundaries. * Without Interval parameter a single From..To search is performed with exact timestamps.   * Interval: possible values: 5min, hour, day, week, month, quarter, year. * count: [1..400]. Defines number of intervals. Don\\'t provide if Interval is missing. * from/to: optional int, unix second.  Possible usages with interval. * last 10 days: `?interval=day&count=10` * last 10 days before to: `?interval=day&count=10&to=1608825600` * next 10 days after from: `?interval=day&count=10&from=1606780800` * Days between from and to. From defaults to start of chain, to defaults to now.   Only the first 400 intervals are returned:   `interval=day&from=1606780800&to=1608825600`  Pagination is possible with from&count and then using the returned meta.endTime as the From parameter of the next query.  Possible configurations without interval: * exact search for one time frame: `?from=1606780899&to=1608825600` * one time frame until now: `?from=1606780899` * from chain start until now: no query parameters \n     * @summary Swaps History\n     * @param {string} [pool] Return history given pool. Returns sum of all pools if missing.\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year'} [interval] Interval of calculations\n     * @param {number} [count] Number of intervals to return. Should be between [1..400].\n     * @param {number} [to] End time of the query as unix timestamp. If only count is given, defaults to now.\n     * @param {number} [from] Start time of the query as unix timestamp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getSwapHistory(pool?: string, interval?: '5min' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year', count?: number, to?: number, from?: number, options?: any) {\n        return DefaultApiFp(this.configuration).getSwapHistory(pool, interval, count, to, from, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * SpecificationApi - axios parameter creator\n * @export\n */\nexport const SpecificationApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Swagger/OpenAPI 3.0 specification generated documents.\n         * @summary Documentation\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocs: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/doc`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns human and machine readable swagger/openapi specification\n         * @summary Swagger File\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSwagger: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v2/swagger.json`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SpecificationApi - functional programming interface\n * @export\n */\nexport const SpecificationApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SpecificationApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Swagger/OpenAPI 3.0 specification generated documents.\n         * @summary Documentation\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getDocs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocs(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns human and machine readable swagger/openapi specification\n         * @summary Swagger File\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSwagger(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwagger(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SpecificationApi - factory interface\n * @export\n */\nexport const SpecificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SpecificationApiFp(configuration)\n    return {\n        /**\n         * Swagger/OpenAPI 3.0 specification generated documents.\n         * @summary Documentation\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocs(options?: any): AxiosPromise<void> {\n            return localVarFp.getDocs(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns human and machine readable swagger/openapi specification\n         * @summary Swagger File\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSwagger(options?: any): AxiosPromise<void> {\n            return localVarFp.getSwagger(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SpecificationApi - object-oriented interface\n * @export\n * @class SpecificationApi\n * @extends {BaseAPI}\n */\nexport class SpecificationApi extends BaseAPI {\n    /**\n     * Swagger/OpenAPI 3.0 specification generated documents.\n     * @summary Documentation\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SpecificationApi\n     */\n    public getDocs(options?: any) {\n        return SpecificationApiFp(this.configuration).getDocs(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns human and machine readable swagger/openapi specification\n     * @summary Swagger File\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SpecificationApi\n     */\n    public getSwagger(options?: any) {\n        return SpecificationApiFp(this.configuration).getSwagger(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Midgard Public API\n * The Midgard Public API queries THORChain and any chains linked via the Bifröst and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.\n *\n * The version of the OpenAPI document: 2.0.0-alpha.3\n * Contact: devs@thorchain.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Midgard Public API\n * The Midgard Public API queries THORChain and any chains linked via the Bifröst and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.\n *\n * The version of the OpenAPI document: 2.0.0-alpha.3\n * Contact: devs@thorchain.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","import { BigNumber } from 'bignumber.js'\n\nexport enum CoinName {\n    Bnb = 'BNB.BNB',\n    BnbBusd = 'BNB.BUSD-BD1',\n    BnbBusdTest1 = 'BNB.BUSD-BAF',\n    BnbBusdTest2 = 'BNB.BUSD-74E',\n\n    BnbBtc = 'BNB.BTCB-1DE',\n    BnbBtcTest = 'BNB.BTCB-101',\n    Btc = 'BTC.BTC',\n\n    BnbEth = 'BNB.ETH-1C9',\n    BnbEthTest = 'BNB.ETH-D5B',\n\n    RuneBnb = 'BNB.RUNE-B1A',\n    RuneBnbTest = 'BNB.RUNE-67C',\n    RuneNative = 'THOR.RUNE',\n    RuneEth = 'ETH.RUNE-0x3155ba85d5f96b2d030a4966af206230e46849cb',\n    Rune = RuneNative,\n\n    BnbUsdt = 'BNB.USDT-6D8',\n    BnbUsdtTest = 'BNB.USDT-DC8',\n    EthUsdt = 'ETH.USDT-0X62E273709DA575835C7F6AEF4A31140CA5B1D190'\n}\n\nexport function isRune(coin: CoinName): boolean {\n    return [\n        CoinName.RuneNative,\n        CoinName.RuneBnb,\n        CoinName.RuneBnbTest,\n        CoinName.RuneEth,\n    ].includes(coin)\n}\n\nexport function isRuneStr(coin: string): boolean {\n    return isRune(<CoinName>coin)\n}\n\nexport function isStableCoin(coin: CoinName): boolean {\n    return [\n        CoinName.BnbUsdt,\n        CoinName.BnbUsdtTest,\n        CoinName.EthUsdt,\n        CoinName.BnbBusd,\n        CoinName.BnbBusdTest1,\n        CoinName.BnbBusdTest2\n    ].includes(coin)\n}\n\nexport function isStableCoinStr(coin: string): boolean {\n    return isStableCoin(<CoinName>coin)\n}\n\nconst thorConst = new BigNumber(1e8)\n\nexport function parseThorBigNumber(x: string): number {\n    const bn = new BigNumber(x)\n    const bn1 = bn.div(thorConst)\n    return bn1.toNumber()\n}\n\nexport function convertToThorBigNumber(x: BigNumber | number): string {\n    const bigX: BigNumber = x instanceof BigNumber ? x : new BigNumber(x)\n    const bigThor = bigX.multipliedBy(thorConst)\n    return bigThor.toString(10)\n}\n","import VisualLog from \"@/components/elements/VisualLog.vue\";\nimport {Object3D, Vector3} from \"three\";\nimport {ThorTransaction} from \"@/provider/midgard/tx\";\nimport {TxObject, TxState} from \"@/render/tx/txObject\";\nimport {IPoolQuery, IWalletQuery} from \"@/render/interface\";\nimport {randomPointOnSphere, ZeroVector3} from \"@/helpers/3d\";\nimport {ActionStatusEnum, ActionTypeEnum, Coin} from \"@/provider/midgard/v2\";\nimport {Config} from \"@/config\";\nimport {CoinName, convertToThorBigNumber, isRuneStr, parseThorBigNumber} from \"@/provider/midgard/coinName\";\nimport {truncStringTail} from \"@/helpers/data_utils\";\n\nconst NO_POOL = ''\n\ninterface TxObjectMeta {\n    objects: Array<TxObject>,\n    action: ThorTransaction,\n    orbiting: boolean\n}\n\nexport class TxObjectManager {\n    public scene?: Object3D\n    public poolMan?: IPoolQuery\n    public walletMan?: IWalletQuery\n\n    private txObjects: Record<string, TxObjectMeta> = {}\n\n    private static someUnknownPlace() {\n        return randomPointOnSphere(1e5)\n    }\n\n    public removeAll() {\n        for(let txObjGroup of Object.values(this.txObjects)) {\n            for(let txObj of txObjGroup.objects) {\n                txObj.parent?.remove(txObj)\n            }\n        }\n        this.txObjects = {}\n    }\n\n    private forceRepelAllPoolsExceptOne(poolName: string, txObj: TxObject): Vector3 {\n        if (!this.poolMan) {\n            return new Vector3()\n        }\n\n        const poolMass = Config.Scene.PoolObject.Mass\n\n        let force = new Vector3()\n        for (const poolObj of this.poolMan?.allPools()) {\n            const poolPos = poolObj.position!\n            let forcePart: Vector3\n            if (poolObj.pool?.asset! === poolName) {\n                forcePart = txObj.myGravityTo(poolMass, poolPos)\n            } else {\n                forcePart = txObj.repelFrom(poolMass, poolPos, Config.Scene.TxObject.RepelFactor)\n                forcePart = ZeroVector3.clone()\n            }\n            force.add(forcePart)\n        }\n        force.clampLength(0.0, 1e6)\n        return force\n    }\n\n    private updateTxState(txMeta: TxObjectMeta, txObj: TxObject) {\n        const WalletMass = 1e3\n\n        if (txObj.state == TxState.ToPool || txObj.state == TxState.CrossPool) {\n            const targetPoolPos = this.poolMan?.getPoolByName(txObj.poolName)?.position\n            if (targetPoolPos) {\n                txObj.force = this.forceRepelAllPoolsExceptOne(txObj.poolName, txObj)\n\n                if (txObj.isCloseToTarget(targetPoolPos)) {\n                    this.onReachedPool(txMeta, txObj)\n                }\n            }\n        } else if (txObj.state == TxState.ToWallet) {\n            const targetPos = this.getWalletPosition(txObj.walletAddress)\n            if (targetPos) {\n                txObj.force = txObj.myGravityTo(WalletMass, targetPos)\n\n                if (txObj.isCloseToTarget(targetPos)) {\n                    this.onReachedWallet(txMeta, txObj)\n                }\n            } else {\n                console.warn(`no wallet: ${txObj.walletAddress}`)\n            }\n        } else if (txObj.state == TxState.ToCore) {\n            const targetPos = new Vector3()\n            txObj.force = txObj.myGravityTo(1e3, targetPos)\n\n            if (txObj.isCloseToTarget(targetPos)) {\n                this.onReachedCore(txMeta, txObj)\n            }\n        }\n    }\n\n    private static isLastOneObject(txMeta: TxObjectMeta) {\n        return txMeta.objects.length == 1\n    }\n\n    private createCrossPoolTxObject(txMeta: TxObjectMeta) {\n        const inputCoin = txMeta.action._in[0].coins[0]\n        const runesPerInputAsset = this.poolMan?.runesPerAsset(inputCoin.asset)!\n\n        const pos = this.getPoolPosition(txMeta.action.pools[0]) ?? TxObjectManager.someUnknownPlace()\n        const amount = convertToThorBigNumber(parseThorBigNumber(inputCoin.amount) * runesPerInputAsset)\n        let newTxObj = this.createNewTxObject(\n            txMeta.action,\n            pos,\n            {asset: CoinName.Rune, amount},\n            TxState.CrossPool)\n        if(newTxObj) {\n            newTxObj.poolName = txMeta.action.pools[1]\n            newTxObj.walletAddress = ''\n        }\n    }\n\n    private createOutToWalletTxObject(txMeta: TxObjectMeta, poolName: string) {\n        const tx = txMeta.action\n        for (const outTx of tx.out) {\n            let sourcePosition = this.getPoolPosition(poolName) ?? TxObjectManager.someUnknownPlace()\n            let targetPosition = this.getWalletPosition(outTx.address) ?? TxObjectManager.someUnknownPlace()\n\n            for (const coin of outTx.coins) {\n                console.info(`emit ${truncStringTail(coin.asset, 20)} to wallet ${outTx.address}`)\n                let newTxObj = this.createNewTxObject(tx, sourcePosition, coin, TxState.ToWallet)\n                if (newTxObj) {\n                    newTxObj.walletAddress = outTx.address\n                    newTxObj.poolName = NO_POOL\n                    newTxObj.dissipation = 0.00\n                    newTxObj.setVelocityToDirection(targetPosition, Config.Scene.TxObject.InitialSpeed)\n                }\n            }\n        }\n    }\n\n    private onReachedPool(txMeta: TxObjectMeta, txObj: TxObject) {\n        if (TxObjectManager.isLastOneObject(txMeta)) {\n            // it is time to go to the next state\n            if (txMeta.action.type == ActionTypeEnum.Swap) {\n                if (txMeta.action.isDoubleSwap) {\n                    if (txObj.state == TxState.CrossPool) {\n                        this.createOutToWalletTxObject(txMeta, txObj.poolName)\n                    } else {\n                        this.createCrossPoolTxObject(txMeta)\n                    }\n                } else {\n                    this.createOutToWalletTxObject(txMeta, txObj.poolName)\n                }\n            } else {\n                this.createOutToWalletTxObject(txMeta, txObj.poolName)\n            }\n        }\n        // we do not need the old TxObj anymore\n        this.destroyTxObject(txMeta, txObj)\n    }\n\n    private onReachedWallet(txMeta: TxObjectMeta, txObj: TxObject) {\n        this.destroyTxObject(txMeta, txObj)\n        // todo: make boom?\n    }\n\n    private onReachedCore(txMeta: TxObjectMeta, txObj: TxObject) {\n        if (TxObjectManager.isLastOneObject(txMeta)) {\n            this.createOutToWalletTxObject(txMeta, NO_POOL)\n        }\n        this.destroyTxObject(txMeta, txObj)\n    }\n\n    public update(dt: number) {\n        for (const txObjMeta of Object.values(this.txObjects)) {\n            for (const txObjElement of txObjMeta.objects) {\n                if (!txObjElement.waiting) {\n                    txObjElement.update(dt)\n                    this.updateTxState(txObjMeta, txObjElement)\n                }\n            }\n        }\n    }\n\n    private calcRuneAmount(coin: Coin) {\n        const amt = parseThorBigNumber(coin.amount)\n        if (isRuneStr(coin.asset)) {\n            return amt\n        } else {\n            const price = this.poolMan?.runesPerAsset(coin.asset) ?? 0.0\n            return amt * price\n        }\n    }\n\n    private createNewTxObject(tx: ThorTransaction, sourcePosition: Vector3, coin: Coin, state: TxState) {\n        const hash = tx.realInputHash\n        let txMeta = this.txObjects[hash!]\n        if (!txMeta) {\n            console.error('no TX meta for this tx', hash, coin)\n            return\n        }\n\n        if (!this.scene) {\n            console.error('no scene detected!')\n            return\n        }\n\n        const runeAmount = this.calcRuneAmount(coin)\n        if (!runeAmount) {\n            console.warn('no value of tx object!', tx)\n            return\n        }\n\n        const mass = Config.Scene.TxObject.Mass * Math.log10(runeAmount)\n        let txObject = new TxObject(mass, runeAmount, isRuneStr(coin.asset))\n        txObject.position.copy(sourcePosition)\n        txObject.dissipation = Config.Scene.TxObject.DissipationOfSpeed\n        txObject.state = state\n        txObject.waiting = false\n\n        let velocityDirection = randomPointOnSphere(1.0)\n        txObject.setVelocityToDirection(velocityDirection, Config.Scene.TxObject.InitialSpeed)\n\n        this.scene.add(txObject)\n\n        txMeta.objects.push(txObject)  // register it\n\n        const coinName = truncStringTail(coin.asset, 20)\n        VisualLog.log(`New Tx Obj ${coinName} state = ${state}`)\n\n        return txObject\n    }\n\n    private getWalletPosition(address: string): Vector3 | undefined {\n        return this.walletMan?.findWalletByAddress(address)?.position\n    }\n\n    public getPoolPosition(pool: string): Vector3 | undefined {\n        return this.poolMan?.getPoolByName(pool)?.position\n    }\n\n    public createTransactionObjects(tx: ThorTransaction) {\n        const hash = tx.realInputHash\n        if (hash === null || tx.inputAddress === null) {\n            return\n        }\n\n        if (this.isThereTxMesh(hash)) {\n            this.updateTransactionMeshStatus(tx)\n            return\n        }\n\n        let state: TxState\n        if (tx.type == ActionTypeEnum.Switch) {\n            state = TxState.ToCore\n        } else {\n            state = TxState.ToPool\n        }\n\n        // store in cache\n        this.txObjects[hash] = {\n            action: tx,\n            objects: [],\n            orbiting: tx.status == ActionStatusEnum.Pending,\n        }\n\n        for (const inTx of tx._in) {\n            let sourcePosition = this.getWalletPosition(inTx.address) ?? TxObjectManager.someUnknownPlace()\n\n            for (const coin of inTx.coins) {\n                let txObj = this.createNewTxObject(tx, sourcePosition, coin, state)\n                if(txObj) {\n                    txObj.walletAddress = tx.inputAddress!\n                    txObj.poolName = tx.pools.length > 0 ? tx.pools[0] : NO_POOL\n                }\n            }\n        }\n    }\n\n    public updateTransactionMeshStatus(tx: ThorTransaction) {\n        // todo!\n\n        // const txObj = this.txObjects[tx.realInputHash]\n        // if(txObj) {\n        //     txObj.tx = tx\n        // }\n    }\n\n    public destroyTxObject(txMeta: TxObjectMeta, txObj?: TxObject) {\n        if (txObj) {\n            txObj.parent?.remove(txObj)\n            VisualLog.log(`deleting tx mesh: ${txObj.poolName}`)\n            txMeta.objects = txMeta.objects.filter(o => o.uuid !== txObj.uuid)\n            if (!txMeta.objects.length) {\n                delete this.txObjects[txMeta.action.realInputHash!]\n            }\n        }\n    }\n\n    public destroyTransactionMesh(tx: ThorTransaction) {\n        const hash = tx.realInputHash!\n        const txMeta = this.txObjects[hash]\n        if (txMeta) {\n            for (const txObj of txMeta.objects) {\n                this.destroyTxObject(txMeta, txObj)\n            }\n            delete this.txObjects[hash]\n        }\n    }\n\n    public isThereTxMesh(txID: string): boolean {\n        return txID in this.txObjects\n    }\n}\n","export const LAYER_ENTIRE_SCENE = 0;\nexport const LAYER_BLOOM_SCENE = 2;\n","export default \"uniform sampler2D noiseTexture;\\nuniform float noiseScale;\\n\\nuniform sampler2D bumpTexture;\\nuniform float bumpSpeed;\\nuniform float bumpScale;\\nuniform float time;\\n\\nvarying vec2 vUv;\\n\\nuniform vec3 sisterWorldPos;\\nuniform vec3 thisWorldPos;\\n\\nvarying float sisterProximity;\\n\\nvarying vec3 vNormal;\\n\\nvoid main()\\n{\\n    vUv = uv;\\n\\n    // ----- sister proximity:\\n    vec3 surfaceWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\\n    sisterProximity = -dot(normalize(surfaceWorldPosition - thisWorldPos), normalize(thisWorldPos - sisterWorldPos));\\n    sisterProximity = clamp(sisterProximity, 0.0, 1.0);\\n    sisterProximity = pow(sisterProximity, 25.0);\\n\\n    // ------- bump:\\n\\n    vec2 uvTimeShift = vUv + vec2(1.1, 1.9) * time * bumpSpeed;\\n    vec4 noiseGeneratorTimeShift = texture2D(noiseTexture, uvTimeShift);\\n    vec2 uvNoiseTimeShift = vUv + noiseScale * vec2(noiseGeneratorTimeShift.r, noiseGeneratorTimeShift.g);\\n    // below, using uvTimeShift seems to result in more of a \\\"rippling\\\" effect\\n    //   while uvNoiseTimeShift seems to result in more of a \\\"shivering\\\" effect\\n    vec4 bumpData = texture2D(bumpTexture, uvTimeShift);\\n\\n    // move the position along the normal\\n    //  but displace the vertices at the poles by the same amount\\n    float displacement = (vUv.y > 0.999 || vUv.y < 0.001) ? (0.3 + 0.05 * sin(time)) : bumpData.r;\\n//    vec3 newPosition = position + normal * displacement * bumpScale / v_distanceToSister;\\n    vec3 newPosition = position + normal * displacement * bumpScale * (0.4 + sisterProximity * 3.0);\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\\n\\n    vNormal = normalMatrix * normal;\\n}\"","export default \"uniform sampler2D baseTexture;\\nuniform float baseSpeed;\\nuniform float repeatS;\\nuniform float repeatT;\\n\\nuniform sampler2D noiseTexture;\\nuniform float noiseScale;\\n\\nuniform sampler2D blendTexture;\\nuniform float blendSpeed;\\nuniform float blendOffset;\\n\\nuniform float time;\\nuniform float alpha;\\n\\nuniform vec3 assetColor;\\nuniform vec3 assetColor2;\\nuniform vec3 sisterColor;\\nuniform float sistersDistance;\\n\\nvarying vec2 vUv;\\n\\nvarying vec3 vNormal;\\nvarying float sisterProximity;\\n\\nvoid main()\\n{\\n    vec2 uvTimeShift = vUv + vec2(-0.7, 1.5) * time * baseSpeed;\\n    vec4 noiseGeneratorTimeShift = texture2D(noiseTexture, uvTimeShift);\\n    vec2 uvNoiseTimeShift = vUv + noiseScale * vec2(noiseGeneratorTimeShift.r, noiseGeneratorTimeShift.b);\\n    vec4 baseColor = texture2D(baseTexture, uvNoiseTimeShift * vec2(repeatS, repeatT)) * vec4(assetColor, 1.0);\\n\\n    vec2 uvTimeShift2 = vUv + vec2(1.3, -1.7) * time * blendSpeed;\\n    vec4 noiseGeneratorTimeShift2 = texture2D(noiseTexture, uvTimeShift2);\\n    vec2 uvNoiseTimeShift2 = vUv + noiseScale * vec2(noiseGeneratorTimeShift2.g, noiseGeneratorTimeShift2.b);\\n    vec4 blendColor = texture2D(blendTexture, uvNoiseTimeShift2 * vec2(repeatS, repeatT)) - blendOffset * vec4(1.0, 1.0, 1.0, 1.0);\\n\\n    vec4 theColor = baseColor + blendColor * vec4(assetColor2, 1.0);\\n//    vec3 colorizer = mix(assetColor, assetColor2, vUv.y);\\n//    colorizer = vNormal.y > 0.0 ? mix(sisterColor, colorizer, sisterProximity * 0.1) : colorizer;\\n//    colorizer = mix(colorizer, sisterColor, pow(sisterProximity, 3.0) * 0.5);\\n    theColor = mix(theColor, vec4(sisterColor, 1.0), pow(sisterProximity, 1.0) * 0.5);\\n\\n//    theColor *= vec4(colorizer, 1.0);\\n//    theColor = vec4(sisterProximity, sisterProximity, 0.0, 1.0);\\n\\n    // edge lighting\\n    float f = pow(1.0 - abs(vNormal.z), 2.0);\\n    float sisterBrightness = mix(0.8, 2.5, f);\\n\\n    theColor *= sisterBrightness;\\n\\n    theColor.a = alpha;\\n    gl_FragColor = theColor;\\n}\"","import * as THREE from \"three\";\nimport {randomGauss, randomGaussV3, textureLoader} from \"@/helpers/3d\";\nimport {Config} from \"@/config\";\n\n\nexport class PoolParticles {\n    constructor(obj, texName, color) {\n        const cfg = Config.Scene.PoolObject.Particles\n        this.n = cfg.N\n\n        this.obj = obj\n        this.texName = texName\n        this.time = 0.0\n\n        this.flowVert = [];\n\n        this.geometry = new THREE.BufferGeometry();\n\n        const texture = textureLoader.load(this.texName);\n\n        this.params = []\n        for (let i = 0; i < this.n; i++) {\n            this.flowVert.push(0, 0, 0);\n            const pos = randomGaussV3(0.0, cfg.ShiftVar)\n            this.params.push({\n                life: THREE.MathUtils.randFloat(0.0, cfg.Life),\n                speed: randomGauss(cfg.MoveSpeedAvg, cfg.MoveSpeedVar),\n                pos,\n            })\n        }\n\n        this.geometry.setAttribute('position', new THREE.Float32BufferAttribute(this.flowVert, 3));\n\n        this.mat = new THREE.PointsMaterial({\n            size: cfg.Size,\n            map: texture,\n            blending: THREE.AdditiveBlending,\n            depthTest: true,\n            depthWrite: false,\n            transparent: true\n        })\n\n        this.assetColor = color\n        this.mat.color.copy(this.assetColor)\n\n        this.particles = new THREE.Points(this.geometry, this.mat);\n        this.obj.add(this.particles)\n    }\n\n    updateParticles(dt, sisterDirection) {\n        this.time += dt\n        // this.particles.rotation.y += dt * 0.0000005;\n\n        const cfg = Config.Scene.PoolObject.Particles\n\n        const verts = this.geometry.attributes.position.array\n        const baseDir = sisterDirection.clone().normalize()\n        let vi = 0\n        for (let i = 0; i < verts.length; i += 3, vi += 1) {\n            let param = this.params[vi]\n\n            if (param.life > cfg.Life) {\n                param.life = 0.0;\n                param.speed = randomGauss(cfg.MoveSpeedAvg, cfg.MoveSpeedVar)\n                param.pos = randomGaussV3(0.0, cfg.ShiftVar)\n            }\n\n            param.life += dt;\n            param.pos.add(baseDir.clone().multiplyScalar(dt * param.speed))\n\n            verts[i] = param.pos.x\n            verts[i + 1] = param.pos.y\n            verts[i + 2] = param.pos.z\n        }\n        this.geometry.attributes.position.needsUpdate = true\n    }\n}","import * as THREE from \"three\";\nimport {Vector3} from \"three\";\nimport ballDeformVert from \"@/render/pool/ball_deform.vert\"\nimport lavaFrag from \"@/render/pool/fire_ball.frag\"\nimport {randomGauss, textureLoader, ZeroVector3} from \"@/helpers/3d\";\nimport {LAYER_BLOOM_SCENE} from \"@/render/layers\";\nimport {Config} from \"@/config\";\nimport {PoolParticles} from \"@/render/pool/poolParticles\"\n\nexport class PoolObjectMesh extends THREE.Object3D {\n    private glowMaterial?: THREE.SpriteMaterial\n    private glow?: THREE.Sprite\n    private mesh?: THREE.Mesh\n\n    private static geoPool: THREE.SphereGeometry = new THREE.SphereGeometry(\n        50,\n        Config.Scene.PoolObject.SphereResolution,\n        Config.Scene.PoolObject.SphereResolution)\n\n    private ballMaterial?: THREE.ShaderMaterial;\n    private customUniforms: any;\n    private _rotationSpeed: Vector3;\n    public readonly assetColor: THREE.Color;\n    public readonly assetColor2: THREE.Color;\n    private sisterDirection: Vector3 = ZeroVector3.clone();\n    private flowParticles?: PoolParticles\n\n    set rotationSpeed(value: Vector3) {\n        this._rotationSpeed = value;\n    }\n\n    constructor(assetColor: THREE.Color, assetColor2: THREE.Color) {\n        super();\n        this.assetColor = assetColor\n        this.assetColor2 = assetColor2\n        const rSpeedVar = Config.Scene.PoolObject.Mesh.RotationVar\n        this._rotationSpeed = new Vector3(\n            randomGauss(0, rSpeedVar),\n            randomGauss(0, rSpeedVar),\n            randomGauss(0, rSpeedVar),\n        )\n        this.prepare().then(() => {\n        })\n    }\n\n    public setSisterParams(localDir: THREE.Vector3,\n                           sistersDistance: number,\n                           sisterWorldPos: THREE.Vector3,\n                           sisterColor: THREE.Color) {\n        if (this.customUniforms) {\n            this.customUniforms.sisterWorldPos.value = sisterWorldPos.clone()\n            this.customUniforms.sisterColor.value = sisterColor.clone().lerp(this.assetColor, 0.5);\n            this.customUniforms.sistersDistance.value = sistersDistance\n            this.customUniforms.thisWorldPos.value = this.getWorldPosition(new Vector3())\n            this.sisterDirection = localDir.clone().negate()\n        }\n    }\n\n    public update(dt: number) {\n        this._rotateMesh(dt)\n        if (this.customUniforms) {\n            this.customUniforms.time.value += dt;\n        }\n\n        if (this.glow) {\n            const cfg = Config.Scene.PoolObject.Glow\n            const radius = cfg.Radius;\n            const radiusX = randomGauss(radius, cfg.RadiusVar)\n            const radiusY = randomGauss(radius, cfg.RadiusVar)\n            this.glow.scale.set(radiusX, radiusY, 1.0);\n\n            this.glow.position.set(\n                randomGauss(0.0, cfg.PosVar),\n                randomGauss(0.0, cfg.PosVar),\n                randomGauss(0.0, cfg.PosVar),\n            )\n        }\n\n        if(this.flowParticles) {\n            // @ts-ignore\n            this.flowParticles!.updateParticles(dt, this.sisterDirection)\n        }\n    }\n\n    private _rotateMesh(dt: number) {\n        this.rotateX(dt * this._rotationSpeed.x)\n        this.rotateY(dt * this._rotationSpeed.y)\n        this.rotateZ(dt * this._rotationSpeed.z)\n    }\n\n    private _addPlainGlow(glowColor: THREE.Color) {\n        if (this.glow) {\n            return\n        }\n\n        const texture = textureLoader.load('textures/glow1.png')\n        this.glowMaterial = new THREE.SpriteMaterial(\n            {\n                map: texture,\n                sizeAttenuation: true,\n                color: glowColor,\n                transparent: false,\n                blending: THREE.AdditiveBlending,\n                depthWrite: false,\n            });\n\n        const radius = Config.Scene.PoolObject.Glow.Radius;\n\n        this.glow = new THREE.Sprite(this.glowMaterial);\n        this.glow.scale.set(radius, radius, 1.0);\n        this.add(this.glow); // this centers the glow at the mesh\n    }\n\n    private getGlowColor() {\n        const glowColor = this.assetColor.clone()\n        glowColor.offsetHSL(\n            randomGauss(0.0, 0.1),\n            randomGauss(0.0, 0.1),\n            randomGauss(0.1, 0.2))\n        return glowColor\n        // return new THREE.Color(0xff0000)\n    }\n\n    private async prepare() {\n        await this.createBallMaterial()\n\n        this.mesh = new THREE.Mesh(PoolObjectMesh.geoPool, this.ballMaterial)\n        this.mesh.layers.enable(LAYER_BLOOM_SCENE)\n        this.add(this.mesh)\n\n        if (Config.Scene.PoolObject.Glow.Enabled) {\n            this._addPlainGlow(this.getGlowColor())\n        }\n\n        await this.createParticles()\n    }\n\n    private async createBallMaterial() {\n        if (this.ballMaterial) {\n            return\n        }\n\n        const baseTexName = 'textures/lava-bw.png'\n        const blendTexName = 'textures/noise-perlin1.png'\n        // const blendTexName = 'textures/lava-bw.png'\n\n        const cfg = Config.Scene.PoolObject.BallShader\n\n        // base image texture for mesh\n        const baseTexture = await textureLoader.loadAsync(baseTexName)\n        baseTexture.wrapS = baseTexture.wrapT = THREE.RepeatWrapping;\n        // multiplier for distortion speed\n        const baseSpeed = cfg.BaseSpeed;\n        // number of times to repeat texture in each direction\n\n        // texture used to generate \"randomness\", distort all other textures\n        // noise-perlin1\n        const noiseTexture = await textureLoader.loadAsync('textures/noise-cloud.png');\n        noiseTexture.wrapS = noiseTexture.wrapT = THREE.RepeatWrapping;\n\n        // texture to additively blend with base image texture\n        const blendTexture = await textureLoader.loadAsync(blendTexName);\n        blendTexture.wrapS = blendTexture.wrapT = THREE.RepeatWrapping;\n\n        // texture to determine normal displacement\n        const bumpTexture = noiseTexture;\n        bumpTexture.wrapS = bumpTexture.wrapT = THREE.RepeatWrapping;\n\n        // use \"this.\" to create global object\n        this.customUniforms = {\n            baseTexture: {type: \"t\", value: baseTexture},\n            baseSpeed: {type: \"f\", value: baseSpeed},\n            repeatS: {type: \"f\", value: cfg.RepeatS},\n            repeatT: {type: \"f\", value: cfg.RepeatT},\n            noiseTexture: {type: \"t\", value: noiseTexture},\n            noiseScale: {type: \"f\", value: cfg.NoiseScale},\n            blendTexture: {type: \"t\", value: blendTexture},\n            blendSpeed: {type: \"f\", value: cfg.BlendSpeed},\n            blendOffset: {type: \"f\", value: cfg.BlendOffset},\n            bumpTexture: {type: \"t\", value: bumpTexture},\n            bumpSpeed: {type: \"f\", value: cfg.BumpSpeed},\n            bumpScale: {type: \"f\", value: cfg.BumpScale},\n            alpha: {type: \"f\", value: 1.0},\n            time: {type: \"f\", value: 1.0},\n            assetColor: {type: \"c\", value: this.assetColor},\n            assetColor2: {type: \"c\", value: this.assetColor2},\n            sisterColor: {type: \"c\", value: new THREE.Color(0)},\n            sisterWorldPos: {type: \"v3\", value: new Vector3(0, 0, 1)},\n            thisWorldPos: {type: \"v3\", value: new Vector3(0, 0, 1)},\n            sistersDistance: {type: \"f\", value: 100.0},\n        };\n\n        this.ballMaterial = new THREE.ShaderMaterial({\n            uniforms: this.customUniforms,\n            vertexShader: ballDeformVert,\n            fragmentShader: lavaFrag,\n        });\n    }\n\n    private async createParticles() {\n        // @ts-ignore\n        this.flowParticles = new PoolParticles(this, 'textures/particles/star_05.png', this.assetColor)\n    }\n}\n","import * as THREE from \"three\";\nimport {MathUtils, Vector3} from \"three\";\nimport {PoolDetail} from \"@/provider/midgard/poolDetail\";\nimport {Orbit, randomPointOnSphere} from \"@/helpers/3d\";\nimport SpriteText from 'three-spritetext';\nimport {Config} from \"@/config\";\nimport {RUNE_COLOR_GRAD_1, RUNE_COLOR_GRAD_2} from \"@/helpers/colors\";\nimport {truncStringTail} from \"@/helpers/data_utils\";\nimport {LAYER_BLOOM_SCENE} from \"@/render/layers\";\nimport {PoolObjectMesh} from \"@/render/pool/poolObjectMesh\";\nimport clamp = MathUtils.clamp;\n\n\nexport class PoolObject extends THREE.Object3D {\n    public pool?: PoolDetail\n    public speed: number = 1.0\n    public innerSpeed: number = 1.0\n\n    private innerOrbitHolder = new THREE.Object3D()\n    public runeSideMesh?: PoolObjectMesh\n    public runeSideOrbit?: Orbit\n    public assetSideMesh?: PoolObjectMesh\n    public assetSideOrbit?: Orbit\n\n    scaleFromPool(pool: PoolDetail): number {\n        // return Math.pow(pool.runeDepth.toNumber(), 0.11) / 20\n        const depth = Math.max(1.0, pool.runeDepth.toNumber())\n\n        const ReferenceLog = 11.0\n        const scale = Math.log10(depth) - ReferenceLog\n        return clamp(scale, 1.0, 6.0)\n    }\n\n    private makeOneMesh(isRune: boolean, enabled: boolean): PoolObjectMesh {\n        const cfg = Config.Scene.PoolObject\n\n        let color1 = new THREE.Color()\n        let color2 = new THREE.Color()\n        if (enabled) {\n            if (isRune) {\n                color1.set(RUNE_COLOR_GRAD_1)\n                color2.set(RUNE_COLOR_GRAD_2)\n            } else {\n                // todo! get real asset color\n                // color1.setHSL(Math.random(), 1.0, 0.8)\n                color1 = new THREE.Color(0xff9900);  // main color!\n                color2 = new THREE.Color(0xffffff);\n            }\n        } else {\n            color1.setHSL(0.0, 0.0, 0.5)\n            color2 = color1\n        }\n\n        // const material = new THREE.MeshPhongMaterial({\n        //     color: color,\n        //     reflectivity: 0.1,\n        //     emissive: color,\n        //     emissiveIntensity: 0.2,\n        //     // opacity: 0.6,\n        //     // transparent: true\n        // });\n\n        // let poolMesh = new THREE.Mesh(PoolObject.geoPool, this.ballMaterial)\n        let poolMesh = new PoolObjectMesh(color1, color2)\n\n        this.innerOrbitHolder.add(poolMesh)\n\n        let orbit = new Orbit(poolMesh, new Vector3(), cfg.InnerOrbitRadius)\n        orbit.step()\n\n        if (isRune) {\n            this.runeSideOrbit = orbit\n        } else {\n            orbit.t = Math.PI  // counter-phase\n            this.assetSideOrbit = orbit\n        }\n\n        poolMesh.layers.enable(LAYER_BLOOM_SCENE)\n\n        return poolMesh\n    }\n\n    updateScale() {\n        const scale = this.scaleFromPool(this.pool!)\n\n        // console.info(`Pool: ${this.pool!.asset} ,scale = ${scale}`)\n\n        const cfg = Config.Scene.PoolObject\n        if (this.runeSideMesh && this.assetSideMesh) {\n            this.runeSideMesh!.scale.setScalar(scale * cfg.InitialScale)\n            this.assetSideMesh!.scale.setScalar(scale * cfg.InitialScale)\n\n            this.innerSpeed = scale * cfg.InnerOrbitSpeed\n\n            this.runeSideOrbit!.radius = cfg.InnerOrbitRadius * scale * cfg.InitialScale\n            this.assetSideOrbit!.radius = cfg.InnerOrbitRadius * scale * cfg.InitialScale\n        }\n    }\n\n    constructor(pool: PoolDetail) {\n        super();\n\n        this.pool = pool\n\n        this.add(this.innerOrbitHolder)\n        this.innerOrbitHolder.rotateOnAxis(randomPointOnSphere(), Math.random() * Math.PI * 2)\n\n        this.createLabel(pool.asset)\n\n        const enabled = this.pool!.isEnabled\n\n        this.runeSideMesh = this.makeOneMesh(true, enabled)\n        this.assetSideMesh = this.makeOneMesh(false, enabled)\n\n        this.updateScale()\n    }\n\n    createLabel(name: string) {\n        const cfg = Config.Scene.PoolObject.Label\n        if(cfg.Enabled) {\n            name = truncStringTail(name, cfg.MaxPoolNameLength)\n            const label = new SpriteText(name, cfg.Size, 'white')\n            label.position.y += cfg.Y\n            this.add(label)\n        }\n    }\n\n    public update(dt: number) {\n        this.assetSideOrbit?.step(dt * this.innerSpeed)\n        this.runeSideOrbit?.step(dt * this.innerSpeed)\n\n        if(this.runeSideMesh && this.assetSideMesh) {\n            this.runeSideMesh.update(dt)\n            this.assetSideMesh.update(dt)\n\n            const runeWorld = this.runeSideMesh.getWorldPosition(new Vector3())\n            const assetWorld = this.assetSideMesh.getWorldPosition(new Vector3())\n\n            const fullDistance = runeWorld.clone().sub(assetWorld).length();\n\n            const r2a = this.runeSideMesh.position.clone().sub(this.assetSideMesh.position)\n            const a2r = r2a.clone().negate()\n\n            this.runeSideMesh.setSisterParams(r2a, fullDistance, assetWorld, this.assetSideMesh.assetColor)\n            this.assetSideMesh.setSisterParams(a2r, fullDistance, runeWorld, this.runeSideMesh.assetColor)\n        }\n    }\n\n    public dispose() {\n    }\n\n    public heartBeat() {\n        const factor = 1.05\n        const oldScale = this.scale.x\n        this.scale.setScalar(oldScale * factor)\n        setTimeout(() => this.scale.setScalar(oldScale), 500)\n    }\n\n    public playSwapAnimation(runeAmt: number) {\n        // todo\n        console.warn('playSwapAnimation not implemented yet')\n    }\n\n    public playAddWithdrawAnimation(runeAmt: number, assetAmt: number, isAdd: boolean) {\n        // todo\n        console.warn('playAddWithdrawAnimation not implemented yet')\n    }\n\n    public playBornAnimation() {\n        // todo\n    }\n}\n","import * as THREE from \"three\";\nimport {Color, Sprite, Vector3} from \"three\";\nimport {textureLoader, ZeroVector3} from \"@/helpers/3d\";\nimport {\n    hashedParameterChoice,\n    hashedParameterFloat, hashedParameterFloat01,\n    hashedParameterInt, range,\n    truncateStringAtMiddle\n} from \"@/helpers/data_utils\";\nimport SpriteText from \"three-spritetext\";\nimport {Config} from \"@/config\";\nimport {hashedColorBright, RUNE_COLOR} from \"@/helpers/colors\";\n\nconst flareTextures = [\n    'circle_01.png',\n    'circle_02.png',\n    'circle_03.png',\n    'circle_04.png',\n    'circle_05.png',\n    'flare_01.png',\n    'scorch_01.png',\n    'scorch_02.png',\n    'scorch_03.png',\n    'star_01.png',\n    'star_02.png',\n    'star_03.png',\n    'star_04.png',\n    'star_05.png',\n    'star_06.png',\n    'star_07.png',\n    'star_08.png',\n    'star_09.png',\n    'twirl_01.png',\n    'twirl_02.png',\n    'twirl_03.png',\n    'smoke_01.png',\n    'smoke_02.png',\n    'smoke_03.png',\n    'smoke_04.png',\n    'smoke_05.png',\n    'smoke_06.png',\n    'smoke_07.png',\n    'smoke_08.png',\n    'smoke_09.png',\n    'smoke_10.png',\n]\n\nenum FlareAnimType {\n    Rotate,\n    RotateRandom,\n    Pulse,\n    Blink,\n}\n\nenum FlareOpacityAnimType {\n    Pulse,\n    Twinkle,\n    Sine\n}\n\nconst AllFlareAnimType = Object.keys(FlareAnimType)\n\ninterface FlareInformation {\n    anim: FlareAnimType;\n    speed: number;\n    life: number;\n    sprite: Sprite;\n    direction: number;\n    phase: number;\n    initialRadius: number;\n    colors: Array <THREE.Color>\n}\n\nexport class WalletObject extends THREE.Object3D {\n    private mesh?: THREE.Object3D\n    public label?: SpriteText\n\n    private static geom: THREE.ConeGeometry = new THREE.ConeGeometry(30, 50, 8, 1)\n    private address: string;\n\n    private lastUpdatedAt: number = Date.now();\n\n    private flares: Array<FlareInformation> = []\n\n    updateDate() {\n        this.lastUpdatedAt = Date.now()\n    }\n\n    get age() {\n        return Date.now() - this.lastUpdatedAt\n    }\n\n    private static material = new THREE.MeshLambertMaterial({\n        color: 0xff6600,\n        reflectivity: 0.4,\n    });\n\n    constructor(address: string) {\n        super();\n        this.address = address\n\n        const cfg = Config.Scene.WalletObject\n\n        if (cfg.Label.Enabled) {\n            this.createLabel(address)\n        }\n\n        this.makeFlares()\n        this.updateDate()\n    }\n\n    private makeLegacy() {\n        const material = new THREE.MeshBasicMaterial({\n            color: hashedColorBright(this.address, 'color')\n        })\n\n        this.mesh = new THREE.Mesh(WalletObject.geom, material)\n        this.mesh.up.copy(new Vector3(0, 1, 0))\n        this.add(this.mesh)\n    }\n\n    private makeFlares() {\n        const colors = range(3).map(i => hashedColorBright(this.address,  'color_' + i))\n        const nFlares = hashedParameterInt(this.address, 'nFlares', 4, 12)\n        for(let i = 0; i < nFlares; ++i) {\n            this.makeFlare(i, colors)\n        }\n    }\n\n    private makeFlare(i: number, colors: Color[]) {\n        const prefix = `flare/${i}/`\n        const textureName = hashedParameterChoice(this.address, prefix + 'texture', flareTextures)\n        const texture = textureLoader.load('textures/particles/wallet/' + textureName)\n        const opacity = hashedParameterFloat(this.address, prefix + 'opacity', 0.5, 0.9)\n        const colorIndex = hashedParameterInt(this.address, prefix + 'color_index', 0, colors.length - 1)\n\n        const spriteMaterial = new THREE.SpriteMaterial(\n            {\n                map: texture,\n                sizeAttenuation: true,\n                color: colors[colorIndex],\n                transparent: true,\n                blending: THREE.AdditiveBlending,\n                depthWrite: false,\n                depthTest: true,\n                opacity\n            });\n\n        // const radius = (i + 1) * hashedParameterFloat(this.address, prefix + 'radius', 5, 20);\n        const radius = hashedParameterFloat(this.address, prefix + 'radius', 30, 120);\n        const obj = new THREE.Sprite(spriteMaterial);\n        obj.scale.set(radius, radius, 1.0);\n\n        this.add(obj);\n        this.flares.push({\n            sprite: obj,\n            life: 0.0,\n            anim: hashedParameterChoice(this.address, prefix + 'anim/type', AllFlareAnimType),\n            speed: hashedParameterFloat(this.address, prefix + 'anim/speed', 0.1, 0.8),\n            direction: hashedParameterFloat01(this.address, prefix + 'anim/dir') > 0.5 ? 1.0 : -1.0,\n            phase: hashedParameterFloat(this.address, prefix + 'anim/phase', 0.0, Math.PI * 2.0),\n            initialRadius: radius,\n            colors\n        })\n    }\n\n    positionate(pos: Vector3) {\n        this.position.copy(pos)\n        this.mesh?.lookAt(ZeroVector3) // look at the center of the Runiverse\n    }\n\n    createLabel(address: string) {\n        const name = truncateStringAtMiddle(address, 4, 4, 22)\n        this.label = new SpriteText(name, 24, 'rgba(255, 255, 255, 0.6)')\n        this.label.position.y = 42\n        this.label.position.x = 0\n        this.add(this.label)\n    }\n\n    public update(dt: number) {\n        for(let flare of this.flares) {\n            // todo: implement other animations\n            flare.sprite.material.rotation += dt * flare.direction * flare.speed\n            flare.sprite.scale.setScalar(flare.initialRadius + 0.5 * Math.sin(\n                flare.speed * flare.life + flare.phase\n            ))\n            flare.life += dt;\n        }\n    }\n\n    public dispose() {\n        this.label = undefined\n        this.parent?.remove(this)\n    }\n}\n","import {PoolDetail} from \"@/provider/midgard/poolDetail\";\nimport {PoolObject} from \"@/render/pool/poolObject\";\nimport {Object3D} from \"three\";\nimport {IPoolQuery} from \"@/render/interface\";\nimport {isRuneStr} from \"@/provider/midgard/coinName\";\nimport {Orbit, randomGauss, randomPointOnSphere, ZeroVector3} from \"@/helpers/3d\";\nimport {Config} from \"@/config\";\n\ninterface PoolStruct {\n    obj: PoolObject;\n    orbit: Orbit;\n    orbitSpeed: number;\n}\n\nexport class PoolObjectManager implements IPoolQuery {\n    private poolObjects: Record<string, PoolStruct> = {}\n\n    // todo: track PoolObject state\n\n    public scene?: Object3D\n\n    constructor() {\n    }\n\n    public removeAllPoolMeshes() {\n        for (const key of Object.keys(this.poolObjects)) {\n            const pm = this.poolObjects[key]\n            pm.obj.dispose()\n        }\n        this.poolObjects = {}\n    }\n\n    public removePoolMesh(pool: PoolDetail) {\n        const pm = this.poolObjects[pool.asset]\n        if (pm) {\n            pm.obj.dispose()\n            delete this.poolObjects[pool.asset]\n            console.debug(`delete pool mesh ${pool.asset}`)\n        }\n    }\n\n    public isTherePoolMesh(poolName: string): boolean {\n        return poolName in this.poolObjects\n    }\n\n    public runesPerAsset(poolName: string): number {\n        if (isRuneStr(poolName)) {\n            return 1.0\n        }\n\n        const poolStruct = this.poolObjects[poolName]\n        if (poolStruct) {\n            const pool = poolStruct.obj.pool\n            if (pool) {\n                return pool.runesPerAsset.toNumber()\n            }\n        }\n        return 0.0\n    }\n\n    public async addNewPoolMesh(pool: PoolDetail) {\n        if (this.isTherePoolMesh(pool.asset)) {\n            return\n        }\n\n        const poolObj = new PoolObject(pool)\n        const cfg = Config.Scene.PoolObject\n        const radius = pool.isEnabled ?\n            randomGauss(cfg.Enabled.Distance.CenterGauss, cfg.Enabled.Distance.ScaleGauss) :\n            randomGauss(cfg.Staged.Distance.CenterGauss, cfg.Staged.Distance.ScaleGauss);\n        const n = randomPointOnSphere(1.0)\n        const orbit = new Orbit(poolObj, ZeroVector3.clone(), radius, n)\n        orbit.randomizePhase()\n        orbit.step()\n\n        const orbitSpeed = randomGauss(cfg.SpeedAvg, cfg.SpeedVar)\n\n        this.poolObjects[pool.asset] = {\n            obj: poolObj,\n            orbit,\n            orbitSpeed,\n        }\n\n        if (this.scene) {\n            this.scene.add(poolObj);\n        }\n\n        console.debug(`add new mesh for ${pool.asset}`)\n    }\n\n    public update(dt: number) {\n        for (const key of Object.keys(this.poolObjects)) {\n            const pm = this.poolObjects[key]\n            pm.obj.update(dt)\n            pm.orbit.step(dt, pm.orbitSpeed)\n        }\n    }\n\n    public getPoolByName(poolName: string) {\n        return this.poolObjects[poolName].obj\n    }\n\n    public hearBeat(pool: PoolDetail) {\n        const poolObj = this.poolObjects[pool.asset]\n        if (poolObj) {\n            poolObj.obj.pool = pool\n            poolObj.obj.updateScale()\n        }\n    }\n\n    public allPools(): Array<PoolObject> {\n        const poolStructs = Object.values(this.poolObjects)\n        return poolStructs.map((s) => s.obj)\n    }\n}\n","import {WalletObject} from \"@/render/wallet/walletObject\";\nimport {ThorTransaction} from \"@/provider/midgard/tx\";\nimport {Transaction} from \"@/provider/midgard/v2\";\nimport {Object3D} from \"three\";\nimport {hashToPolarCoordinates, polarToXYZ} from \"@/helpers/3d\";\nimport VisualLog from \"@/components/elements/VisualLog.vue\";\nimport * as crypto from \"crypto-js\";\nimport {easyHash} from \"@/helpers/data_utils\";\n\n\nexport class WalletObjectManager {\n    private walletObjects: Record<string, WalletObject> = {}\n\n    public scene?: Object3D\n\n    private AddressRadius = 4000.0\n\n    public removeAll() {\n        for(let walletObj of Object.values(this.walletObjects)) {\n            walletObj.parent?.remove(walletObj)\n        }\n        this.walletObjects = {}\n    }\n\n    public makeWalletsFromTx(tx: ThorTransaction) {\n        const subTxs = [...tx._in, ...tx.out]\n        let coins = []\n\n        for (const subTx of subTxs) {\n            if(subTx.address && subTx.coins.length > 0) {\n                this.updateWallet(subTx)\n                // todo: they are all friends => so add a force to draw them to each other\n            }\n\n            for (const coin of subTx.coins) {\n                coins.push(coin)\n            }\n        }\n    }\n\n    public removeWallet(address: string) {\n        const wo = this.walletObjects[address]\n        if(wo) {\n            wo.dispose()\n            delete this.walletObjects[address]\n        }\n    }\n\n    private makeNewWalletObj(address: string) {\n        const newWalletObj = new WalletObject(address)\n\n        this.scene?.add(newWalletObj)\n\n        const addressHash = easyHash(address)\n        const pos = polarToXYZ(hashToPolarCoordinates(addressHash, this.AddressRadius))\n        newWalletObj.positionate(pos)\n\n        this.walletObjects[address] = newWalletObj\n\n        VisualLog.log(`New wallet ${address}.`)\n    }\n\n    private updateWallet(subTx: Transaction) {\n        if(!this.isThereAddress(subTx.address)) {\n            this.makeNewWalletObj(subTx.address)\n        } else {\n            this.findWalletByAddress(subTx.address)!.updateDate()\n        }\n    }\n\n    public isThereAddress(address: string): boolean {\n        return address in this.walletObjects\n    }\n\n    public findWalletByAddress(address: string): WalletObject | undefined {\n        if(!address || address === '') {\n            return undefined\n        }\n        // todo: make new wallet it there is no requested one.\n        return this.walletObjects[address]\n    }\n\n    public update(dt: number) {\n        for(let wo of Object.values(this.walletObjects)) {\n            wo.update(dt)\n        }\n    }\n}\n","import * as THREE from \"three\";\nimport {Config} from \"@/config\";\nimport coreGalaxyVert from \"@/render/core/core_galaxy.vert\"\nimport coreGalaxyFrag from \"@/render/core/core_galaxy.frag\"\nimport coreBlackholeVert from \"@/render/core/black_hole.vert\"\nimport coreBlackholeFrag from \"@/render/core/black_hole.frag\"\nimport coreBlackholeLabVert from \"@/render/core/black_hole_lab.vert\"\nimport coreBlackholeLabFrag from \"@/render/core/black_hole_lab.frag\"\nimport simpleGlowVert from \"@/render/shaders/simple_glow.vert\"\nimport simpleGlowFrag from \"@/render/shaders/simple_glow.frag\"\nimport {textureLoader} from \"@/helpers/3d\";\n\n\nconst CoreObjSize = Config.Scene.Core.Scale;\nconst CoreObjScale = Config.Scene.Core.Radius / CoreObjSize\n\nenum BlackHoleType {\n    Lab, Galaxy, Standart\n}\n\nconst BH_Type = BlackHoleType.Lab\n\nexport class CoreObject extends THREE.Group {\n    private core?: THREE.Mesh;\n    private material?: THREE.ShaderMaterial;\n\n    private cubeMap?: THREE.CubeTexture;\n\n    private t = 0.0\n\n    public setEnvironment(environment: THREE.CubeTexture) {\n        this.cubeMap = environment\n        if (this.material) {\n            this.material.uniforms[\"texEnvironMap\"].value = this.cubeMap\n        }\n    }\n\n    private async loadCoreMeshSimple() {\n        this.core = new THREE.Mesh(\n            // new THREE.BoxGeometry(CoreObjSize, CoreObjSize, CoreObjSize),\n            new THREE.SphereGeometry(CoreObjSize, 50, 50),\n            new THREE.MeshBasicMaterial({\n                color: new THREE.Color('#000000'),\n            })\n        )\n        this.core.scale.setScalar(CoreObjScale)\n        this.add(this.core)\n\n        const glowMat = new THREE.ShaderMaterial(\n            {\n                uniforms: {},\n                vertexShader: simpleGlowVert,\n                fragmentShader: simpleGlowFrag,\n                side: THREE.BackSide,\n                blending: THREE.AdditiveBlending,\n                transparent: true\n            });\n\n        const coreGlow = new THREE.Mesh(\n            new THREE.SphereGeometry(CoreObjSize * 1.1, 50, 50),\n            glowMat\n        )\n        this.core.add(coreGlow)\n    }\n\n    private bhVertAndFragShaders(t: BlackHoleType): [string, string] {\n        if(t == BlackHoleType.Lab) {\n            return [coreBlackholeLabVert, coreBlackholeLabFrag]\n        } else if(t == BlackHoleType.Galaxy) {\n            return [coreGalaxyVert, coreGalaxyFrag]\n        } else {\n            return [coreBlackholeVert, coreBlackholeFrag]\n        }\n    }\n\n    private async loadCoreMeshBlackHole() {\n        // const loader = new THREE.FileLoader()\n        // const vertexShader: string = <string>await loader.loadAsync('shaders/black_hole.vert')\n        // const fragmentShader: string = <string>await loader.loadAsync('shaders/black_hole.frag')\n\n        let [vertexShader, fragmentShader] = this.bhVertAndFragShaders(BH_Type)\n\n        const noiseTexture = await textureLoader.loadAsync(\"textures/noise-rgb64.png\")\n\n        const uniforms = {\n            \"time\": {value: 1.0},\n            texEnvironMap: {type: 't', value: this.cubeMap},\n            texNoise: {type: 't', value: noiseTexture}\n        }\n\n        this.material = new THREE.ShaderMaterial({\n            uniforms,\n            vertexShader,\n            fragmentShader,\n            transparent: true\n        })\n\n        this.core = new THREE.Mesh(\n            new THREE.BoxGeometry(CoreObjSize, CoreObjSize, CoreObjSize),\n            // new THREE.SphereGeometry(CoreObjSize, 8, 8),\n            this.material\n        )\n        this.core.scale.setScalar(CoreObjScale)\n        this.add(this.core)\n    }\n\n    constructor() {\n        super();\n\n        if (Config.Scene.Core.Simplified) {\n            this.loadCoreMeshSimple().then()\n        } else {\n            this.loadCoreMeshBlackHole().then()\n        }\n    }\n\n    public update(dt: number) {\n        this.t += dt\n        if (this.material) {\n            this.material.uniforms.time.value = this.t\n            this.material.uniformsNeedUpdate = true\n        }\n    }\n\n    public dispose() {\n    }\n}\n","export default \"varying vec3 rayOrigin;\\nvarying vec3 hitPosition;\\n\\n\\nvoid main() {\\n    vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\\n    hitPosition = position;\\n\\n    vec4 cameraPoint = vec4(cameraPosition, 1.0);\\n    rayOrigin = (inverse(modelMatrix) * cameraPoint).xyz;\\n\\n    gl_Position = projectionMatrix * modelViewPosition;\\n}\\n\"","export default \"//uniform vec2 iResolution;\\nuniform float time;\\nvarying vec3 rayOrigin;\\nvarying vec3 hitPosition;\\n\\nuniform samplerCube texEnvironMap;\\n\\n#define PI 3.14159265\\n\\nconst vec4\\ncolCenter = vec4(1.2, 1.5, 1.5, .25),\\ncolEdge = vec4(.1, .1, .2, .5),\\ncolEdge2 = vec4(.7, .54, .3, .23),\\ncolEdge3 = vec4(.6, 1., 1.3, .25);\\n\\n\\nvec4 sliderVal = vec4(0.3, 0.1, 0.2, 0.3);\\n\\nvec2 min2(vec2 a, vec2 b) {\\n    return a.x < b.x ? a : b;\\n}\\n\\nfloat hash(const in vec3 p) {\\n    float h = dot(p, vec3(127.1, 311.7, 758.5453123));\\n    return fract(sin(h) * 43758.5453123);\\n}\\n\\n// [iq] https://www.shadertoy.com/view/4sfGzS\\nfloat noiseText(in vec3 x) {\\n    vec3 p = floor(x), f = fract(x);\\n    f = f * f * (3. - f - f);\\n    vec2 uv = (p.xy + vec2(37., 17.) * p.z) + f.xy,\\n    //rg = textureLod( iChannel0, (uv+.5)/256., -100.).yx;\\n    rg = vec2(0.0, 0.0);\\n    return mix(rg.x, rg.y, f.z);\\n}\\n\\n// ratio: ratio of hight/low frequencies\\nfloat fbmdust(in vec3 p, in float ratio) {\\n    return mix(noiseText(p * 3.), noiseText(p * 20.), ratio);\\n}\\n\\nvec2 spiralArm(in vec3 p, in float thickness, in float blurAmout, in float blurStyle) {\\n    float dephase = 2.2, loop = 4.;\\n    float a = atan(p.x, p.z), // angle\\n    r = length(p.xz), lr = log(r), // distance to center\\n    th = (.1 - .25 * r), // thickness according to distance\\n    d = fract(.5 * (a - lr * loop) / PI);//apply rotation and scaling.\\n    d = (.5 / dephase - abs(d - .5)) * 2. * PI * r;\\n    d *= (1. - lr) / thickness;// space fct of distance\\n    // Perturb distance field\\n    float radialBlur = blurAmout * fbmdust(vec3(r * 4., 10. * d, 10. - 5. * p.y), blurStyle);\\n    return vec2(sqrt(d * d + 10. * p.y * p.y / thickness) - th * r * .2 - radialBlur);\\n}\\n\\nvec2 dfGalaxy(in vec3 p, in float thickness, in float blurAmout, in float blurStyle) {\\n    return min2(spiralArm(p, thickness, blurAmout, blurStyle),\\n    spiralArm(vec3(p.z, p.y, -p.x), thickness, blurAmout, blurStyle));\\n}\\n\\nvec2 map(in vec3 p) {\\n    //    float a = iMouse.x * .008 * PI + time * .3;\\n    float a = time;// todo!\\n    p.xz = cos(a) * p.xz + sin(a) * vec2(p.xz.y, -p.xz.x);\\n    //    R(p.xz, iMouse.x*.008*pi+time*.3);\\n    return dfGalaxy(p, clamp(10. * sliderVal.x, .9, 10.), sliderVal.y, sliderVal.z);\\n}\\n\\n//--------------------------------------------------------------\\n\\n// assign color to the media\\nvec4 computeColor(in vec3 p, in float density, in float radius, in float id) {\\n    // color based on density alone, gives impression of occlusion within\\n    // the media\\n    vec4 result = mix(vec4(1., .9, .8, 1.), vec4(.4, .15, .1, 1.), density);\\n    // color added to the media\\n    result *= mix(colCenter,\\n    mix(colEdge2,\\n    mix(colEdge, colEdge3, step(.08, id)), step(-.05, id)),\\n    smoothstep(.2, .8, radius));\\n    return result;\\n}\\n\\n// - Ray / Shapes Intersection -----------------------\\nbool sBox(in vec3 ro, in vec3 rd, in vec3 rad, out float tN, out float tF) {\\n    vec3 m = 1. / rd, n = m * ro,\\n    k = abs(m) * rad,\\n    t1 = -n - k, t2 = -n + k;\\n    tN = max(max(t1.x, t1.y), t1.z);\\n    tF = min(min(t2.x, t2.y), t2.z);\\n    return !(tN > tF || tF < 0.);\\n}\\n\\nbool sSphere(in vec3 ro, in vec3 rd, in float r, out float tN, out float tF) {\\n    float b = dot(rd, ro), d = b * b - dot(ro, ro) + r;\\n    if (d < 0.) return false;\\n    tN = -b - sqrt(d);\\n    tF = -tN - b - b;\\n    return tF > 0.;\\n}\\n\\n// ---------------------------------------------------\\n// Based on \\\"Dusty nebula 4\\\" by Duke (https://www.shadertoy.com/view/MsVXWW)\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\\n    vec3 ro = rayOrigin;\\n    vec3 rd = normalize(hitPosition - rayOrigin);\\n\\n    // ld, td: local, total density\\n    // w: weighting factor\\n    float ld = 0., td = 0., w = 0.;\\n\\n    // t: length of the ray\\n    // d: distance function\\n    float d = 1., t = 0.;\\n\\n    const float h = 0.1;\\n\\n    vec4 sum = vec4(0);\\n\\n    float min_dist = 0., max_dist = 0.,\\n    min_dist2 = 0., max_dist2 = 0.;\\n\\n    if (sSphere(ro, rd, 4., min_dist, max_dist)) {\\n        if (sBox(ro, rd, vec3(4., 1.8, 4.), min_dist2, max_dist2)) {\\n            min_dist = max(.1, max(min_dist, min_dist2));\\n            max_dist = min(max_dist, max_dist2);\\n\\n            t = min_dist * step(t, min_dist) + .1 * hash(rd + time);\\n\\n            // raymarch loop\\n            vec4 col;\\n            for (int i = 0; i < 100; i++) {\\n                vec3 pos = ro + t * rd;\\n\\n                // Loop break conditions.\\n                if (td > .9 || sum.a > .99 || t > max_dist) break;\\n\\n                // evaluate distance function\\n                vec2 res = map(pos);\\n                d = max(res.x, .01);\\n\\n                // point light calculations\\n                vec3 ldst = pos;\\n                ldst.y *= 1.6;\\n                vec3 ldst2 = pos;\\n                ldst2.y *= 3.6;\\n                float lDist = max(length(ldst), .1), //max(length(ldst), 0.001);\\n                lDist2 = max(length(ldst2), .1);\\n                // star in center\\n                vec3 lightColor = (1. - smoothstep(3., 4.5, lDist * lDist)) *\\n                mix(.015 * vec3(1., .5, .25) / (lDist * lDist),\\n                .02 * vec3(.5, .7, 1.) / (lDist2 * lDist2),\\n                smoothstep(.1, 2., lDist * lDist));\\n                sum.rgb += lightColor;//.015*lightColor/(lDist*lDist); // star itself and bloom around the light\\n                sum.a += .003 / (lDist * lDist);;\\n\\n                if (d < h) {\\n                    // compute local density\\n                    ld = h - d;\\n                    // compute weighting factor\\n                    w = (1. - td) * ld;\\n                    // accumulate density\\n                    td += w + 1. / 60.;\\n                    // get color of object (with transparencies)\\n                    col = computeColor(pos, td, lDist * 2., res.y);\\n                    col.a *= td;\\n                    // colour by alpha\\n                    col.rgb *= col.a;\\n                    // alpha blend in contribution\\n                    sum += col * (1.0 - sum.a);\\n                }\\n\\n                //float pitch = t/iResolution.x;\\n                //float dt = max(d * 0.25, .005); //pitch);\\n                // trying to optimize step size near the camera and near the light source\\n                t += max(d * .15 * max(min(length(ldst), length(ro)), 1.0), 0.005);\\n                td += .1 / 70.;\\n                //t += dt;\\n            }\\n            // simple scattering\\n            sum *= 1. / exp(ld * .2) * .8;\\n            sum = clamp(sum, 0., 1.);\\n        }\\n    }\\n\\n    vec3 envUV = rd.xyz;\\n    sum.xyz += texture(texEnvironMap, envUV).rgb * 1.0;\\n    // Background color\\n    //    sum.rgb += vec3(clamp(2.*cos(.5*time),0.,.4))*(1. - sum.a)*pow(16.0*q.x*q.y*(1.-q.x)*(1.-q.y),.3);\\n    //    sum.x = 1.0;\\n    fragColor = vec4(sum.xyz, 1.);\\n}\\n\\nvoid main() {\\n    mainImage(gl_FragColor, gl_FragCoord.xy);\\n}\\n\"","export default \"varying vec3 rayOrigin;\\nvarying vec3 hitPosition;\\n\\n\\nvoid main() {\\n    vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\\n    hitPosition = position;\\n\\n    vec4 cameraPoint = vec4(cameraPosition, 1.0);\\n    rayOrigin = (inverse(modelMatrix) * cameraPoint).xyz;\\n\\n    gl_Position = projectionMatrix * modelViewPosition;\\n}\\n\"","export default \"varying vec3 rayOrigin;\\nvarying vec3 hitPosition;\\n\\nuniform samplerCube texEnvironMap;\\nuniform sampler2D texNoise;\\n\\nuniform float time;\\n\\nconst float pi2 = 2.0 * 3.1415927;\\n\\nfloat sdSphere(vec3 p, float s) {\\n    return length(p) - s;\\n}\\n\\n\\nfloat sdTorus(vec3 p, vec2 t) {\\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\\n    return length(q) - t.y;\\n}\\n\\nvec4 blackHole(vec3 ro, vec3 rd) {\\n    const vec3 blackHolePosition = vec3(0.0, 0.0, 0.0);\\n    const float blackHoleRadius = 0.1;\\n//    const float blackHoleMass = 5.0 * 0.001;// premul G = 0.001\\n    const float blackHoleMass = 1.0 * 0.001; // premul G = 0.001\\n    const vec3 c1 = vec3(0.5, 0.46, 0.4);\\n    const vec3 c2 = vec3(1.0, 0.8, 0.6);\\n    const vec3 glowC = vec3(1.0, 0.9, 0.85);\\n//    const float glowFac = 0.0015; // orig: 0.0033\\n    const float glowFac = 0.00001; // orig: 0.0033\\n\\n    const int maxSteps = 350; // 320 default\\n    const float dt = 0.08; // ray step. default: 0.02\\n\\n    const float animationSeed = 1.0;\\n\\n    vec3 currentRayPos = ro;// currentPosition\\n    vec3 currentRayDir = rd;// currentRay direction\\n\\n    vec3 accColor = vec3(0.0);\\n\\n    float nonCaptured = 1.0;\\n\\n    // pre-step\\n    float dToBlackHole = length(currentRayPos - blackHolePosition);\\n    currentRayPos += currentRayDir * (dToBlackHole - 5.0);// pre step to BH\\n\\n    for (int i = 0; i < maxSteps; i++) {\\n        // gravity\\n        vec3 bhv = blackHolePosition - currentRayPos;\\n\\n        float r2 = dot(bhv, bhv);\\n        float r = sqrt(r2);\\n\\n        currentRayDir += normalize(bhv) * (blackHoleMass / r2);\\n\\n        nonCaptured = smoothstep(0.0, 0.666, r - blackHoleRadius); // sdSphere opt.\\n\\n        // Texture for the accretion disc\\n        float dr = length(bhv.xz);\\n        float da = atan(bhv.x, bhv.z);\\n\\n        vec2 ra = vec2(dr, da * (0.01 + (dr - blackHoleRadius) * 0.02) + pi2 + time * animationSeed);\\n        ra *= vec2(5.0, 10.0);\\n\\n        float textureRead = texture(texNoise, ra * vec2(0.1, 0.5)).r + 0.5;\\n\\n        vec3 dcol = mix(c2, c1, pow(length(bhv) - blackHoleRadius, 2.0)) * max(0.0, textureRead) * (4.0 / ((0.001 + (length(bhv) - blackHoleRadius) * 50.0)));\\n\\n        accColor += max(vec3(0.0), dcol * smoothstep(0.0, 1.0, -sdTorus((currentRayPos * vec3(1.0, 25.0, 1.0)) - blackHolePosition, vec2(0.8, 0.99))) * nonCaptured);\\n         accColor += dcol * (1.0 / dr) * nonCaptured * 0.01; // pole streams!\\n\\n        // Glow\\n        accColor += glowC * vec3(1.0 / r2) * glowFac * nonCaptured;\\n\\n        // step\\n        currentRayPos += currentRayDir * dt * nonCaptured ; // todo: step according distance to black hole, so maxSteps may be lower!!\\n    }\\n\\n    // BG\\n//        vec3 envUV = vec3(currentRayDir.x, currentRayDir.y, currentRayDir.z);\\n    vec3 envUV = currentRayDir;\\n    accColor += texture(texEnvironMap, envUV).rgb * nonCaptured;\\n\\n    const float a = 1.0;\\n    // Final color\\n    return vec4(accColor, a);\\n}\\n\\nvoid main() {\\n    vec3 rayDirection = normalize(hitPosition - rayOrigin);\\n    vec4 bhColor = blackHole(rayOrigin, rayDirection);\\n    gl_FragColor = bhColor;\\n}\"","export default \"varying vec3 rayOrigin;\\nvarying vec3 hitPosition;\\n\\n\\nvoid main() {\\n    vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\\n    hitPosition = position;\\n\\n    vec4 cameraPoint = vec4(cameraPosition, 1.0);\\n    rayOrigin = (inverse(modelMatrix) * cameraPoint).xyz;\\n\\n    gl_Position = projectionMatrix * modelViewPosition;\\n}\\n\"","export default \"varying vec3 rayOrigin;\\nvarying vec3 hitPosition;\\n\\nuniform samplerCube texEnvironMap;\\nuniform sampler2D texNoise;\\n\\nuniform float time;\\n\\n\\nconst int MAX_MARCHING_STEPS = 255;\\nconst float MIN_DIST = 0.0;\\nconst float MAX_DIST = 100.0;\\nconst float EPSILON = 0.0001;\\n\\n\\nfloat sdSphere(vec3 p, float s) {\\n    return length(p) - s;\\n}\\n\\n\\nfloat sceneSDF(vec3 p) {\\n    return sdSphere(p, 0.5);\\n}\\n\\n\\nfloat distance(vec3 eye, vec3 marchingDirection, float start, float end) {\\n    float depth = start;\\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\\n        float dist = sceneSDF(eye + depth * marchingDirection);\\n        if (dist < EPSILON) {\\n            return depth;\\n        }\\n        depth += dist;\\n        if (depth >= end) {\\n            return end;\\n        }\\n    }\\n    return end;\\n}\\n\\n\\nvec4 rayMarching(vec3 ro, vec3 rd) {\\n    float dist = distance(ro, rd, MIN_DIST, MAX_DIST);\\n\\n    if (dist > MAX_DIST - EPSILON) {\\n        // Didn't hit anything\\n        return texture(texEnvironMap, rd);\\n    }\\n    return vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n\\nvoid main() {\\n    vec3 rayDirection = normalize(hitPosition - rayOrigin);\\n    vec4 bhColor = rayMarching(rayOrigin, rayDirection);\\n    gl_FragColor = bhColor;\\n}\"","export default \"varying vec3 vNormal;\\nvoid main()\\n{\\n    vNormal = normalize(normalMatrix * normal);\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n\"","export default \"varying vec3 vNormal;\\nvoid main()\\n{\\n    float intensity = pow(0.7 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 4.0);\\n    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0) * intensity;\\n}\\n\"","/* tslint:disable */\n/* eslint-disable */\n/**\n * Midgard Public API\n * The Midgard Public API queries THORChain and any chains linked via the Bifröst and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.\n *\n * The version of the OpenAPI document: 0.8.1\n * Contact: devs@thorchain.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AssetDetail\n */\nexport interface AssetDetail {\n    /**\n     * \n     * @type {string}\n     * @memberof AssetDetail\n     */\n    asset?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AssetDetail\n     */\n    dateCreated?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AssetDetail\n     */\n    priceRune?: string;\n}\n/**\n * \n * @export\n * @interface BlockRewards\n */\nexport interface BlockRewards {\n    /**\n     * \n     * @type {string}\n     * @memberof BlockRewards\n     */\n    blockReward?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BlockRewards\n     */\n    bondReward?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BlockRewards\n     */\n    stakeReward?: string;\n}\n/**\n * \n * @export\n * @interface BondMetrics\n */\nexport interface BondMetrics {\n    /**\n     * Average bond of active nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    averageActiveBond?: string;\n    /**\n     * Average bond of standby nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    averageStandbyBond?: string;\n    /**\n     * Maxinum bond of active nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    maximumActiveBond?: string;\n    /**\n     * Maximum bond of standby nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    maximumStandbyBond?: string;\n    /**\n     * Median bond of active nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    medianActiveBond?: string;\n    /**\n     * Median bond of standby nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    medianStandbyBond?: string;\n    /**\n     * Minumum bond of active nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    minimumActiveBond?: string;\n    /**\n     * Minumum bond of standby nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    minimumStandbyBond?: string;\n    /**\n     * Total bond of active nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    totalActiveBond?: string;\n    /**\n     * Total bond of standby nodes\n     * @type {string}\n     * @memberof BondMetrics\n     */\n    totalStandbyBond?: string;\n}\n/**\n * \n * @export\n * @interface Coin\n */\nexport interface Coin {\n    /**\n     * \n     * @type {string}\n     * @memberof Coin\n     */\n    amount?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Coin\n     */\n    asset?: string;\n}\n/**\n * \n * @export\n * @interface Event\n */\nexport interface Event {\n    /**\n     * \n     * @type {string}\n     * @memberof Event\n     */\n    fee?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Event\n     */\n    slip?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Event\n     */\n    stakeUnits?: string;\n}\n/**\n * \n * @export\n * @interface Gas\n */\nexport interface Gas {\n    /**\n     * \n     * @type {string}\n     * @memberof Gas\n     */\n    amount?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Gas\n     */\n    asset?: string;\n}\n/**\n * \n * @export\n * @interface InlineResponse200\n */\nexport interface InlineResponse200 {\n    /**\n     * \n     * @type {boolean}\n     * @memberof InlineResponse200\n     */\n    catching_up?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof InlineResponse200\n     */\n    database?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof InlineResponse200\n     */\n    scannerHeight?: number;\n}\n/**\n * \n * @export\n * @interface InlineResponse2001\n */\nexport interface InlineResponse2001 {\n    /**\n     * \n     * @type {number}\n     * @memberof InlineResponse2001\n     */\n    count?: number;\n    /**\n     * \n     * @type {Array<TxDetails>}\n     * @memberof InlineResponse2001\n     */\n    txs?: Array<TxDetails>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    error: string;\n}\n/**\n * \n * @export\n * @interface NetworkInfo\n */\nexport interface NetworkInfo {\n    /**\n     * Array of Active Bonds\n     * @type {Array<string>}\n     * @memberof NetworkInfo\n     */\n    activeBonds?: Array<string>;\n    /**\n     * Number of Active Nodes\n     * @type {number}\n     * @memberof NetworkInfo\n     */\n    activeNodeCount?: number;\n    /**\n     * \n     * @type {BlockRewards}\n     * @memberof NetworkInfo\n     */\n    blockRewards?: BlockRewards;\n    /**\n     * \n     * @type {BondMetrics}\n     * @memberof NetworkInfo\n     */\n    bondMetrics?: BondMetrics;\n    /**\n     * (1 + (bondReward * blocksPerMonth/totalActiveBond)) ^ 12 -1\n     * @type {string}\n     * @memberof NetworkInfo\n     */\n    bondingAPY?: string;\n    /**\n     * (1 + (stakeReward * blocksPerMonth/totalDepth of active pools)) ^ 12 -1\n     * @type {string}\n     * @memberof NetworkInfo\n     */\n    liquidityAPY?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NetworkInfo\n     */\n    nextChurnHeight?: string;\n    /**\n     * The remaining time of pool activation (in blocks)\n     * @type {number}\n     * @memberof NetworkInfo\n     */\n    poolActivationCountdown?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof NetworkInfo\n     */\n    poolShareFactor?: string;\n    /**\n     * Array of Standby Bonds\n     * @type {Array<string>}\n     * @memberof NetworkInfo\n     */\n    standbyBonds?: Array<string>;\n    /**\n     * Number of Standby Nodes\n     * @type {number}\n     * @memberof NetworkInfo\n     */\n    standbyNodeCount?: number;\n    /**\n     * Total left in Reserve\n     * @type {string}\n     * @memberof NetworkInfo\n     */\n    totalReserve?: string;\n    /**\n     * Total Rune Staked in Pools\n     * @type {string}\n     * @memberof NetworkInfo\n     */\n    totalStaked?: string;\n}\n/**\n * \n * @export\n * @interface NodeKey\n */\nexport interface NodeKey {\n    /**\n     * ed25519 public key\n     * @type {string}\n     * @memberof NodeKey\n     */\n    ed25519?: string;\n    /**\n     * secp256k1 public key\n     * @type {string}\n     * @memberof NodeKey\n     */\n    secp256k1?: string;\n}\n/**\n * \n * @export\n * @interface Option\n */\nexport interface Option {\n    /**\n     * \n     * @type {string}\n     * @memberof Option\n     */\n    asymmetry?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Option\n     */\n    priceTarget?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Option\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Option\n     */\n    withdrawBasisPoints?: string;\n}\n/**\n * \n * @export\n * @interface PoolAggChanges\n */\nexport interface PoolAggChanges {\n    /**\n     * Total changes in asset depth at this time bucket\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    assetChanges?: string;\n    /**\n     * Depth of asset at the end of current time bucket\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    assetDepth?: string;\n    /**\n     * Total asset staked\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    assetStaked?: string;\n    /**\n     * Total asset withdrawn\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    assetWithdrawn?: string;\n    /**\n     * Count of buy swaps\n     * @type {number}\n     * @memberof PoolAggChanges\n     */\n    buyCount?: number;\n    /**\n     * Sum of \\\"rune_amount\\\" of buy swap events\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    buyVolume?: string;\n    /**\n     * Total amount of rune, paid by the network to neutralize \\\"gasUsed\\\" changes\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    gasReplenished?: string;\n    /**\n     * Total amount of asset used as gas for network transactions (e.g. BNB.BNB, ETH.ETH)\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    gasUsed?: string;\n    /**\n     * buyVolume + sellVolume\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    poolVolume?: string;\n    /**\n     * Asset price in rune at the end of current time bucket\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    price?: string;\n    /**\n     * Sum of \\\"rewards\\\" events in rune\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    reward?: string;\n    /**\n     * Total changes in rune depth at this time bucket\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    runeChanges?: string;\n    /**\n     * Depth of rune at the end of current time bucket\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    runeDepth?: string;\n    /**\n     * Total rune staked\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    runeStaked?: string;\n    /**\n     * Total rune withdrawn\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    runeWithdrawn?: string;\n    /**\n     * Count of sell swaps\n     * @type {number}\n     * @memberof PoolAggChanges\n     */\n    sellCount?: number;\n    /**\n     * Sum of \\\"rune_amount\\\" of sell swap events\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    sellVolume?: string;\n    /**\n     * Count of stake events\n     * @type {number}\n     * @memberof PoolAggChanges\n     */\n    stakeCount?: number;\n    /**\n     * Determining end of current time bucket in unix timestamp\n     * @type {number}\n     * @memberof PoolAggChanges\n     */\n    time?: number;\n    /**\n     * Total changes in pool units (stakes/withdraws)\n     * @type {string}\n     * @memberof PoolAggChanges\n     */\n    unitsChanges?: string;\n    /**\n     * Count of withdraw events\n     * @type {number}\n     * @memberof PoolAggChanges\n     */\n    withdrawCount?: number;\n}\n/**\n * \n * @export\n * @interface PoolDetail\n */\nexport interface PoolDetail {\n    /**\n     * \n     * @type {string}\n     * @memberof PoolDetail\n     */\n    asset?: string;\n    /**\n     * Total current Asset balance\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    assetDepth?: string;\n    /**\n     * Amount of pool asset balance changed by fee, gas and assset donation\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    assetEarned?: string;\n    /**\n     * Total Asset staked\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    assetStakedTotal?: string;\n    /**\n     * Number of RUNE->ASSET transactions\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    buyAssetCount?: string;\n    /**\n     * Average sell Asset fee size for RUNE->ASSET (in ASSET)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    buyFeeAverage?: string;\n    /**\n     * Total fees (in Asset)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    buyFeesTotal?: string;\n    /**\n     * Average trade slip for RUNE->ASSET in %\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    buySlipAverage?: string;\n    /**\n     * Average Asset buy transaction size for (RUNE->ASSET) (in ASSET)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    buyTxAverage?: string;\n    /**\n     * Total Asset buy volume (RUNE->ASSET) (in RUNE)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    buyVolume?: string;\n    /**\n     * (1 + (poolEarned/poolDepth)) ^ 12 -1\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolAPY?: string;\n    /**\n     * Total depth of both sides (in RUNE)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolDepth?: string;\n    /**\n     * (assetEarned * price) + runeEarned\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolEarned?: string;\n    /**\n     * Average pool fee\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolFeeAverage?: string;\n    /**\n     * Total fees\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolFeesTotal?: string;\n    /**\n     * Average pool slip\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolSlipAverage?: string;\n    /**\n     * Rune value staked Total\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolStakedTotal?: string;\n    /**\n     * Average pool transaction\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolTxAverage?: string;\n    /**\n     * Total pool units outstanding\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolUnits?: string;\n    /**\n     * Two-way volume of all-time (in RUNE)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolVolume?: string;\n    /**\n     * Two-way volume in 24hrs (in RUNE)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    poolVolume24hr?: string;\n    /**\n     * Price of Asset (in RUNE).\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    price?: string;\n    /**\n     * Total current Rune balance\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    runeDepth?: string;\n    /**\n     * Amount of pool rune balance changed by fee,reward, deficit, gas and rune donation\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    runeEarned?: string;\n    /**\n     * Total RUNE staked\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    runeStakedTotal?: string;\n    /**\n     * Number of ASSET->RUNE transactions\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    sellAssetCount?: string;\n    /**\n     * Average buy Asset fee size for ASSET->RUNE (in RUNE)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    sellFeeAverage?: string;\n    /**\n     * Total fees (in RUNE)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    sellFeesTotal?: string;\n    /**\n     * Average trade slip for ASSET->RUNE in %\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    sellSlipAverage?: string;\n    /**\n     * Average Asset sell transaction size (ASSET>RUNE) (in RUNE)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    sellTxAverage?: string;\n    /**\n     * Total Asset sell volume (ASSET>RUNE) (in RUNE).\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    sellVolume?: string;\n    /**\n     * Number of stake transactions\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    stakeTxCount?: string;\n    /**\n     * Number of unique stakers\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    stakersCount?: string;\n    /**\n     * Number of stake & withdraw transactions\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    stakingTxCount?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PoolDetail\n     */\n    status?: PoolDetailStatusEnum;\n    /**\n     * Number of unique swappers interacting with pool\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    swappersCount?: string;\n    /**\n     * Number of swapping transactions in the pool (buys and sells)\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    swappingTxCount?: string;\n    /**\n     * Number of withdraw transactions\n     * @type {string}\n     * @memberof PoolDetail\n     */\n    withdrawTxCount?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PoolDetailStatusEnum {\n    Bootstrapped = 'bootstrapped',\n    Enabled = 'enabled',\n    Disabled = 'disabled'\n}\n\n/**\n * \n * @export\n * @interface PoolEarningDetail\n */\nexport interface PoolEarningDetail {\n    /**\n     * number of days that pool was enabled in past 30 days\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthActiveDays?: string;\n    /**\n     * sum of asset donated to the pool by add event in past 30 days\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthAssetDonation?: string;\n    /**\n     * sum of buy fee in rune in past 30 days\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthBuyFee?: string;\n    /**\n     * sum of gas paid from asset of this pool in past 30 days\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthGasPaid?: string;\n    /**\n     * sum of gas reimbursed to rune of this pool in past 30 days\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthGasReimbursed?: string;\n    /**\n     * sum of pool deficit in reward event in past 30 days\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthPoolDeficit?: string;\n    /**\n     * sum of donation to this pool in past 30 days (lastMonthAssetDonation*price + lastMonthRuneDonation)\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthPoolDonation?: string;\n    /**\n     * sum of pool Earning in past 30 days (lastMonthPoolDonation + lastMonthPoolFee + lastMonthReward + lastMonthPoolDeficit + lastMonthGasReimbursed - (lastMonthGasPaid * price))\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthPoolEarning?: string;\n    /**\n     * sum of pool sell fee in rune in past 30 days (lastMonthBuyFee+lastMonthSellFee)\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthPoolFee?: string;\n    /**\n     * sum of rewards in reward event in past 30 days\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthReward?: string;\n    /**\n     * sum of rune donated to the pool by add event in past 30 days\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthRuneDonation?: string;\n    /**\n     * sum of sell fee in rune in past 30 days\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    lastMonthSellFee?: string;\n    /**\n     * lastMonthPoolEarning/poolDepth (lastMonthPoolEarning may extrapolate if pool was active less than 30 days)\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    periodicRate?: string;\n    /**\n     * pool name\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    pool?: string;\n    /**\n     * (1 + periodicRate ) ^ 12 -1\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    poolAPY?: string;\n    /**\n     * pool depth (2 * rune depth)\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    poolDepth?: string;\n    /**\n     * pool price in rune\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    price?: string;\n    /**\n     * sum of asset donated to the pool by add event\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalAssetDonation?: string;\n    /**\n     * sum of buy fee in rune\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalBuyFee?: string;\n    /**\n     * sum of gas paid from asset of this pool\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalGasPaid?: string;\n    /**\n     * sum of gas reimbursed to rune of this pool\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalGasReimbursed?: string;\n    /**\n     * sum of pool deficit in reward event\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalPoolDeficit?: string;\n    /**\n     * sum of donation to this pool (totalAssetDonation*price + totalRuneDonation)\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalPoolDonation?: string;\n    /**\n     * sum of pool Earning (totalPoolDonation+totalPoolFee + totalReward + totalPoolDeficit + totalGasReimbursed - (totalGasPaid * price))\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalPoolEarning?: string;\n    /**\n     * sum of pool sell fee in rune (sellFee+buyFee)\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalPoolFee?: string;\n    /**\n     * sum of rewards in reward event\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalReward?: string;\n    /**\n     * sum of rune donated to the pool by add event\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalRuneDonation?: string;\n    /**\n     * sum of sell fee in rune\n     * @type {string}\n     * @memberof PoolEarningDetail\n     */\n    totalSellFee?: string;\n}\n/**\n * \n * @export\n * @interface StakersAddressData\n */\nexport interface StakersAddressData {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof StakersAddressData\n     */\n    poolsArray?: Array<string>;\n    /**\n     * Total value of earnings (in RUNE) across all pools.\n     * @type {string}\n     * @memberof StakersAddressData\n     */\n    totalEarned?: string;\n    /**\n     * Average of all pool ROIs.\n     * @type {string}\n     * @memberof StakersAddressData\n     */\n    totalROI?: string;\n    /**\n     * Total staked (in RUNE) across all pools.\n     * @type {string}\n     * @memberof StakersAddressData\n     */\n    totalStaked?: string;\n}\n/**\n * \n * @export\n * @interface StakersAssetData\n */\nexport interface StakersAssetData {\n    /**\n     * \n     * @type {string}\n     * @memberof StakersAssetData\n     */\n    asset?: string;\n    /**\n     * Total of assets staked\n     * @type {string}\n     * @memberof StakersAssetData\n     */\n    assetStaked?: string;\n    /**\n     * Total of assets withdrawn\n     * @type {string}\n     * @memberof StakersAssetData\n     */\n    assetWithdrawn?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof StakersAssetData\n     */\n    dateFirstStaked?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof StakersAssetData\n     */\n    heightLastStaked?: number;\n    /**\n     * Total of rune staked\n     * @type {string}\n     * @memberof StakersAssetData\n     */\n    runeStaked?: string;\n    /**\n     * Total of rune withdrawn\n     * @type {string}\n     * @memberof StakersAssetData\n     */\n    runeWithdrawn?: string;\n    /**\n     * Represents ownership of a pool.\n     * @type {string}\n     * @memberof StakersAssetData\n     */\n    units?: string;\n}\n/**\n * \n * @export\n * @interface StatsChanges\n */\nexport interface StatsChanges {\n    /**\n     * Count of buy swaps\n     * @type {number}\n     * @memberof StatsChanges\n     */\n    buyCount?: number;\n    /**\n     * Sum of \\\"rune_amount\\\" of buy swap events\n     * @type {string}\n     * @memberof StatsChanges\n     */\n    buyVolume?: string;\n    /**\n     * Determining end height of current time bucket\n     * @type {number}\n     * @memberof StatsChanges\n     */\n    endHeight?: number;\n    /**\n     * Count of sell swaps\n     * @type {number}\n     * @memberof StatsChanges\n     */\n    sellCount?: number;\n    /**\n     * Sum of \\\"rune_amount\\\" of sell swap events\n     * @type {string}\n     * @memberof StatsChanges\n     */\n    sellVolume?: string;\n    /**\n     * Count of stake events\n     * @type {number}\n     * @memberof StatsChanges\n     */\n    stakeCount?: number;\n    /**\n     * Determining start height of current time bucket\n     * @type {number}\n     * @memberof StatsChanges\n     */\n    startHeight?: number;\n    /**\n     * Determining end of current time bucket in unix timestamp\n     * @type {number}\n     * @memberof StatsChanges\n     */\n    time?: number;\n    /**\n     * Total deficit of all pools in the current time bucket\n     * @type {string}\n     * @memberof StatsChanges\n     */\n    totalDeficit?: string;\n    /**\n     * Total reward of all pools in the current time bucket\n     * @type {string}\n     * @memberof StatsChanges\n     */\n    totalReward?: string;\n    /**\n     * Total rune depth of all pools at the end of current time bucket\n     * @type {string}\n     * @memberof StatsChanges\n     */\n    totalRuneDepth?: string;\n    /**\n     * buyVolume + sellVolume\n     * @type {string}\n     * @memberof StatsChanges\n     */\n    totalVolume?: string;\n    /**\n     * Count of withdraw events\n     * @type {number}\n     * @memberof StatsChanges\n     */\n    withdrawCount?: number;\n}\n/**\n * \n * @export\n * @interface StatsData\n */\nexport interface StatsData {\n    /**\n     * Daily active users (unique addresses interacting)\n     * @type {string}\n     * @memberof StatsData\n     */\n    dailyActiveUsers?: string;\n    /**\n     * Daily transactions\n     * @type {string}\n     * @memberof StatsData\n     */\n    dailyTx?: string;\n    /**\n     * Monthly active users\n     * @type {string}\n     * @memberof StatsData\n     */\n    monthlyActiveUsers?: string;\n    /**\n     * Monthly transactions\n     * @type {string}\n     * @memberof StatsData\n     */\n    monthlyTx?: string;\n    /**\n     * Number of active pools\n     * @type {string}\n     * @memberof StatsData\n     */\n    poolCount?: string;\n    /**\n     * Total buying transactions\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalAssetBuys?: string;\n    /**\n     * Total selling transactions\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalAssetSells?: string;\n    /**\n     * Total RUNE balances\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalDepth?: string;\n    /**\n     * Total earned (in RUNE Value).\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalEarned?: string;\n    /**\n     * Total staking transactions\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalStakeTx?: string;\n    /**\n     * Total staked (in RUNE Value).\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalStaked?: string;\n    /**\n     * Total transactions\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalTx?: string;\n    /**\n     * Total unique swappers & stakers\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalUsers?: string;\n    /**\n     * Total (in RUNE Value) of all assets swapped since start.\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalVolume?: string;\n    /**\n     * Total (in RUNE Value) of all assets swapped in 24hrs\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalVolume24hr?: string;\n    /**\n     * Total withdrawing transactions\n     * @type {string}\n     * @memberof StatsData\n     */\n    totalWithdrawTx?: string;\n}\n/**\n * \n * @export\n * @interface ThorchainBooleanConstants\n */\nexport interface ThorchainBooleanConstants {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ThorchainBooleanConstants\n     */\n    StrictBondStakeRatio?: boolean;\n}\n/**\n * \n * @export\n * @interface ThorchainConstants\n */\nexport interface ThorchainConstants {\n    /**\n     * \n     * @type {ThorchainBooleanConstants}\n     * @memberof ThorchainConstants\n     */\n    bool_values?: ThorchainBooleanConstants;\n    /**\n     * \n     * @type {ThorchainInt64Constants}\n     * @memberof ThorchainConstants\n     */\n    int_64_values?: ThorchainInt64Constants;\n    /**\n     * \n     * @type {ThorchainStringConstants}\n     * @memberof ThorchainConstants\n     */\n    string_values?: ThorchainStringConstants;\n}\n/**\n * \n * @export\n * @interface ThorchainEndpoint\n */\nexport interface ThorchainEndpoint {\n    /**\n     * \n     * @type {string}\n     * @memberof ThorchainEndpoint\n     */\n    address?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ThorchainEndpoint\n     */\n    chain?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ThorchainEndpoint\n     */\n    pub_key?: string;\n}\n/**\n * \n * @export\n * @interface ThorchainEndpoints\n */\nexport interface ThorchainEndpoints {\n    /**\n     * \n     * @type {Array<ThorchainEndpoint>}\n     * @memberof ThorchainEndpoints\n     */\n    current?: Array<ThorchainEndpoint>;\n}\n/**\n * \n * @export\n * @interface ThorchainInt64Constants\n */\nexport interface ThorchainInt64Constants {\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    BadValidatorRate?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    BlocksPerYear?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    DesireValidatorSet?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    DoubleSignMaxAge?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    EmissionCurve?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    FailKeySignSlashPoints?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    FailKeygenSlashPoints?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    FundMigrationInterval?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    JailTimeKeygen?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    JailTimeKeysign?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    LackOfObservationPenalty?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    MinimumBondInRune?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    MinimumNodesForBFT?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    MinimumNodesForYggdrasil?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    NewPoolCycle?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    ObserveSlashPoints?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    OldValidatorRate?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    RotatePerBlockHeight?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    RotateRetryBlocks?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    SigningTransactionPeriod?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    StakeLockUpBlocks?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    TransactionFee?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    ValidatorRotateInNumBeforeFull?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    ValidatorRotateNumAfterFull?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    ValidatorRotateOutNumBeforeFull?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    WhiteListGasAsset?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainInt64Constants\n     */\n    YggFundLimit?: number;\n}\n/**\n * \n * @export\n * @interface ThorchainLastblock\n */\nexport interface ThorchainLastblock {\n    /**\n     * \n     * @type {string}\n     * @memberof ThorchainLastblock\n     */\n    chain?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainLastblock\n     */\n    lastobservedin?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainLastblock\n     */\n    lastsignedout?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainLastblock\n     */\n    thorchain?: number;\n}\n/**\n * \n * @export\n * @interface ThorchainQueue\n */\nexport interface ThorchainQueue {\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainQueue\n     */\n    outbound?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ThorchainQueue\n     */\n    swap?: number;\n}\n/**\n * \n * @export\n * @interface ThorchainStringConstants\n */\nexport interface ThorchainStringConstants {\n    /**\n     * \n     * @type {string}\n     * @memberof ThorchainStringConstants\n     */\n    DefaultPoolStatus?: string;\n}\n/**\n * \n * @export\n * @interface TotalVolChanges\n */\nexport interface TotalVolChanges {\n    /**\n     * Sum of \\\"rune_amount\\\" of buy swap events\n     * @type {string}\n     * @memberof TotalVolChanges\n     */\n    buyVolume?: string;\n    /**\n     * Sum of \\\"rune_amount\\\" of sell swap events\n     * @type {string}\n     * @memberof TotalVolChanges\n     */\n    sellVolume?: string;\n    /**\n     * Determining end of current time bucket in unix timestamp\n     * @type {number}\n     * @memberof TotalVolChanges\n     */\n    time?: number;\n    /**\n     * buyVolume + sellVolume\n     * @type {string}\n     * @memberof TotalVolChanges\n     */\n    totalVolume?: string;\n}\n/**\n * \n * @export\n * @interface Tx\n */\nexport interface Tx {\n    /**\n     * \n     * @type {string}\n     * @memberof Tx\n     */\n    address?: string;\n    /**\n     * \n     * @type {Array<Coin>}\n     * @memberof Tx\n     */\n    coins?: Array<Coin>;\n    /**\n     * \n     * @type {string}\n     * @memberof Tx\n     */\n    memo?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Tx\n     */\n    txID?: string;\n}\n/**\n * \n * @export\n * @interface TxDetails\n */\nexport interface TxDetails {\n    /**\n     * \n     * @type {number}\n     * @memberof TxDetails\n     */\n    date?: number;\n    /**\n     * \n     * @type {Event}\n     * @memberof TxDetails\n     */\n    events?: Event;\n    /**\n     * \n     * @type {Gas}\n     * @memberof TxDetails\n     */\n    gas?: Gas;\n    /**\n     * \n     * @type {string}\n     * @memberof TxDetails\n     */\n    height?: string;\n    /**\n     * \n     * @type {Tx}\n     * @memberof TxDetails\n     */\n    _in?: Tx;\n    ['in']?: Tx;\n    /**\n     * \n     * @type {Option}\n     * @memberof TxDetails\n     */\n    options?: Option;\n    /**\n     * \n     * @type {Array<Tx>}\n     * @memberof TxDetails\n     */\n    out?: Array<Tx>;\n    /**\n     * \n     * @type {string}\n     * @memberof TxDetails\n     */\n    pool?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TxDetails\n     */\n    status?: TxDetailsStatusEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof TxDetails\n     */\n    type?: TxDetailsTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TxDetailsStatusEnum {\n    Success = 'Success',\n    Refund = 'refund',\n    Pending = 'Pending'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum TxDetailsTypeEnum {\n    Swap = 'swap',\n    Stake = 'stake',\n    Unstake = 'unstake',\n    Rewards = 'rewards',\n    Add = 'add',\n    Pool = 'pool',\n    Gas = 'gas',\n    Refund = 'refund',\n    DoubleSwap = 'doubleSwap'\n}\n\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price.\n         * @summary Get Asset Information\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetInfo: async (asset: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'asset' is not null or undefined\n            assertParamExists('getAssetInfo', 'asset', asset)\n            const localVarPath = `/v1/assets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (asset !== undefined) {\n                localVarQueryParameter['asset'] = asset;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns earning report and apy of the specified pool.\n         * @summary Get Pool Earning Detail\n         * @param {string} pool Pool asset name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEarningDetail: async (pool: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pool' is not null or undefined\n            assertParamExists('getEarningDetail', 'pool', pool)\n            const localVarPath = `/v1/pools/details/{pool}/earnings`\n                .replace(`{${\"pool\"}}`, encodeURIComponent(String(pool)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an object containing the health response of the API.\n         * @summary Get Health\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getHealth: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/health`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an object containing Network data\n         * @summary Get Network Data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNetworkData: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/network`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an object containing Node public keys\n         * @summary Get Node public keys\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNodes: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/nodes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns historical aggregated details of the specified pool.\n         * @summary Get Pool Aggregated Changes\n         * @param {string} pool Pool asset name\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n         * @param {number} from Start time of the query as unix timestamp\n         * @param {number} to End time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPoolAggChanges: async (pool: string, interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pool' is not null or undefined\n            assertParamExists('getPoolAggChanges', 'pool', pool)\n            // verify required parameter 'interval' is not null or undefined\n            assertParamExists('getPoolAggChanges', 'interval', interval)\n            // verify required parameter 'from' is not null or undefined\n            assertParamExists('getPoolAggChanges', 'from', from)\n            // verify required parameter 'to' is not null or undefined\n            assertParamExists('getPoolAggChanges', 'to', to)\n            const localVarPath = `/v1/history/pools`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (pool !== undefined) {\n                localVarQueryParameter['pool'] = pool;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = from;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = to;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array containing all the assets supported on BEPSwap pools\n         * @summary Get Asset Pools\n         * @param {'enabled' | 'bootstrap' | 'suspended'} [status] Pool status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPools: async (status?: 'enabled' | 'bootstrap' | 'suspended', options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/pools`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (status !== undefined) {\n                localVarQueryParameter['status'] = status;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an object containing all the pool details for that asset.\n         * @summary Get Pools Details\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n         * @param {'balances' | 'simple' | 'full'} [view] Specifies the returning view\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPoolsDetails: async (asset: string, view?: 'balances' | 'simple' | 'full', options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'asset' is not null or undefined\n            assertParamExists('getPoolsDetails', 'asset', asset)\n            const localVarPath = `/v1/pools/detail`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (view !== undefined) {\n                localVarQueryParameter['view'] = view;\n            }\n\n            if (asset !== undefined) {\n                localVarQueryParameter['asset'] = asset;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an object containing staking data for the specified staker and pool.\n         * @summary Get Staker Pool Data\n         * @param {string} address Unique staker address\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakersAddressAndAssetData: async (address: string, asset: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'address' is not null or undefined\n            assertParamExists('getStakersAddressAndAssetData', 'address', address)\n            // verify required parameter 'asset' is not null or undefined\n            assertParamExists('getStakersAddressAndAssetData', 'asset', asset)\n            const localVarPath = `/v1/stakers/{address}/pools`\n                .replace(`{${\"address\"}}`, encodeURIComponent(String(address)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (asset !== undefined) {\n                localVarQueryParameter['asset'] = asset;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array containing all the pools the staker is staking in.\n         * @summary Get Staker Data\n         * @param {string} address Unique staker address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakersAddressData: async (address: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'address' is not null or undefined\n            assertParamExists('getStakersAddressData', 'address', address)\n            const localVarPath = `/v1/stakers/{address}`\n                .replace(`{${\"address\"}}`, encodeURIComponent(String(address)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an array containing the addresses for all stakers.\n         * @summary Get Stakers\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakersData: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/stakers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns an object containing global stats for all pools and all transactions.\n         * @summary Get Global Stats\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStats: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/stats`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns stats and total changes of all pools in specified interval\n         * @summary Get Stats Changes\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n         * @param {number} from Start time of the query as unix timestamp\n         * @param {number} to End time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatsChanges: async (interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'interval' is not null or undefined\n            assertParamExists('getStatsChanges', 'interval', interval)\n            // verify required parameter 'from' is not null or undefined\n            assertParamExists('getStatsChanges', 'from', from)\n            // verify required parameter 'to' is not null or undefined\n            assertParamExists('getStatsChanges', 'to', to)\n            const localVarPath = `/v1/history/stats`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = from;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = to;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a proxied endpoint for the constants endpoint from a local thornode\n         * @summary Get the Proxied THORChain Constants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThorchainProxiedConstants: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/thorchain/constants`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode\n         * @summary Get the Proxied Pool Addresses\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThorchainProxiedEndpoints: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/thorchain/pool_addresses`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a proxied endpoint for the lastblock endpoint from a local thornode\n         * @summary Get the Proxied THORChain Lastblock\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThorchainProxiedLastblock: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/thorchain/lastblock`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a proxied endpoint for the queue endpoint from a local thornode\n         * @summary Get the Proxied THORChain Queue\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThorchainProxiedQueue: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/thorchain/queue`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns total volume changes of all pools in specified interval\n         * @summary Get Total Volume Changes\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n         * @param {number} from Start time of the query as unix timestamp\n         * @param {number} to End time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTotalVolChanges: async (interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'interval' is not null or undefined\n            assertParamExists('getTotalVolChanges', 'interval', interval)\n            // verify required parameter 'from' is not null or undefined\n            assertParamExists('getTotalVolChanges', 'from', from)\n            // verify required parameter 'to' is not null or undefined\n            assertParamExists('getTotalVolChanges', 'to', to)\n            const localVarPath = `/v1/history/total_volume`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (from !== undefined) {\n                localVarQueryParameter['from'] = from;\n            }\n\n            if (to !== undefined) {\n                localVarQueryParameter['to'] = to;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Return an array containing the event details\n         * @summary Get details of a tx by address, asset or tx-id\n         * @param {number} offset pagination offset\n         * @param {number} limit pagination limit\n         * @param {string} [address] Address of sender or recipient of any in/out tx in event\n         * @param {string} [txid] ID of any in/out tx in event\n         * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)\n         * @param {string} [type] One or more comma separated unique types of event\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTxDetails: async (offset: number, limit: number, address?: string, txid?: string, asset?: string, type?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'offset' is not null or undefined\n            assertParamExists('getTxDetails', 'offset', offset)\n            // verify required parameter 'limit' is not null or undefined\n            assertParamExists('getTxDetails', 'limit', limit)\n            const localVarPath = `/v1/txs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (address !== undefined) {\n                localVarQueryParameter['address'] = address;\n            }\n\n            if (txid !== undefined) {\n                localVarQueryParameter['txid'] = txid;\n            }\n\n            if (asset !== undefined) {\n                localVarQueryParameter['asset'] = asset;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price.\n         * @summary Get Asset Information\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAssetInfo(asset: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssetDetail>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetInfo(asset, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns earning report and apy of the specified pool.\n         * @summary Get Pool Earning Detail\n         * @param {string} pool Pool asset name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEarningDetail(pool: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PoolEarningDetail>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEarningDetail(pool, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an object containing the health response of the API.\n         * @summary Get Health\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getHealth(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getHealth(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an object containing Network data\n         * @summary Get Network Data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getNetworkData(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkInfo>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getNetworkData(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an object containing Node public keys\n         * @summary Get Node public keys\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getNodes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NodeKey>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodes(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns historical aggregated details of the specified pool.\n         * @summary Get Pool Aggregated Changes\n         * @param {string} pool Pool asset name\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n         * @param {number} from Start time of the query as unix timestamp\n         * @param {number} to End time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPoolAggChanges(pool: string, interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PoolAggChanges>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPoolAggChanges(pool, interval, from, to, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an array containing all the assets supported on BEPSwap pools\n         * @summary Get Asset Pools\n         * @param {'enabled' | 'bootstrap' | 'suspended'} [status] Pool status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPools(status?: 'enabled' | 'bootstrap' | 'suspended', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPools(status, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an object containing all the pool details for that asset.\n         * @summary Get Pools Details\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n         * @param {'balances' | 'simple' | 'full'} [view] Specifies the returning view\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPoolsDetails(asset: string, view?: 'balances' | 'simple' | 'full', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PoolDetail>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPoolsDetails(asset, view, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an object containing staking data for the specified staker and pool.\n         * @summary Get Staker Pool Data\n         * @param {string} address Unique staker address\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getStakersAddressAndAssetData(address: string, asset: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StakersAssetData>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getStakersAddressAndAssetData(address, asset, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an array containing all the pools the staker is staking in.\n         * @summary Get Staker Data\n         * @param {string} address Unique staker address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getStakersAddressData(address: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StakersAddressData>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getStakersAddressData(address, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an array containing the addresses for all stakers.\n         * @summary Get Stakers\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getStakersData(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getStakersData(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns an object containing global stats for all pools and all transactions.\n         * @summary Get Global Stats\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getStats(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsData>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getStats(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns stats and total changes of all pools in specified interval\n         * @summary Get Stats Changes\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n         * @param {number} from Start time of the query as unix timestamp\n         * @param {number} to End time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getStatsChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StatsChanges>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatsChanges(interval, from, to, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a proxied endpoint for the constants endpoint from a local thornode\n         * @summary Get the Proxied THORChain Constants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThorchainProxiedConstants(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThorchainConstants>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThorchainProxiedConstants(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode\n         * @summary Get the Proxied Pool Addresses\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThorchainProxiedEndpoints(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThorchainEndpoints>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThorchainProxiedEndpoints(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a proxied endpoint for the lastblock endpoint from a local thornode\n         * @summary Get the Proxied THORChain Lastblock\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThorchainProxiedLastblock(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThorchainLastblock>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThorchainProxiedLastblock(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a proxied endpoint for the queue endpoint from a local thornode\n         * @summary Get the Proxied THORChain Queue\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getThorchainProxiedQueue(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThorchainQueue>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getThorchainProxiedQueue(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns total volume changes of all pools in specified interval\n         * @summary Get Total Volume Changes\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n         * @param {number} from Start time of the query as unix timestamp\n         * @param {number} to End time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTotalVolChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TotalVolChanges>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTotalVolChanges(interval, from, to, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Return an array containing the event details\n         * @summary Get details of a tx by address, asset or tx-id\n         * @param {number} offset pagination offset\n         * @param {number} limit pagination limit\n         * @param {string} [address] Address of sender or recipient of any in/out tx in event\n         * @param {string} [txid] ID of any in/out tx in event\n         * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)\n         * @param {string} [type] One or more comma separated unique types of event\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getTxDetails(offset: number, limit: number, address?: string, txid?: string, asset?: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getTxDetails(offset, limit, address, txid, asset, type, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price.\n         * @summary Get Asset Information\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAssetInfo(asset: string, options?: any): AxiosPromise<Array<AssetDetail>> {\n            return localVarFp.getAssetInfo(asset, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns earning report and apy of the specified pool.\n         * @summary Get Pool Earning Detail\n         * @param {string} pool Pool asset name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEarningDetail(pool: string, options?: any): AxiosPromise<PoolEarningDetail> {\n            return localVarFp.getEarningDetail(pool, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an object containing the health response of the API.\n         * @summary Get Health\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getHealth(options?: any): AxiosPromise<InlineResponse200> {\n            return localVarFp.getHealth(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an object containing Network data\n         * @summary Get Network Data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNetworkData(options?: any): AxiosPromise<NetworkInfo> {\n            return localVarFp.getNetworkData(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an object containing Node public keys\n         * @summary Get Node public keys\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNodes(options?: any): AxiosPromise<Array<NodeKey>> {\n            return localVarFp.getNodes(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns historical aggregated details of the specified pool.\n         * @summary Get Pool Aggregated Changes\n         * @param {string} pool Pool asset name\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n         * @param {number} from Start time of the query as unix timestamp\n         * @param {number} to End time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPoolAggChanges(pool: string, interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): AxiosPromise<Array<PoolAggChanges>> {\n            return localVarFp.getPoolAggChanges(pool, interval, from, to, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an array containing all the assets supported on BEPSwap pools\n         * @summary Get Asset Pools\n         * @param {'enabled' | 'bootstrap' | 'suspended'} [status] Pool status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPools(status?: 'enabled' | 'bootstrap' | 'suspended', options?: any): AxiosPromise<Array<string>> {\n            return localVarFp.getPools(status, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an object containing all the pool details for that asset.\n         * @summary Get Pools Details\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n         * @param {'balances' | 'simple' | 'full'} [view] Specifies the returning view\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPoolsDetails(asset: string, view?: 'balances' | 'simple' | 'full', options?: any): AxiosPromise<Array<PoolDetail>> {\n            return localVarFp.getPoolsDetails(asset, view, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an object containing staking data for the specified staker and pool.\n         * @summary Get Staker Pool Data\n         * @param {string} address Unique staker address\n         * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakersAddressAndAssetData(address: string, asset: string, options?: any): AxiosPromise<Array<StakersAssetData>> {\n            return localVarFp.getStakersAddressAndAssetData(address, asset, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an array containing all the pools the staker is staking in.\n         * @summary Get Staker Data\n         * @param {string} address Unique staker address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakersAddressData(address: string, options?: any): AxiosPromise<StakersAddressData> {\n            return localVarFp.getStakersAddressData(address, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an array containing the addresses for all stakers.\n         * @summary Get Stakers\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStakersData(options?: any): AxiosPromise<Array<string>> {\n            return localVarFp.getStakersData(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns an object containing global stats for all pools and all transactions.\n         * @summary Get Global Stats\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStats(options?: any): AxiosPromise<StatsData> {\n            return localVarFp.getStats(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns stats and total changes of all pools in specified interval\n         * @summary Get Stats Changes\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n         * @param {number} from Start time of the query as unix timestamp\n         * @param {number} to End time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatsChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): AxiosPromise<Array<StatsChanges>> {\n            return localVarFp.getStatsChanges(interval, from, to, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a proxied endpoint for the constants endpoint from a local thornode\n         * @summary Get the Proxied THORChain Constants\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThorchainProxiedConstants(options?: any): AxiosPromise<ThorchainConstants> {\n            return localVarFp.getThorchainProxiedConstants(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode\n         * @summary Get the Proxied Pool Addresses\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThorchainProxiedEndpoints(options?: any): AxiosPromise<ThorchainEndpoints> {\n            return localVarFp.getThorchainProxiedEndpoints(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a proxied endpoint for the lastblock endpoint from a local thornode\n         * @summary Get the Proxied THORChain Lastblock\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThorchainProxiedLastblock(options?: any): AxiosPromise<ThorchainLastblock> {\n            return localVarFp.getThorchainProxiedLastblock(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a proxied endpoint for the queue endpoint from a local thornode\n         * @summary Get the Proxied THORChain Queue\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getThorchainProxiedQueue(options?: any): AxiosPromise<ThorchainQueue> {\n            return localVarFp.getThorchainProxiedQueue(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns total volume changes of all pools in specified interval\n         * @summary Get Total Volume Changes\n         * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n         * @param {number} from Start time of the query as unix timestamp\n         * @param {number} to End time of the query as unix timestamp\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTotalVolChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any): AxiosPromise<Array<TotalVolChanges>> {\n            return localVarFp.getTotalVolChanges(interval, from, to, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Return an array containing the event details\n         * @summary Get details of a tx by address, asset or tx-id\n         * @param {number} offset pagination offset\n         * @param {number} limit pagination limit\n         * @param {string} [address] Address of sender or recipient of any in/out tx in event\n         * @param {string} [txid] ID of any in/out tx in event\n         * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)\n         * @param {string} [type] One or more comma separated unique types of event\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getTxDetails(offset: number, limit: number, address?: string, txid?: string, asset?: string, type?: string, options?: any): AxiosPromise<InlineResponse2001> {\n            return localVarFp.getTxDetails(offset, limit, address, txid, asset, type, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Detailed information about a specific asset. Returns enough information to display a unique asset in various user interfaces, including latest price.\n     * @summary Get Asset Information\n     * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getAssetInfo(asset: string, options?: any) {\n        return DefaultApiFp(this.configuration).getAssetInfo(asset, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns earning report and apy of the specified pool.\n     * @summary Get Pool Earning Detail\n     * @param {string} pool Pool asset name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getEarningDetail(pool: string, options?: any) {\n        return DefaultApiFp(this.configuration).getEarningDetail(pool, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an object containing the health response of the API.\n     * @summary Get Health\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getHealth(options?: any) {\n        return DefaultApiFp(this.configuration).getHealth(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an object containing Network data\n     * @summary Get Network Data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getNetworkData(options?: any) {\n        return DefaultApiFp(this.configuration).getNetworkData(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an object containing Node public keys\n     * @summary Get Node public keys\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getNodes(options?: any) {\n        return DefaultApiFp(this.configuration).getNodes(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns historical aggregated details of the specified pool.\n     * @summary Get Pool Aggregated Changes\n     * @param {string} pool Pool asset name\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n     * @param {number} from Start time of the query as unix timestamp\n     * @param {number} to End time of the query as unix timestamp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPoolAggChanges(pool: string, interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any) {\n        return DefaultApiFp(this.configuration).getPoolAggChanges(pool, interval, from, to, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an array containing all the assets supported on BEPSwap pools\n     * @summary Get Asset Pools\n     * @param {'enabled' | 'bootstrap' | 'suspended'} [status] Pool status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPools(status?: 'enabled' | 'bootstrap' | 'suspended', options?: any) {\n        return DefaultApiFp(this.configuration).getPools(status, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an object containing all the pool details for that asset.\n     * @summary Get Pools Details\n     * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n     * @param {'balances' | 'simple' | 'full'} [view] Specifies the returning view\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getPoolsDetails(asset: string, view?: 'balances' | 'simple' | 'full', options?: any) {\n        return DefaultApiFp(this.configuration).getPoolsDetails(asset, view, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an object containing staking data for the specified staker and pool.\n     * @summary Get Staker Pool Data\n     * @param {string} address Unique staker address\n     * @param {string} asset One or more comma separated unique asset (CHAIN.SYMBOL)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getStakersAddressAndAssetData(address: string, asset: string, options?: any) {\n        return DefaultApiFp(this.configuration).getStakersAddressAndAssetData(address, asset, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an array containing all the pools the staker is staking in.\n     * @summary Get Staker Data\n     * @param {string} address Unique staker address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getStakersAddressData(address: string, options?: any) {\n        return DefaultApiFp(this.configuration).getStakersAddressData(address, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an array containing the addresses for all stakers.\n     * @summary Get Stakers\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getStakersData(options?: any) {\n        return DefaultApiFp(this.configuration).getStakersData(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns an object containing global stats for all pools and all transactions.\n     * @summary Get Global Stats\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getStats(options?: any) {\n        return DefaultApiFp(this.configuration).getStats(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns stats and total changes of all pools in specified interval\n     * @summary Get Stats Changes\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n     * @param {number} from Start time of the query as unix timestamp\n     * @param {number} to End time of the query as unix timestamp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getStatsChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any) {\n        return DefaultApiFp(this.configuration).getStatsChanges(interval, from, to, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a proxied endpoint for the constants endpoint from a local thornode\n     * @summary Get the Proxied THORChain Constants\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getThorchainProxiedConstants(options?: any) {\n        return DefaultApiFp(this.configuration).getThorchainProxiedConstants(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a proxied endpoint for the pool_addresses endpoint from a local thornode\n     * @summary Get the Proxied Pool Addresses\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getThorchainProxiedEndpoints(options?: any) {\n        return DefaultApiFp(this.configuration).getThorchainProxiedEndpoints(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a proxied endpoint for the lastblock endpoint from a local thornode\n     * @summary Get the Proxied THORChain Lastblock\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getThorchainProxiedLastblock(options?: any) {\n        return DefaultApiFp(this.configuration).getThorchainProxiedLastblock(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a proxied endpoint for the queue endpoint from a local thornode\n     * @summary Get the Proxied THORChain Queue\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getThorchainProxiedQueue(options?: any) {\n        return DefaultApiFp(this.configuration).getThorchainProxiedQueue(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns total volume changes of all pools in specified interval\n     * @summary Get Total Volume Changes\n     * @param {'5min' | 'hour' | 'day' | 'week' | 'month' | 'year'} interval Interval of calculations\n     * @param {number} from Start time of the query as unix timestamp\n     * @param {number} to End time of the query as unix timestamp\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getTotalVolChanges(interval: '5min' | 'hour' | 'day' | 'week' | 'month' | 'year', from: number, to: number, options?: any) {\n        return DefaultApiFp(this.configuration).getTotalVolChanges(interval, from, to, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Return an array containing the event details\n     * @summary Get details of a tx by address, asset or tx-id\n     * @param {number} offset pagination offset\n     * @param {number} limit pagination limit\n     * @param {string} [address] Address of sender or recipient of any in/out tx in event\n     * @param {string} [txid] ID of any in/out tx in event\n     * @param {string} [asset] Any asset used in event (CHAIN.SYMBOL)\n     * @param {string} [type] One or more comma separated unique types of event\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getTxDetails(offset: number, limit: number, address?: string, txid?: string, asset?: string, type?: string, options?: any) {\n        return DefaultApiFp(this.configuration).getTxDetails(offset, limit, address, txid, asset, type, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * DocumentationApi - axios parameter creator\n * @export\n */\nexport const DocumentationApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Swagger/openapi 3.0 specification generated documents.\n         * @summary Get Documents\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocs: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/doc`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DocumentationApi - functional programming interface\n * @export\n */\nexport const DocumentationApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DocumentationApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Swagger/openapi 3.0 specification generated documents.\n         * @summary Get Documents\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getDocs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocs(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DocumentationApi - factory interface\n * @export\n */\nexport const DocumentationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DocumentationApiFp(configuration)\n    return {\n        /**\n         * Swagger/openapi 3.0 specification generated documents.\n         * @summary Get Documents\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getDocs(options?: any): AxiosPromise<void> {\n            return localVarFp.getDocs(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DocumentationApi - object-oriented interface\n * @export\n * @class DocumentationApi\n * @extends {BaseAPI}\n */\nexport class DocumentationApi extends BaseAPI {\n    /**\n     * Swagger/openapi 3.0 specification generated documents.\n     * @summary Get Documents\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DocumentationApi\n     */\n    public getDocs(options?: any) {\n        return DocumentationApiFp(this.configuration).getDocs(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * SpecificationApi - axios parameter creator\n * @export\n */\nexport const SpecificationApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns human and machine readable swagger/openapi specification.\n         * @summary Get Swagger\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSwagger: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1/swagger.json`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SpecificationApi - functional programming interface\n * @export\n */\nexport const SpecificationApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SpecificationApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns human and machine readable swagger/openapi specification.\n         * @summary Get Swagger\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSwagger(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwagger(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SpecificationApi - factory interface\n * @export\n */\nexport const SpecificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SpecificationApiFp(configuration)\n    return {\n        /**\n         * Returns human and machine readable swagger/openapi specification.\n         * @summary Get Swagger\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSwagger(options?: any): AxiosPromise<void> {\n            return localVarFp.getSwagger(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SpecificationApi - object-oriented interface\n * @export\n * @class SpecificationApi\n * @extends {BaseAPI}\n */\nexport class SpecificationApi extends BaseAPI {\n    /**\n     * Returns human and machine readable swagger/openapi specification.\n     * @summary Get Swagger\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SpecificationApi\n     */\n    public getSwagger(options?: any) {\n        return SpecificationApiFp(this.configuration).getSwagger(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","import * as THREE from \"three\";\nimport {Config} from \"@/config\";\n\nexport default class StarBackground {\n    public static makeStarEnvironment(scene: THREE.Scene, srgb: boolean = false) {\n        const loader = new THREE.CubeTextureLoader();\n        loader.setPath(`textures/environment/${Config.Scene.Cubemap.Name}/`);\n\n        const textureCube = loader.load(['right.png', 'left.png', 'top.png', 'bottom.png', 'front.png', 'back.png'], (tex: THREE.CubeTexture) => {\n            console.log('environmental map loaded.')\n        })\n\n        if (srgb) {\n            textureCube.encoding = THREE.sRGBEncoding;\n        }\n\n        scene.background = textureCube;\n    }\n}\n","import * as THREE from \"three\";\nimport {PointLight, Scene} from \"three\";\nimport {EventType, PoolChangeType, ThorEvent, ThorEventListener, TxEventType} from \"@/provider/types\";\nimport {TxObjectManager} from \"@/render/tx/txObjectManager\";\nimport {PoolObjectManager} from \"@/render/pool/poolObjectManager\";\nimport {WalletObjectManager} from \"@/render/wallet/walletObjectManager\";\nimport {Config} from \"@/config\";\nimport {CoreObject} from \"@/render/core/coreObject\";\nimport StarBackground from \"@/render/background\";\nimport {IScene} from \"@/render/sceneInterface\";\n\nexport default class SimpleScene implements ThorEventListener, IScene {\n    private readonly scene: Scene;\n\n    private txObjManager = new TxObjectManager()\n    private poolObjManager = new PoolObjectManager()\n    private walletObjManager = new WalletObjectManager()\n    private core?: CoreObject;\n\n    updateAnimations(dt: number) {\n        this.poolObjManager.update(dt)\n        this.txObjManager.update(dt)\n        this.walletObjManager.update(dt)\n        this.core?.update(dt)\n    }\n\n    setEnvironment(tex: THREE.CubeTexture) {\n        this.core?.setEnvironment(tex)\n    }\n\n    // --------- init & load & service -----\n\n    onResize(w: number, h: number) {\n    }\n\n    public createCore() {\n        if (this.core) {\n            return\n        }\n\n        this.core = new CoreObject()\n        this.scene.add(this.core)\n    }\n\n    constructor(scene: Scene) {\n        this.scene = scene\n\n        this.createCore()\n\n        this.poolObjManager.scene = scene\n\n        this.txObjManager.scene = scene\n        this.txObjManager.poolMan = this.poolObjManager\n        this.txObjManager.walletMan = this.walletObjManager\n\n        this.walletObjManager.scene = scene\n\n        this.makeLight()\n\n        if (Config.Scene.Cubemap.Enabled) {\n            StarBackground.makeStarEnvironment(this.scene)\n        }\n    }\n\n    private makeLight() {\n        const pointLight = new PointLight(0xffffff, 1.0);\n        pointLight.position.set(0, 0, 0);\n        this.scene.add(pointLight);\n\n        const ambient = new THREE.AmbientLight(0xffffff);\n        this.scene.add(ambient);\n    }\n\n    private resetAll() {\n        console.log('Boom! Reset the scene!')\n        this.poolObjManager.removeAllPoolMeshes()\n        this.txObjManager.removeAll()\n        this.walletObjManager.removeAll()\n    }\n\n    // ------ event routing -------\n\n    receiveEvent(e: ThorEvent): void {\n        if (e.eventType == EventType.ResetAll) {\n            this.resetAll()\n        } else if (e.eventType == EventType.UpdatePool) {\n            const change = e.poolChange!\n\n            if (change.type == PoolChangeType.Removed) {\n                this.poolObjManager.removePoolMesh(change.previousPool!)\n            } else {\n                if (!this.poolObjManager.isTherePoolMesh(change.pool!.asset)) {\n                    this.poolObjManager.addNewPoolMesh(change.pool!)\n                }\n                if (change.type == PoolChangeType.DepthChanged) {\n                    this.poolObjManager.hearBeat(e.poolChange?.pool!)\n                }\n            }\n        } else if (e.eventType == EventType.Transaction) {\n            const ev = e.txEvent!\n\n            if (ev.type == TxEventType.Add) {\n                this.walletObjManager.makeWalletsFromTx(ev.tx) // this is always 1st!\n                this.txObjManager.createTransactionObjects(ev.tx)\n            } else if (ev.type == TxEventType.Destroy) {\n                this.txObjManager.destroyTransactionMesh(ev.tx)\n            } else if (ev.type == TxEventType.StatusUpdated) {\n                this.walletObjManager.makeWalletsFromTx(ev.tx) // this is always 1st!\n                this.txObjManager.updateTransactionMeshStatus(ev.tx)\n            }\n        }\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Midgard Public API\n * The Midgard Public API queries THORChain and any chains linked via the Bifröst and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.\n *\n * The version of the OpenAPI document: 0.8.1\n * Contact: devs@thorchain.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://127.0.0.1:8080\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Midgard Public API\n * The Midgard Public API queries THORChain and any chains linked via the Bifröst and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with BEPSwap and Asgardex, users should query THORChain directly.\n *\n * The version of the OpenAPI document: 0.8.1\n * Contact: devs@thorchain.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","import BigNumber from \"bignumber.js\";\n\nexport class PoolDetail {\n    constructor(public asset: string,\n                public assetDepth: BigNumber,\n                public runeDepth: BigNumber,\n                public isEnabled: boolean,\n                public units: BigNumber) {\n    }\n\n    static fromMidgardV2(j: any): PoolDetail {\n        const status = j.status.toLowerCase()\n        return new PoolDetail(\n            j.asset,\n            new BigNumber(j.assetDepth),\n            new BigNumber(j.runeDepth),\n            status == 'enabled' || status == 'available',\n            new BigNumber(j.units)\n        )\n    }\n\n    static fromMidgardV1(j: any): PoolDetail {\n        const status = j.status.toLowerCase()\n        return new PoolDetail(\n            j.asset,\n            new BigNumber(j.assetDepth),\n            new BigNumber(j.runeDepth),\n            status == 'enabled',\n            new BigNumber(j.poolUnits)\n        )\n    }\n\n    get runesPerAsset(): BigNumber {\n        return this.runeDepth.div(this.assetDepth)\n    }\n\n    get assetsPerRune(): BigNumber {\n        return this.assetDepth.div(this.runeDepth)\n    }\n\n    public isEqual(other: PoolDetail): boolean {\n        return this.asset === other.asset &&\n            this.runeDepth.isEqualTo(other.runeDepth) &&\n            this.assetDepth.isEqualTo(other.assetDepth) &&\n            this.units.isEqualTo(other.units) &&\n            this.isEnabled === other.isEnabled\n    }\n\n    public sub(other: PoolDetail) {\n        return new PoolDetail(\n            this.asset,\n            this.assetDepth.minus(other.assetDepth),\n            this.runeDepth.minus(other.runeDepth),\n            this.isEnabled,\n            this.units.minus(other.units)\n        )\n    }\n\n    public toString() {\n        const status = this.isEnabled ? 'enabled' : 'bootstraping'\n        return `Pool(${this.runeDepth.toString()} R vs ${this.assetDepth.toString()} ${this.asset}, units = ${this.units.toString()}, ${status})`\n    }\n}","export function setDifference<T>(setA: Set<T>, setB: Set<T>): Set<T> {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n\nexport function setUnion<T>(setA: Set<T>, setB: Set<T>): Set<T> {\n    let _union = new Set(setA);\n    for (let elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n\nexport function setIntersection<T>(setA: Set<T>, setB: Set<T>): Set<T> {\n    let _intersection = new Set<T>();\n    for (let elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n\nexport function arrayNotEmpty(array: Array<any>) {\n    return Array.isArray(array) && array.length\n}","import {\n    Coin as CoinV1,\n    Tx,\n    TxDetails as TxDetailsV1,\n    TxDetailsStatusEnum,\n    TxDetailsTypeEnum\n} from \"@/provider/midgard/v1\";\nimport {Action as TxDetailsV2, ActionStatusEnum, ActionTypeEnum, Metadata, Transaction} from \"@/provider/midgard/v2\";\n\nimport sha256 from \"fast-sha256\";\nimport {hex} from \"@/helpers/data_utils\";\nimport {isRuneStr, parseThorBigNumber} from \"@/provider/midgard/coinName\";\nimport {arrayNotEmpty} from \"@/helpers/iter\";\n\n\nexport class ThorTransaction implements TxDetailsV2 {\n    constructor(\n        public _in: Array<Transaction>,\n        public date: string,\n        public height: string,\n        public metadata: Metadata,\n        public out: Array<Transaction>,\n        public pools: Array<string>,\n        public status: ActionStatusEnum,\n        public type: ActionTypeEnum,\n        private _lazyHash: string = '') {\n        this.dateTimestampMs = Number(BigInt(date) / 1_000_000n)\n    }\n\n    public readonly dateTimestampMs: number\n\n    get isDoubleSwap() {\n        return this.type == ActionTypeEnum.Swap && this.pools.length == 2\n    }\n\n    get inputAddress(): string | null {\n        if(this._in.length > 0) {\n            const addr = this._in[0].address\n            return addr === '' ? null : addr\n        }\n        return null\n    }\n\n    get realInputHash(): string {\n        if(this._lazyHash !== '') {\n            return this._lazyHash\n        }\n\n        if(this._in.length > 0) {\n            const txId = this._in[0].txID\n            if(this.type == ActionTypeEnum.Switch && arrayNotEmpty(this._in) && arrayNotEmpty(this._in[0].coins)) {\n                // txId == '' for switch (sadly)\n                const amt = this._in[0].coins[0].amount\n                this._lazyHash = `${this.date}-${this.inputAddress}-${amt}`\n            } else {\n                this._lazyHash = txId\n            }\n        }\n        return this._lazyHash\n    }\n\n    public getRuneVolume(txs: Array<Transaction>, runesPerAsset: number) {\n        let sum = 0.0\n        for (const tx of txs) {\n            for (const coin of tx.coins) {\n                const amt = parseThorBigNumber(coin.amount)\n                if (isRuneStr(coin.asset)) {\n                    sum += amt\n                } else {\n                    sum += amt * runesPerAsset\n                }\n            }\n        }\n        return sum\n    }\n\n    runeVolume(runesPerAsset: number): number {\n        if (this.type == ActionTypeEnum.Refund\n            || this.type == ActionTypeEnum.Withdraw\n            || this.type == ActionTypeEnum.Switch\n            || this.type == ActionTypeEnum.Swap) {\n            return this.getRuneVolume(this.out, runesPerAsset)\n        } else if (this.type == ActionTypeEnum.Donate\n            || this.type == ActionTypeEnum.AddLiquidity) {\n            return this.getRuneVolume(this._in, runesPerAsset)\n        }\n        return 0.0\n    }\n\n    get ageSeconds(): number {\n        return (Date.now() - this.dateTimestampMs) / 1_000\n    }\n\n    public static TxV1toV2(tx: Tx): Transaction {\n        return {\n            address: tx.address!,\n            txID: tx.txID!,\n            coins: tx.coins!.map((c: CoinV1) => ({\n                amount: c.amount!,\n                asset: c.asset!\n            }))\n        }\n    }\n\n    public static fromMidgardV1(j: TxDetailsV1) {\n        let actionType: ActionTypeEnum\n        // note: j['in'] not j._in! due to a bug\n        let in_tx: Array<Transaction> = j['in'] ? [ThorTransaction.TxV1toV2(j['in']!)] : []\n\n        let out_tx: Array<Transaction> = j.out!.map((tx: Tx) => ThorTransaction.TxV1toV2(tx))\n        let pools: Array<string> = (j.pool && j.pool !== '.') ? [j.pool] : []\n        let meta: Metadata = {}  // todo: fill this!\n        const date = (BigInt(j.date!) * 1_000_000_000n).toString()\n        const status = j.status! == TxDetailsStatusEnum.Success ? ActionStatusEnum.Success : ActionStatusEnum.Pending\n\n        if (j.type == TxDetailsTypeEnum.Stake) {\n            actionType = ActionTypeEnum.AddLiquidity\n        } else if (j.type == TxDetailsTypeEnum.Swap) {\n            actionType = ActionTypeEnum.Swap\n        } else if (j.type == TxDetailsTypeEnum.DoubleSwap) {\n            if (out_tx.length && out_tx[0].coins.length) {\n                pools.push(out_tx[0].coins[0].asset)\n            }\n            actionType = ActionTypeEnum.Swap\n        } else if (j.type == TxDetailsTypeEnum.Unstake) {\n            actionType = ActionTypeEnum.Withdraw\n        } else if (j.type == TxDetailsTypeEnum.Add) {\n            actionType = ActionTypeEnum.Donate\n        } else if (j.type == TxDetailsTypeEnum.Refund) {\n            actionType = ActionTypeEnum.Refund\n        } else {\n            throw new Error('not implemented')\n        }\n\n        return new ThorTransaction(in_tx, date, j.height!, meta, out_tx, pools, status, actionType)\n    }\n\n    private static calcHash(in_tx: Array<Transaction>) {\n        if (in_tx && in_tx.length && in_tx[0].txID) {\n            return in_tx[0].txID\n        } else {\n            const encoder = new TextEncoder()\n            const encodedData = sha256(encoder.encode(JSON.stringify(in_tx)))\n            return hex(encodedData)\n        }\n    }\n\n    public static fromMidgardV2(j: TxDetailsV2) {\n        let inArray = typeof j._in !== 'undefined' ? j._in : j['in']\n        return new ThorTransaction(inArray!, j.date, j.height, j.metadata, j.out, j.pools, j.status, j.type)\n    }\n}\n\nexport class TxBatch {\n    public totalCount: number = 0\n    public txs: ThorTransaction[] = []\n\n    constructor(totalCount: number, txs: ThorTransaction[]) {\n        this.totalCount = totalCount;\n        this.txs = txs;\n    }\n\n    public static fromMidgardV1(txs: Array<TxDetailsV1>, totalCount: number) {\n        return new TxBatch(totalCount, txs.map((v) => ThorTransaction.fromMidgardV1(v)))\n    }\n\n    public static fromMidgardV2(txs: Array<TxDetailsV2>, totalCount: number) {\n        return new TxBatch(totalCount, txs.map((v) => ThorTransaction.fromMidgardV2(v)))\n    }\n}","import {DefaultApi as MidgardAPIV1} from \"@/provider/midgard/v1/index\"\nimport {DefaultApi as MidgardAPIV2} from \"@/provider/midgard/v2/index\"\nimport {PoolDetail} from \"@/provider/midgard/poolDetail\";\nimport {TxBatch} from \"@/provider/midgard/tx\";\nimport {Config, NetworkId} from \"@/config\";\nimport VisualLog from \"@/components/elements/VisualLog.vue\";\n\n\nexport const MAX_ACTIONS_PER_CALL = 50\n\n\nexport class Midgard {\n    public readonly networkId: NetworkId;\n    private apiV1?: MidgardAPIV1\n    private apiV2?: MidgardAPIV2\n\n    constructor(networkId: NetworkId) {\n        this.networkId = networkId\n\n        const url = Config.getMidgardBaseUrl(networkId)\n        if (networkId == NetworkId.ChaosnetSingleBep2) {\n            this.apiV1 = new MidgardAPIV1(undefined, url)\n        } else {\n            this.apiV2 = new MidgardAPIV2(undefined, url)\n        }\n    }\n\n    async getUserActions(start: number, limit: number): Promise<TxBatch | null> {\n        try {\n            console.info(`getUserActions (${start} to ${start + limit})`)\n            if (this.apiV1) {\n                const data = (await this.apiV1.getTxDetails(start, limit)).data\n                return TxBatch.fromMidgardV1(data.txs!, data.count!)\n            } else {\n                const data = (await this.apiV2!.getActions(limit, start)).data\n                return TxBatch.fromMidgardV2(data.actions!, parseInt(data.count!))\n            }\n        } catch (e) {\n            VisualLog.log(`Midgard error: ${e.toString()}`)\n            return null\n        }\n    }\n\n    async getPoolState(): Promise<PoolDetail[] | null> {\n        try {\n            console.info(`getPoolState`)\n            if (this.apiV1) {\n                const pools: Array<string> = (await this.apiV1.getPools()).data.sort()\n                const details = (await this.apiV1.getPoolsDetails(pools.join(','), 'simple')).data\n                return details.map((item) => PoolDetail.fromMidgardV1(item))\n            } else {\n                const pools = (await this.apiV2!.getPools()).data\n                return pools.map((item) => PoolDetail.fromMidgardV2(item))\n            }\n        } catch (e) {\n            VisualLog.log(`Midgard error: ${e.toString()}`)\n            return null\n        }\n    }\n}\n","import {setDifference, setIntersection} from \"@/helpers/iter\";\nimport {EventType, PoolChange, PoolChangeType, ThorEvent} from \"@/provider/types\";\nimport {PoolDetail} from \"@/provider/midgard/poolDetail\";\n\n\nexport class PoolChangeAnalyzer {\n    private prevPoolsMapping: Record<string, PoolDetail> = {}\n\n    public static poolChangeToEvent(poolChange: PoolChange): ThorEvent {\n        const now = Date.now()\n        return {\n            date: now,\n            eventType: EventType.UpdatePool,\n            poolChange\n        }\n    }\n\n    public processPools(pools: Array<PoolDetail>): ThorEvent[] {\n        if (!pools) {\n            return []\n        }\n\n        const currentPoolsMapping: Record<string, PoolDetail> = Object.fromEntries(\n            pools.map((item: PoolDetail) => [item.asset, item])\n        )\n\n        const previousKeys = new Set(Object.keys(this.prevPoolsMapping!))\n        const currentKeys = new Set(Object.keys(currentPoolsMapping))\n\n        const removedKeys = setDifference(previousKeys, currentKeys)\n        const addedKeys = setDifference(currentKeys, previousKeys)\n        const commonKeys = setIntersection(currentKeys, previousKeys)\n\n        let poolChanges: PoolChange[] = []\n\n        for (const key of removedKeys) {\n            const previousPool = this.prevPoolsMapping[key]\n            poolChanges.push({\n                pool: undefined, previousPool, type: PoolChangeType.Removed\n            })\n        }\n\n        for (const key of addedKeys) {\n            poolChanges.push({\n                pool: currentPoolsMapping[key], previousPool: undefined, type: PoolChangeType.Added\n            })\n        }\n\n        for (const key of commonKeys) {\n            const currentPool = currentPoolsMapping[key]\n            const previousPool = this.prevPoolsMapping[key]\n\n            if (!currentPool.isEqual(previousPool)) {\n                const typeOfChange = currentPool.isEnabled != previousPool.isEnabled ?\n                    PoolChangeType.StatusChanged : PoolChangeType.DepthChanged\n                poolChanges.push({\n                    pool: currentPool, previousPool, type: typeOfChange\n                })\n            }\n        }\n\n        // console.info('pool changes: ', poolChanges.map((i) => i.pool.toString()))\n\n        this.prevPoolsMapping = currentPoolsMapping\n        return poolChanges.map(e => PoolChangeAnalyzer.poolChangeToEvent(e))\n    }\n}\n","import {ThorTransaction} from \"@/provider/midgard/tx\";\nimport {ActionStatusEnum} from \"@/provider/midgard/v2\";\nimport {Config} from \"@/config\";\nimport {EventType, ThorEvent, TxEvent, TxEventType} from \"@/provider/types\";\n\n\nexport class TxAnalyzer {\n    private txCache: Record<string, ThorTransaction> = {}\n    private ignoreOld: boolean;\n\n    constructor(ignoreOld: boolean = true) {\n        this.ignoreOld = ignoreOld\n    }\n\n    // todo: find all old pending tx and recheck their status\n    get allPendingTx(): ThorTransaction[] {\n        const allKeys: string[] = Object.keys(this.txCache)\n        const pendingKeys = allKeys.reduce((accum: string[], k: string) => {\n            if (this.txCache[k].status == ActionStatusEnum.Pending) {\n                accum.push(k)\n            }\n            return accum\n        }, [])\n        return pendingKeys.map((k) => this.txCache[k])\n    }\n\n    public filterOldTx(beforeTs: number) {\n        return Object.values(this.txCache).filter((tx) => tx.dateTimestampMs < beforeTs)\n    }\n\n    public processTransactions(newTx: Array<ThorTransaction>): [ThorEvent[], boolean] {\n        let changes: TxEvent[] = []\n        let shouldContinue = false\n        for (const tx of newTx) {\n            if (!tx || !tx.realInputHash) {\n                console.warn(`Tx has no In`, tx)\n                continue\n            }\n            const txHash = tx.realInputHash\n            if (!(txHash in this.txCache)) {\n                this.txCache[txHash] = tx\n                const tooOld = tx.ageSeconds <= Config.RealtimeScanner.MaxAgeOfPendingTxSec && this.ignoreOld\n                if (!tooOld) {\n                    changes.push({\n                        type: TxEventType.Add,\n                        tx\n                    })\n                } else {\n                    console.debug(`too old`, tx)\n                }\n\n                shouldContinue = true\n            } else {\n                const oldTx = this.txCache[txHash]\n                if (tx.status !== oldTx.status) {\n                    this.txCache[txHash] = tx\n\n                    changes.push({\n                        type: TxEventType.StatusUpdated,\n                        tx\n                    })\n\n                    shouldContinue = true\n                }\n            }\n        }\n\n        // remove too old pending transactions\n        for (const tx of this.allPendingTx) {\n            if (this.ignoreOld && tx.ageSeconds > Config.RealtimeScanner.MaxAgeOfPendingTxSec) {\n                changes.push({\n                    type: TxEventType.Destroy,\n                    tx\n                })\n                delete this.txCache[tx.realInputHash!]\n            }\n        }\n\n        const events = changes.map(c => ({\n            date: c.tx.dateTimestampMs,  // todo: or maybe now?\n            eventType: EventType.Transaction,\n            txEvent: c\n        }))\n\n        return [events, shouldContinue]\n    }\n}\n","export function sleep(seconds: number) {\n    return new Promise(resolve => setTimeout(resolve, seconds * 1000.0));\n}","import {EventType, ThorEventListener} from \"@/provider/types\";\n\n\nexport abstract class BaseDataProvider {\n    public delegate: ThorEventListener\n\n    protected constructor(delegate: ThorEventListener) {\n        this.delegate = delegate\n    }\n\n    public abstract async play(): Promise<void>;\n    public abstract pause(): void;\n\n    protected sendReset() {\n        // reset scene!\n        this.delegate.receiveEvent({\n            date: Date.now(),\n            eventType: EventType.ResetAll\n        })\n    }\n}\n","import {ThorEventListener} from \"@/provider/types\";\nimport {MAX_ACTIONS_PER_CALL, Midgard} from \"@/provider/midgard/midgard\";\nimport {PoolChangeAnalyzer} from \"@/provider/process/poolChangeAnalize\";\nimport {Config} from \"@/config\";\nimport {TxAnalyzer} from \"@/provider/process/txAnalyze\";\nimport {ActionStatusEnum} from \"@/provider/midgard/v2\";\nimport {sleep} from \"@/helpers/async_utils\";\nimport VisualLog from \"@/components/elements/VisualLog.vue\";\nimport {BaseDataProvider} from \"@/provider/data_provider\";\n\n\nexport class RealtimeProvider extends BaseDataProvider {\n    public readonly intervalSec: number = 5\n\n    public midgard: Midgard\n\n    private poolAnalyzer: PoolChangeAnalyzer\n    private txAnalyzer: TxAnalyzer\n\n    counter: number = 0\n    private timer?: number;\n\n    public ignoreFirstTime: boolean = false\n\n    private firstTimeActions = true\n    public suppressErrors = true\n\n    constructor(delegate: ThorEventListener, midgard: Midgard, intervalSec: number = 5,\n                ignoreFirstTime: boolean = false,\n                suppressErrors: boolean = false) {\n        super(delegate);\n        this.midgard = midgard\n        this.poolAnalyzer = new PoolChangeAnalyzer()\n        this.txAnalyzer = new TxAnalyzer()\n        this.intervalSec = intervalSec\n        this.ignoreFirstTime = ignoreFirstTime\n        this.suppressErrors = suppressErrors\n    }\n\n    private async requestPools() {\n        const now = Date.now()\n\n        const pools = await this.midgard.getPoolState()\n        if (!pools) {\n            return\n        }\n\n        const poolEvents = this.poolAnalyzer.processPools(pools)\n        for (const poolEvent of poolEvents) {\n            this.delegate.receiveEvent(poolEvent)\n        }\n    }\n\n    private async requestActions() {\n        const maxPage = Config.RealtimeScanner.MaxPagesOfActions\n        for (let page = 0; page < maxPage; ++page) {\n            const offset = page * MAX_ACTIONS_PER_CALL\n            const batch = await this.midgard.getUserActions(offset, MAX_ACTIONS_PER_CALL)\n            if (!batch) {\n                break\n            }\n\n            const [events, goOnFlag] = this.txAnalyzer.processTransactions(batch.txs)\n\n            for (const ev of events) {\n                const tx = ev.txEvent!.tx\n                if (this.ignoreFirstTime && this.firstTimeActions && tx.status == ActionStatusEnum.Success) {\n                    // ignore success TX events first time, count only pending\n                    continue\n                }\n\n                this.delegate.receiveEvent(ev)\n            }\n\n            if (!goOnFlag) {\n                break\n            }\n        }\n\n        this.firstTimeActions = false\n    }\n\n    private async tickJob() {\n        await Promise.all([\n            this.requestPools(),\n            this.requestActions()\n        ])\n    }\n\n    private async tick() {\n        this.counter++\n\n        for (let attempt = 0; attempt < Config.RealtimeScanner.FetchAttempts; ++attempt) {\n            if (this.suppressErrors) {\n                try {\n                    await this.tickJob()\n                    break\n                } catch (e) {\n                    console.error(`Tick error at ${attempt + 1} attempt: ${e}!`)\n                    await sleep(1.0)\n                }\n            } else {\n                await this.tickJob()\n            }\n        }\n\n        this.timer = setTimeout(this.tick.bind(this), this.intervalSec * 1000)\n    }\n\n    public async play() {\n        console.info('RealtimeProvider starts...')\n\n        this.sendReset()\n\n        try {\n            await this.requestPools()  // pools first!\n        } catch (e) {\n            VisualLog.log('failed to initially get pools info!')\n        }\n\n        await this.tick()\n    }\n\n    public pause() {\n        console.warn('stop data provider!')\n\n        if (this.timer) {\n            clearTimeout(this.timer!)\n            this.timer = undefined\n        }\n    }\n\n    public resetState() {\n        // todo\n    }\n}\n","<template>\n    <div>\n        <transition name=\"shrink\" mode=\"out-in\">\n            <div v-if=\"isHelpOn\" class=\"window-panel\">\n                <a href=\"#\" class=\"close-it\" @click=\"isHelpOn = false\">×</a>\n                <h2>Runiverse</h2>\n                <strong>Controls</strong>\n                <p>\n                    Use mouse to rotate the scene. Hold <kbd>Shift</kbd> with mouse left button to pan.<br>\n                </p>\n                <strong>Keyboard shortcuts</strong>\n                <p>\n                    <kbd>R</kbd> – Reset camera<br>\n                    <kbd>D</kbd> – Toggle FPS and debug info<br>\n                    <kbd>H</kbd> – Toggle help (this window)\n                </p>\n                <strong>Info</strong>\n                <p>\n                    Created by community 2021!<br>\n                    <a href=\"https://github.com/tirinox/runiverse\" target=\"_blank\">Source code</a><br>\n                    Feedback <a href=\"http://t.me/account1242\" target=\"_blank\">@account1242</a>\n                </p>\n            </div>\n        </transition>\n\n        <div class=\"control-panel\">\n            <button class=\"outline-button help-button\" v-if=\"!fullScreen\" @click=\"isHelpOn = !isHelpOn\">\n                ?\n            </button>\n            <button class=\"outline-button\" :class=\"{'button-faded': fullScreen}\" @click=\"goFullScreen\" v-if=\"canGoFullScreen\">\n                <span v-if=\"!fullScreen\">Go fullscreen</span>\n                <span v-else>×</span>\n            </button>\n\n            <PlaybackPanel v-if=\"isPlayback\"></PlaybackPanel>\n        </div>\n    </div>\n\n</template>\n\n<script>\n\nimport \"@/assets/css/common.css\"\nimport {isMobile} from \"@/helpers/platform\";\nimport emitter from \"@/helpers/emitter.ts\"\nimport PlaybackPanel from \"@/components/elements/PlaybackPanel\";\nimport {Config, DataSourcePlayback} from \"@/config\";\n\nexport default {\n    name: 'ControlPanel',\n    components: {PlaybackPanel},\n    data() {\n        return {\n            fullScreen: false,\n            isHelpOn: false,\n            isPlayback: Config.DataSource === DataSourcePlayback,\n        }\n    },\n\n    computed: {\n        canGoFullScreen() {\n            return !isMobile()\n        },\n    },\n\n    methods: {\n        goFullScreen() {\n            if (!this.fullScreen) {\n                this.fullScreen = true;\n                document.documentElement.requestFullscreen();\n            } else {\n                this.fullScreen = false;\n                document.exitFullscreen();\n            }\n        },\n    },\n\n    mounted() {\n        document.addEventListener('fullscreenchange', () => {\n            if(!document.fullscreenElement) {\n                this.fullScreen = false\n            }\n        })\n        emitter.on('ToggleHelp', () => {\n            this.helpOn = !this.helpOn\n        })\n    }\n}\n\n</script>\n\n<style>\n\n.control-panel {\n    position: absolute;\n    bottom: 4px;\n    right: 4px;\n}\n\n.help-button {\n    padding-left: 10px;\n    padding-right: 10px;\n}\n\n</style>\n","export const deviceType = () => {\n    const ua = navigator.userAgent;\n    if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(ua)) {\n        return \"tablet\";\n    }\n    else if (/Mobile|Android|iP(hone|od)|IEMobile|BlackBerry|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(ua)) {\n        return \"mobile\";\n    }\n    return \"desktop\";\n};\n\nexport function isMobile(): boolean {\n    const type = deviceType()\n    return type === 'mobile' || type === 'tablet'\n}","<template>\n    <div>\n        <button class=\"outline-button slightly-faded\" :disabled=\"atBeginning\" @click=\"goToBeginning\">\n            <font-awesome-icon icon=\"fast-backward\"/>\n        </button>\n        <button class=\"outline-button slightly-faded\" :disabled=\"atBeginning\" @click=\"stepBackward\">\n            <font-awesome-icon icon=\"step-backward\"/>\n        </button>\n        <button class=\"outline-button slightly-faded\" :disabled=\"finished\" @click=\"stopPlayClick\">\n            <font-awesome-icon v-if=\"isPlaying\" icon=\"pause\"/>\n            <font-awesome-icon v-else icon=\"play\"/>\n        </button>\n        <button class=\"outline-button slightly-faded\" :disabled=\"finished\" @click=\"stepForward\">\n            <font-awesome-icon icon=\"step-forward\"/>\n        </button>\n    </div>\n</template>\n\n<script>\n\nimport \"@/assets/css/common.css\"\n\nexport default {\n    name: 'PlaybackPanel',\n    data() {\n        return {\n            isPlaying: false,\n            finished: false,\n            atBeginning: true\n        }\n    },\n\n    computed: {},\n\n    methods: {\n        async stopPlayClick() {\n            this.isPlaying = !this.isPlaying\n            if(this.isPlaying) {\n                this.atBeginning = false\n                await this.dataProvider.play()\n            } else {\n                this.dataProvider.pause()\n            }\n        },\n        stepForward() {\n\n        },\n        stepBackward() {\n\n        },\n        goToBeginning() {\n            this.atBeginning = true\n            this.isPlaying = false\n            this.finished = false\n        }\n    },\n\n    mounted() {\n    }\n}\n\n</script>\n\n<style>\n\n</style>\n\n","import { render } from \"./PlaybackPanel.vue?vue&type=template&id=270d8daa\"\nimport script from \"./PlaybackPanel.vue?vue&type=script&lang=js\"\nexport * from \"./PlaybackPanel.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","import { render } from \"./ControlPanel.vue?vue&type=template&id=31c64d2a\"\nimport script from \"./ControlPanel.vue?vue&type=script&lang=js\"\nexport * from \"./ControlPanel.vue?vue&type=script&lang=js\"\n\nimport \"./ControlPanel.vue?vue&type=style&index=0&id=31c64d2a&lang=css\"\nscript.render = render\n\nexport default script","import {BaseDataProvider} from \"@/provider/data_provider\";\nimport {EventType, ThorEventListener} from \"@/provider/types\";\nimport {lastElement} from \"@/helpers/data_utils\";\nimport {PoolChangeAnalyzer} from \"@/provider/process/poolChangeAnalize\";\nimport {TxAnalyzer} from \"@/provider/process/txAnalyze\";\nimport {PoolDetail} from \"@/provider/midgard/poolDetail\";\nimport {ThorTransaction} from \"@/provider/midgard/tx\";\n\n\ninterface RecordEventContents {\n    added: Array<any>\n    changed: Array<any>\n    removed: Array<any>\n}\n\ninterface RecordEvent {\n    timestamp: number;\n    sec_from_start: number;\n    type: string;\n    event: RecordEventContents;\n}\n\ninterface RecordHeader {\n    version: string;\n    start_date: string;\n    events: Array<RecordEvent>\n}\n\nconst enum RecordEventType {\n    PoolEvent = 'pool_event',\n    TxEvent = 'tx_event'\n}\n\n\nconst V2 = 'v2'\n\nexport class PlaybackDataProvider extends BaseDataProvider {\n    private fileName: string;\n    private isFileLoaded: boolean = false\n    private timeScale: number\n    private timer: number = -1\n    private _isRunning: boolean = false\n    private currentEventIndex: number = 0\n    private eventStreamArray: Array<RecordEvent> = []\n    private prevEventTime: number = 0.0\n    // private started: boolean = false\n    private version: string = ''\n\n    private poolsState: Record<string, PoolDetail> = {}\n    private txState: Record<string, ThorTransaction> = {}\n\n    private poolAnalyzer: PoolChangeAnalyzer\n    private txAnalyzer: TxAnalyzer\n    private waitFirstEvent: boolean;\n\n    constructor(delegate: ThorEventListener, fileName: string, timeScale: number = 1.0,\n                waitFirstEvent: boolean = true) {\n        super(delegate);\n        this.waitFirstEvent = waitFirstEvent\n        this.fileName = fileName\n        this.timeScale = timeScale\n        this._isRunning = false\n        this.poolAnalyzer = new PoolChangeAnalyzer()\n        this.txAnalyzer = new TxAnalyzer(false)\n\n        console.info(`Playback: timeScale = ${timeScale}`)\n    }\n\n    rewindToStart() {\n        this.sendReset()\n        this.resetState()\n    }\n\n    stop() {\n        this.pause()\n        this.resetState()\n    }\n\n    pause(): void {\n        this.stopTick()\n    }\n\n    get isRunning() {\n        return this._isRunning\n    }\n\n    get totalDurationSec(): number {\n        return lastElement(this.eventStreamArray).sec_from_start * this.timeScale\n    }\n\n    get progress(): number {\n        const duration = this.totalDurationSec\n        const curr = this.currentEvent\n        if (curr) {\n            return curr.sec_from_start / duration\n        } else {\n            return 0.0\n        }\n    }\n\n    get isFinished() {\n        return this.currentEventIndex >= this.eventStreamArray.length\n    }\n\n    get currentEvent(): RecordEvent | undefined {\n        if (this.isFinished) {\n            return undefined\n        } else {\n            return this.eventStreamArray[this.currentEventIndex]\n        }\n    }\n\n    async play(): Promise<void> {\n        if (this._isRunning) {\n            console.warn('Playback is running! Can not run it again! Call stop()')\n            return\n        }\n\n        if (!this.isFileLoaded) {\n            await this.loadFile()\n            // reset scene!\n            this.delegate.receiveEvent({\n                date: Date.now(),\n                eventType: EventType.ResetAll\n            })\n        }\n\n        if (this.eventStreamArray.length == 0) {\n            console.error('no events for playback')\n            return\n        }\n\n        this.pause()\n        this._isRunning = true\n\n        await this.tick(this.waitFirstEvent)\n    }\n\n    async loadFile() {\n        if (this._isRunning) {\n            this.stop()\n        }\n\n        const response = await fetch(this.fileName)\n        const json = await response.json()\n\n        this.resetState()\n        this.isFileLoaded = true\n        this.eventStreamArray = json.events\n        this.version = json.version\n\n        console.log('PlaybackDataProvider loaded: version:', json.version, 'start =', json.start_date)\n    }\n\n    private executePoolEvent(e: RecordEventContents) {\n        const parser = this.version == V2 ? PoolDetail.fromMidgardV2 : PoolDetail.fromMidgardV1\n\n        if (e.removed.length) {\n            const removedAssets = e.removed.map(o => o.asset)\n            for (const removedAsset of removedAssets) {\n                delete this.poolsState[removedAsset]\n            }\n        }\n        for (const newPoolJson of [...e.added, ...e.changed]) {\n            const poolDetails = parser(newPoolJson)\n            this.poolsState[poolDetails.asset] = poolDetails\n        }\n\n        const events = this.poolAnalyzer.processPools(Object.values(this.poolsState))\n        for (const ev of events) {\n            this.delegate.receiveEvent(ev)\n        }\n    }\n\n    private executeTxEvent(e: RecordEventContents) {\n        const parser = this.version == V2 ? ThorTransaction.fromMidgardV2 : ThorTransaction.fromMidgardV1\n\n        for (const newTx of [...e.added, ...e.changed]) {\n            const tx = parser(newTx)\n            const hash = tx.realInputHash\n            if (hash) {\n                this.txState[hash] = tx\n            }\n        }\n\n        const txStream = Object.values(this.txState).sort((a, b) => b.dateTimestampMs - a.dateTimestampMs)\n        const maxNumber = 50\n        const txStreamExcess = txStream.slice(maxNumber)\n        for (const tx of txStreamExcess) {\n            delete this.txState[tx.realInputHash!]\n        }\n        const txStreamLimited = txStream.slice(0, maxNumber)\n        const [events, _] = this.txAnalyzer.processTransactions(txStreamLimited)\n\n        for (const ev of events) {\n            this.delegate.receiveEvent(ev)\n        }\n    }\n\n    private executeEvent(evt: RecordEvent) {\n        console.warn('Executing event:', evt, \"progress = \", this.progress * 100, '%')\n        if (evt.type == RecordEventType.PoolEvent) {\n            this.executePoolEvent(evt.event)\n        } else if (evt.type == RecordEventType.TxEvent) {\n            this.executeTxEvent(evt.event)\n        }\n    }\n\n    private async tick(waitFirst: boolean = false) {\n        if (this.eventStreamArray.length == 0) {\n            console.error('no events for playback')\n            return\n        }\n\n        if (this.isFinished) {\n            console.log('playback finished!')\n            this.pause()\n            return\n        }\n\n        const currentEvent = this.currentEvent\n        const currentEventTime = currentEvent!.sec_from_start / this.timeScale\n\n        let secondsToNextEvent = 0.0\n        if (waitFirst) {\n            // dont execute, just wait 1st event\n            secondsToNextEvent = currentEventTime\n            this.prevEventTime = currentEventTime\n            this.currentEventIndex = 0\n        } else {\n            this.executeEvent(currentEvent!)\n            this.currentEventIndex++\n            const nextEvent = this.currentEvent\n            if (nextEvent) {\n                secondsToNextEvent = (nextEvent.sec_from_start - this.prevEventTime) / this.timeScale\n                this.prevEventTime = nextEvent.sec_from_start / this.timeScale\n            }\n        }\n\n        console.info(`Sec to next event: ${secondsToNextEvent} sec`)\n        this.timer = setTimeout(this.tick.bind(this), secondsToNextEvent * 1000)\n    }\n\n    resetState() {\n        // this.started = false\n        this.prevEventTime = 0.0\n        this.currentEventIndex = 0\n        this.txState = {}\n        this.poolsState = {}\n        this.poolAnalyzer = new PoolChangeAnalyzer()\n        this.txAnalyzer = new TxAnalyzer(false)\n    }\n\n    private stopTick() {\n        if (this.timer >= 0) {\n            clearInterval(this.timer)\n            this.timer = -1\n        }\n        this._isRunning = false\n    }\n}\n","export default \"varying vec2 vUv;\\n\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\"","export default \"\\nuniform sampler2D baseTexture;\\nuniform sampler2D bloomTexture;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n    gl_FragColor = texture2D(baseTexture, vUv) + vec4(1.0) * texture2D(bloomTexture, vUv);\\n}\\n\"","import * as THREE from \"three\";\nimport {Scene} from \"three\";\nimport {ThorEvent, ThorEventListener} from \"@/provider/types\";\nimport {Config} from \"@/config\";\nimport {PoolObject} from \"@/render/pool/poolObject\";\nimport StarBackground from \"@/render/background\";\nimport {PoolDetail} from \"@/provider/midgard/poolDetail\";\nimport BigNumber from \"bignumber.js\";\nimport {IScene} from \"@/render/sceneInterface\";\n\n\nexport default class PoolObjectSoloDebugScene implements ThorEventListener, IScene {\n    public scene: Scene;\n\n    private poolObj?: PoolObject;\n\n    updateAnimations(dt: number) {\n        if(this.poolObj) {\n            this.poolObj.update(dt)\n        }\n    }\n\n    onResize(w: number, h: number) {\n    }\n\n    constructor(scene: Scene) {\n        this.scene = scene\n\n        let poConfig = Config.Scene.PoolObject\n        // poConfig.InnerOrbitSpeed *= 0.0001;\n        // poConfig.BallShader.BaseSpeed *= 0.1;\n        // poConfig.BallShader.BlendSpeed *= 0.1;\n        // poConfig.BallShader.BumpSpeed *= 0.1;\n        // poConfig.Mesh.RotationVar = 0.0;\n        // poConfig.BallShader.BumpScale = 50;\n        poConfig.Glow.Enabled = true;\n\n        const pool = new PoolDetail(\n            'BTC.BTC',\n            new BigNumber(1000000000),\n            new BigNumber(400000000000),\n            true,\n            new BigNumber(123456700)\n        )\n\n        this.poolObj = new PoolObject(pool)\n        this.poolObj.scale.setScalar(10.0)\n        // this.poolObj.runeSideMesh!.rotationSpeed = ZeroVector3.clone()\n        // this.poolObj.assetSideMesh!.rotationSpeed = ZeroVector3.clone()\n\n        this.poolObj.updateScale()\n        this.poolObj.position.set(100, 200, 300)\n        this.poolObj.rotation.set(5, 3, 2)\n        this.scene.add(this.poolObj)\n\n        if (Config.Scene.Cubemap.Enabled) {\n            StarBackground.makeStarEnvironment(this.scene)\n        }\n    }\n\n    receiveEvent(e: ThorEvent): void {}\n    public setEnvironment(environment: THREE.CubeTexture) {}\n}\n","import * as THREE from \"three\";\nimport {Scene} from \"three\";\nimport {ThorEvent, ThorEventListener} from \"@/provider/types\";\nimport {Config} from \"@/config\";\nimport StarBackground from \"@/render/background\";\nimport {IScene} from \"@/render/sceneInterface\";\nimport {TxObject} from \"@/render/tx/txObject\";\n\n\nexport default class TxObjectSoloDebugScene implements ThorEventListener, IScene {\n    public scene: Scene;\n\n    private txObj?: TxObject;\n\n    updateAnimations(dt: number) {\n        if(this.txObj) {\n            this.txObj.update(dt)\n        }\n    }\n\n    onResize(w: number, h: number) {\n    }\n\n    constructor(scene: Scene) {\n        this.scene = scene\n\n        let txConfig = Config.Scene.TxObject\n        // poConfig.InnerOrbitSpeed *= 0.0001;\n        // poConfig.BallShader.BaseSpeed *= 0.1;\n        // poConfig.BallShader.BlendSpeed *= 0.1;\n        // poConfig.BallShader.BumpSpeed *= 0.1;\n        // poConfig.Mesh.RotationVar = 0.0;\n        // poConfig.BallShader.BumpScale = 50;\n\n        this.txObj = new TxObject(100, 10000, true)\n\n        this.txObj.scale.setScalar(10.0)\n        this.scene.add(this.txObj)\n\n        if (Config.Scene.Cubemap.Enabled) {\n            StarBackground.makeStarEnvironment(this.scene)\n        }\n    }\n\n    receiveEvent(e: ThorEvent): void {}\n    public setEnvironment(environment: THREE.CubeTexture) {}\n}\n","import * as THREE from \"three\";\nimport {Scene} from \"three\";\nimport {ThorEvent, ThorEventListener} from \"@/provider/types\";\nimport {Config} from \"@/config\";\nimport StarBackground from \"@/render/background\";\nimport {IScene} from \"@/render/sceneInterface\";\nimport {WalletObject} from \"@/render/wallet/walletObject\";\nimport {hashedParameterFloat01} from \"@/helpers/data_utils\";\n\n\nexport default class WalletObjectSoloDebugScene implements ThorEventListener, IScene {\n    public scene: Scene;\n\n    private walletObjects: Array<WalletObject> = [];\n    private rows: number;\n    private columns: number;\n\n    updateAnimations(dt: number) {\n        for (let wo of this.walletObjects) {\n            wo.update(dt)\n        }\n    }\n\n    onResize(w: number, h: number) {\n    }\n\n    constructor(scene: Scene) {\n        this.scene = scene\n        this.rows = 5\n        this.columns = 6\n\n        let wConfig = Config.Scene\n\n        const xStep = 300\n        const yStep = 280\n\n        let counter = 0\n        for (let row = 0; row < this.rows; ++row) {\n            for (let col = 0; col < this.columns; ++col) {\n                const name = `wlt_${counter}`\n\n                const wo = new WalletObject(name)\n                wo.scale.setScalar(3.0)\n                wo.position.x = (col - (this.columns - 1) / 2) * xStep\n                wo.position.y = (row - (this.rows - 1) / 2) * yStep\n                this.scene.add(wo)\n                this.walletObjects.push(wo)\n\n                counter++\n            }\n        }\n\n        if (Config.Scene.Cubemap.Enabled) {\n            StarBackground.makeStarEnvironment(this.scene)\n        }\n    }\n\n    receiveEvent(e: ThorEvent): void {\n    }\n\n    public setEnvironment(environment: THREE.CubeTexture) {\n    }\n}\n","import { render } from \"./RendererSimple.vue?vue&type=template&id=621e2d76\"\nimport script from \"./RendererSimple.vue?vue&type=script&lang=js\"\nexport * from \"./RendererSimple.vue?vue&type=script&lang=js\"\n\nimport \"./RendererSimple.vue?vue&type=style&index=0&id=621e2d76&lang=css\"\nscript.render = render\n\nexport default script","\n\nimport {defineComponent} from 'vue';\nimport RendererSimple from \"@/components/RendererSimple.vue\";\n// import RendererShader from \"@/components/RendererShader.vue\";\n\nexport default defineComponent({\n    name: 'App',\n\n    methods: {},\n\n    components: {\n        // RendererShader,\n        RendererSimple,\n    },\n\n    mounted() {\n    }\n});\n\n","import { render } from \"./App.vue?vue&type=template&id=c6e7d9ce\"\nimport script from \"./App.vue?vue&type=script&lang=ts\"\nexport * from \"./App.vue?vue&type=script&lang=ts\"\n\nimport \"./App.vue?vue&type=style&index=0&id=c6e7d9ce&lang=css\"\nscript.render = render\n\nexport default script","import {createApp} from 'vue'\nimport App from './App.vue'\nimport mitt from 'mitt';\n\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faFastBackward, faPause, faPlay, faStepBackward, faStepForward,} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/vue-fontawesome\";\nimport {Cache} from \"three\";\n\nlibrary.add(faPlay);\nlibrary.add(faPause);\nlibrary.add(faStepBackward);\nlibrary.add(faStepForward);\nlibrary.add(faFastBackward);\n\nCache.enabled = true\n\nconst emitter = mitt();\nconst app = createApp(App);\napp.component('font-awesome-icon', FontAwesomeIcon)\napp.config.globalProperties.emitter = emitter;\napp.mount('#app')\n"],"sourceRoot":""}